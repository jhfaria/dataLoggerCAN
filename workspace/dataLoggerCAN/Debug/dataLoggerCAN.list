
dataLoggerCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008184  08008184  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800818c  0800818c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008190  08008190  00018190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001344c  2000007c  08008210  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200134c8  08008210  000234c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f46  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000358e  00000000  00000000  00036ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  0003a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001000  00000000  00000000  0003b718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d4f  00000000  00000000  0003c718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee7e  00000000  00000000  00061467  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0f4b  00000000  00000000  000702e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  001512ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008088 	.word	0x08008088

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08008088 	.word	0x08008088

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fc95 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f006 fec2 	bl	800734c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fcad 	bl	8000f52 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000610:	f000 fc75 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000014 	.word	0x20000014
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return uwTick;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <HAL_GetTick+0x14>)
 800063a:	681b      	ldr	r3, [r3, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20012e10 	.word	0x20012e10

0800064c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff ffee 	bl	8000634 <HAL_GetTick>
 8000658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000664:	d005      	beq.n	8000672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_Delay+0x40>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000672:	bf00      	nop
 8000674:	f7ff ffde 	bl	8000634 <HAL_GetTick>
 8000678:	4602      	mov	r2, r0
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	429a      	cmp	r2, r3
 8000682:	d8f7      	bhi.n	8000674 <HAL_Delay+0x28>
  {
  }
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e0ed      	b.n	800087e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f006 fe74 	bl	800739c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f022 0202 	bic.w	r2, r2, #2
 80006c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006c4:	f7ff ffb6 	bl	8000634 <HAL_GetTick>
 80006c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006ca:	e012      	b.n	80006f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006cc:	f7ff ffb2 	bl	8000634 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d90b      	bls.n	80006f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2205      	movs	r2, #5
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e0c5      	b.n	800087e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1e5      	bne.n	80006cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0201 	orr.w	r2, r2, #1
 800070e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000710:	f7ff ff90 	bl	8000634 <HAL_GetTick>
 8000714:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000716:	e012      	b.n	800073e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000718:	f7ff ff8c 	bl	8000634 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b0a      	cmp	r3, #10
 8000724:	d90b      	bls.n	800073e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2205      	movs	r2, #5
 8000736:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e09f      	b.n	800087e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0e5      	beq.n	8000718 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7e1b      	ldrb	r3, [r3, #24]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7e5b      	ldrb	r3, [r3, #25]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7e9b      	ldrb	r3, [r3, #26]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0220 	orr.w	r2, r2, #32
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e007      	b.n	80007ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f022 0220 	bic.w	r2, r2, #32
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7edb      	ldrb	r3, [r3, #27]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d108      	bne.n	80007e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0210 	bic.w	r2, r2, #16
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e007      	b.n	80007f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f042 0210 	orr.w	r2, r2, #16
 80007f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7f1b      	ldrb	r3, [r3, #28]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d108      	bne.n	800080e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f042 0208 	orr.w	r2, r2, #8
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e007      	b.n	800081e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f022 0208 	bic.w	r2, r2, #8
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7f5b      	ldrb	r3, [r3, #29]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d108      	bne.n	8000838 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f042 0204 	orr.w	r2, r2, #4
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e007      	b.n	8000848 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0204 	bic.w	r2, r2, #4
 8000846:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	ea42 0103 	orr.w	r1, r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	430a      	orrs	r2, r1
 800086c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800089e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80008a0:	7cfb      	ldrb	r3, [r7, #19]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d003      	beq.n	80008ae <HAL_CAN_ConfigFilter+0x26>
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	f040 80be 	bne.w	8000a2a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80008ae:	4b65      	ldr	r3, [pc, #404]	; (8000a44 <HAL_CAN_ConfigFilter+0x1bc>)
 80008b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80008b8:	f043 0201 	orr.w	r2, r3, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80008c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	431a      	orrs	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f003 031f 	and.w	r3, r3, #31
 80008ee:	2201      	movs	r2, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	43db      	mvns	r3, r3
 8000900:	401a      	ands	r2, r3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d123      	bne.n	8000958 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	43db      	mvns	r3, r3
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000932:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3248      	adds	r2, #72	; 0x48
 8000938:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800094c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800094e:	6979      	ldr	r1, [r7, #20]
 8000950:	3348      	adds	r3, #72	; 0x48
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	440b      	add	r3, r1
 8000956:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d122      	bne.n	80009a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	431a      	orrs	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000980:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3248      	adds	r2, #72	; 0x48
 8000986:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800099a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800099c:	6979      	ldr	r1, [r7, #20]
 800099e:	3348      	adds	r3, #72	; 0x48
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	440b      	add	r3, r1
 80009a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d109      	bne.n	80009c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	401a      	ands	r2, r3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80009c0:	e007      	b.n	80009d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	431a      	orrs	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d109      	bne.n	80009ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	401a      	ands	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009ec:	e007      	b.n	80009fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	431a      	orrs	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d107      	bne.n	8000a16 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a1c:	f023 0201 	bic.w	r2, r3, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e006      	b.n	8000a38 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
  }
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	371c      	adds	r7, #28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40006400 	.word	0x40006400

08000a48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d12e      	bne.n	8000aba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2202      	movs	r2, #2
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a74:	f7ff fdde 	bl	8000634 <HAL_GetTick>
 8000a78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a7a:	e012      	b.n	8000aa2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a7c:	f7ff fdda 	bl	8000634 <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2b0a      	cmp	r3, #10
 8000a88:	d90b      	bls.n	8000aa2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2205      	movs	r2, #5
 8000a9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e012      	b.n	8000ac8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1e5      	bne.n	8000a7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e006      	b.n	8000ac8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
  }
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d003      	beq.n	8000af4 <HAL_CAN_GetRxMessage+0x24>
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	f040 80f4 	bne.w	8000cdc <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10e      	bne.n	8000b18 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d116      	bne.n	8000b36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e0e8      	b.n	8000cea <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d107      	bne.n	8000b36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0d9      	b.n	8000cea <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	331b      	adds	r3, #27
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	4413      	add	r3, r2
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0204 	and.w	r2, r3, #4
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10c      	bne.n	8000b6e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	331b      	adds	r3, #27
 8000b5c:	011b      	lsls	r3, r3, #4
 8000b5e:	4413      	add	r3, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	0d5b      	lsrs	r3, r3, #21
 8000b64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	e00b      	b.n	8000b86 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	331b      	adds	r3, #27
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	4413      	add	r3, r2
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	331b      	adds	r3, #27
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	4413      	add	r3, r2
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	085b      	lsrs	r3, r3, #1
 8000b96:	f003 0201 	and.w	r2, r3, #1
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	331b      	adds	r3, #27
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	4413      	add	r3, r2
 8000baa:	3304      	adds	r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 020f 	and.w	r2, r3, #15
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	331b      	adds	r3, #27
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	4413      	add	r3, r2
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	331b      	adds	r3, #27
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	4413      	add	r3, r2
 8000bda:	3304      	adds	r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	0c1b      	lsrs	r3, r3, #16
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	4413      	add	r3, r2
 8000bf0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	0a1a      	lsrs	r2, r3, #8
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	4413      	add	r3, r2
 8000c20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	0c1a      	lsrs	r2, r3, #16
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	0e1a      	lsrs	r2, r3, #24
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	3303      	adds	r3, #3
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	4413      	add	r3, r2
 8000c54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	4413      	add	r3, r2
 8000c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	0a1a      	lsrs	r2, r3, #8
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	3305      	adds	r3, #5
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	4413      	add	r3, r2
 8000c86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	0c1a      	lsrs	r2, r3, #16
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	3306      	adds	r3, #6
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4413      	add	r3, r2
 8000ca0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	0e1a      	lsrs	r2, r3, #24
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3307      	adds	r3, #7
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d108      	bne.n	8000cc8 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f042 0220 	orr.w	r2, r2, #32
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	e007      	b.n	8000cd8 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0220 	orr.w	r2, r2, #32
 8000cd6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e006      	b.n	8000cea <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
  }
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d002      	beq.n	8000d18 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d10f      	bne.n	8000d38 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	e005      	b.n	8000d38 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000d38:	68fb      	ldr	r3, [r7, #12]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff3e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff31 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff fb5c 	bl	8000634 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e099      	b.n	80010bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa8:	e00f      	b.n	8000fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000faa:	f7ff fb43 	bl	8000634 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d908      	bls.n	8000fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e078      	b.n	80010bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e8      	bne.n	8000faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_DMA_Init+0x158>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800100e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	2b04      	cmp	r3, #4
 8001022:	d107      	bne.n	8001034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4313      	orrs	r3, r2
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f023 0307 	bic.w	r3, r3, #7
 800104a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4313      	orrs	r3, r2
 8001054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2b04      	cmp	r3, #4
 800105c:	d117      	bne.n	800108e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4313      	orrs	r3, r2
 8001066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00e      	beq.n	800108e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fa0b 	bl	800148c <DMA_CheckFifoParam>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800108a:	2301      	movs	r3, #1
 800108c:	e016      	b.n	80010bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f9c2 	bl	8001420 <DMA_CalcBaseAndBitshift>
 800109c:	4603      	mov	r3, r0
 800109e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	223f      	movs	r2, #63	; 0x3f
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	f010803f 	.word	0xf010803f

080010c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d004      	beq.n	80010e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00c      	b.n	8001100 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001118:	4b92      	ldr	r3, [pc, #584]	; (8001364 <HAL_DMA_IRQHandler+0x258>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a92      	ldr	r2, [pc, #584]	; (8001368 <HAL_DMA_IRQHandler+0x25c>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0a9b      	lsrs	r3, r3, #10
 8001124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2208      	movs	r2, #8
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d01a      	beq.n	8001178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0204 	bic.w	r2, r2, #4
 800115e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2208      	movs	r2, #8
 8001166:	409a      	lsls	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d012      	beq.n	80011ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2201      	movs	r2, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	f043 0202 	orr.w	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	2204      	movs	r2, #4
 80011b4:	409a      	lsls	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d012      	beq.n	80011e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2204      	movs	r2, #4
 80011d2:	409a      	lsls	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	f043 0204 	orr.w	r2, r3, #4
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	2210      	movs	r2, #16
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d043      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d03c      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	2210      	movs	r2, #16
 8001208:	409a      	lsls	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d018      	beq.n	800124e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d108      	bne.n	800123c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d024      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	4798      	blx	r3
 800123a:	e01f      	b.n	800127c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01b      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
 800124c:	e016      	b.n	800127c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2220      	movs	r2, #32
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 808e 	beq.w	80013aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8086 	beq.w	80013aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	2220      	movs	r2, #32
 80012a4:	409a      	lsls	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d136      	bne.n	8001324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0216 	bic.w	r2, r2, #22
 80012c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <HAL_DMA_IRQHandler+0x1da>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0208 	bic.w	r2, r2, #8
 80012f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	223f      	movs	r2, #63	; 0x3f
 80012fc:	409a      	lsls	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001316:	2b00      	cmp	r3, #0
 8001318:	d07d      	beq.n	8001416 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
        }
        return;
 8001322:	e078      	b.n	8001416 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01c      	beq.n	800136c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d108      	bne.n	8001352 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	2b00      	cmp	r3, #0
 8001346:	d030      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
 8001350:	e02b      	b.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d027      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
 8001362:	e022      	b.n	80013aa <HAL_DMA_IRQHandler+0x29e>
 8001364:	20000014 	.word	0x20000014
 8001368:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0210 	bic.w	r2, r2, #16
 8001388:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d032      	beq.n	8001418 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d022      	beq.n	8001404 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2205      	movs	r2, #5
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d307      	bcc.n	80013f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f2      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x2ca>
 80013f0:	e000      	b.n	80013f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
 8001414:	e000      	b.n	8001418 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001416:	bf00      	nop
    }
  }
}
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop

08001420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3b10      	subs	r3, #16
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <DMA_CalcBaseAndBitshift+0x64>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <DMA_CalcBaseAndBitshift+0x68>)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d909      	bls.n	8001462 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	1d1a      	adds	r2, r3, #4
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	659a      	str	r2, [r3, #88]	; 0x58
 8001460:	e007      	b.n	8001472 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	aaaaaaab 	.word	0xaaaaaaab
 8001488:	0800811c 	.word	0x0800811c

0800148c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11f      	bne.n	80014e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d855      	bhi.n	8001558 <DMA_CheckFifoParam+0xcc>
 80014ac:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <DMA_CheckFifoParam+0x28>)
 80014ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b2:	bf00      	nop
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014d7 	.word	0x080014d7
 80014bc:	080014c5 	.word	0x080014c5
 80014c0:	08001559 	.word	0x08001559
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d045      	beq.n	800155c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014d4:	e042      	b.n	800155c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014de:	d13f      	bne.n	8001560 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e4:	e03c      	b.n	8001560 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ee:	d121      	bne.n	8001534 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d836      	bhi.n	8001564 <DMA_CheckFifoParam+0xd8>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <DMA_CheckFifoParam+0x70>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	08001513 	.word	0x08001513
 8001504:	0800150d 	.word	0x0800150d
 8001508:	08001525 	.word	0x08001525
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
      break;
 8001510:	e02f      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d024      	beq.n	8001568 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001522:	e021      	b.n	8001568 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800152c:	d11e      	bne.n	800156c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001532:	e01b      	b.n	800156c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d902      	bls.n	8001540 <DMA_CheckFifoParam+0xb4>
 800153a:	2b03      	cmp	r3, #3
 800153c:	d003      	beq.n	8001546 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800153e:	e018      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
      break;
 8001544:	e015      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00e      	beq.n	8001570 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
      break;
 8001556:	e00b      	b.n	8001570 <DMA_CheckFifoParam+0xe4>
      break;
 8001558:	bf00      	nop
 800155a:	e00a      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 800155c:	bf00      	nop
 800155e:	e008      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001560:	bf00      	nop
 8001562:	e006      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001564:	bf00      	nop
 8001566:	e004      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001568:	bf00      	nop
 800156a:	e002      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;   
 800156c:	bf00      	nop
 800156e:	e000      	b.n	8001572 <DMA_CheckFifoParam+0xe6>
      break;
 8001570:	bf00      	nop
    }
  } 
  
  return status; 
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e177      	b.n	800188c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 8166 	bne.w	8001886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x4a>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d123      	bne.n	8001612 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	69b9      	ldr	r1, [r7, #24]
 800160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0203 	and.w	r2, r3, #3
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d00b      	beq.n	8001666 <HAL_GPIO_Init+0xe6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165a:	2b11      	cmp	r3, #17
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b12      	cmp	r3, #18
 8001664:	d130      	bne.n	80016c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 0201 	and.w	r2, r3, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80c0 	beq.w	8001886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <HAL_GPIO_Init+0x320>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a64      	ldr	r2, [pc, #400]	; (80018a0 <HAL_GPIO_Init+0x320>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <HAL_GPIO_Init+0x320>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001722:	4a60      	ldr	r2, [pc, #384]	; (80018a4 <HAL_GPIO_Init+0x324>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_GPIO_Init+0x328>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d037      	beq.n	80017be <HAL_GPIO_Init+0x23e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a56      	ldr	r2, [pc, #344]	; (80018ac <HAL_GPIO_Init+0x32c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d031      	beq.n	80017ba <HAL_GPIO_Init+0x23a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_GPIO_Init+0x330>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x236>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_GPIO_Init+0x334>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x232>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x338>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x22e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x33c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x22a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x340>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x344>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x222>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x348>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x21e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x34c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x21a>
 8001796:	2309      	movs	r3, #9
 8001798:	e012      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 800179a:	230a      	movs	r3, #10
 800179c:	e010      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 800179e:	2308      	movs	r3, #8
 80017a0:	e00e      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d0:	4934      	ldr	r1, [pc, #208]	; (80018a4 <HAL_GPIO_Init+0x324>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <HAL_GPIO_Init+0x350>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001802:	4a33      	ldr	r2, [pc, #204]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001808:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <HAL_GPIO_Init+0x350>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800182c:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_GPIO_Init+0x350>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_GPIO_Init+0x350>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001880:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f ae84 	bls.w	800159c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	3724      	adds	r7, #36	; 0x24
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40021800 	.word	0x40021800
 80018c4:	40021c00 	.word	0x40021c00
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40022400 	.word	0x40022400
 80018d0:	40013c00 	.word	0x40013c00

080018d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	401a      	ands	r2, r3
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	429a      	cmp	r2, r3
 800194e:	d104      	bne.n	800195a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	041a      	lsls	r2, r3, #16
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001958:	e002      	b.n	8001960 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	619a      	str	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e22d      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d075      	beq.n	8001a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198a:	4ba3      	ldr	r3, [pc, #652]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d00c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4ba0      	ldr	r3, [pc, #640]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b9d      	ldr	r3, [pc, #628]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ae:	d10b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	4b99      	ldr	r3, [pc, #612]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d05b      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d157      	bne.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e208      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x74>
 80019d2:	4b91      	ldr	r3, [pc, #580]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a90      	ldr	r2, [pc, #576]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x98>
 80019ea:	4b8b      	ldr	r3, [pc, #556]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a8a      	ldr	r2, [pc, #552]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a87      	ldr	r2, [pc, #540]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a80      	ldr	r2, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7fe fe06 	bl	8000634 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7fe fe02 	bl	8000634 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1cd      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7fe fdf2 	bl	8000634 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7fe fdee 	bl	8000634 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1b9      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0xe8>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d11c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e18d      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4952      	ldr	r1, [pc, #328]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e03a      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_RCC_OscConfig+0x2b0>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7fe fda7 	bl	8000634 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aea:	f7fe fda3 	bl	8000634 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e16e      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4940      	ldr	r1, [pc, #256]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_OscConfig+0x2b0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7fe fd86 	bl	8000634 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7fe fd82 	bl	8000634 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e14d      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d030      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d016      	beq.n	8001b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7fe fd66 	bl	8000634 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7fe fd62 	bl	8000634 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e12d      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x200>
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7fe fd4f 	bl	8000634 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7fe fd4b 	bl	8000634 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e116      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a0 	beq.w	8001d06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d121      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe fd11 	bl	8000634 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e011      	b.n	8001c3a <HAL_RCC_OscConfig+0x2ce>
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470000 	.word	0x42470000
 8001c20:	42470e80 	.word	0x42470e80
 8001c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7fe fd04 	bl	8000634 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0cf      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x478>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
 8001c4e:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a65      	ldr	r2, [pc, #404]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x32a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x312>
 8001c64:	4b60      	ldr	r3, [pc, #384]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a5f      	ldr	r2, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a5c      	ldr	r2, [pc, #368]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x32a>
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a59      	ldr	r2, [pc, #356]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4b57      	ldr	r3, [pc, #348]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a56      	ldr	r2, [pc, #344]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7fe fcc9 	bl	8000634 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe fcc5 	bl	8000634 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e08e      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x33a>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7fe fcb3 	bl	8000634 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7fe fcaf 	bl	8000634 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e078      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a3a      	ldr	r2, [pc, #232]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d064      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d05c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d141      	bne.n	8001da6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_RCC_OscConfig+0x480>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe fc84 	bl	8000634 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe fc80 	bl	8000634 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04b      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	019b      	lsls	r3, r3, #6
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	3b01      	subs	r3, #1
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	491d      	ldr	r1, [pc, #116]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_RCC_OscConfig+0x480>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fc59 	bl	8000634 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe fc55 	bl	8000634 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e020      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x41a>
 8001da4:	e018      	b.n	8001dd8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x480>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fc42 	bl	8000634 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe fc3e 	bl	8000634 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_RCC_OscConfig+0x47c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x448>
 8001dd2:	e001      	b.n	8001dd8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	42470060 	.word	0x42470060

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0ca      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d90c      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b6      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e44:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e5c:	4b52      	ldr	r3, [pc, #328]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	494c      	ldr	r1, [pc, #304]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d044      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d119      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07d      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06d      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e065      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4933      	ldr	r1, [pc, #204]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fba8 	bl	8000634 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7fe fba4 	bl	8000634 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e04d      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d20c      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e030      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4915      	ldr	r1, [pc, #84]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	490d      	ldr	r1, [pc, #52]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f76:	f000 f81d 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7fe fb1e 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08008138 	.word	0x08008138
 8001fb0:	20000014 	.word	0x20000014

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fca:	4b63      	ldr	r3, [pc, #396]	; (8002158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d007      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x32>
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d008      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x38>
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 80b4 	bne.w	8002148 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fe2:	60bb      	str	r3, [r7, #8]
       break;
 8001fe4:	e0b3      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fe8:	60bb      	str	r3, [r7, #8]
      break;
 8001fea:	e0b0      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fec:	4b5a      	ldr	r3, [pc, #360]	; (8002158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff6:	4b58      	ldr	r3, [pc, #352]	; (8002158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d04a      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002002:	4b55      	ldr	r3, [pc, #340]	; (8002158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	f04f 0400 	mov.w	r4, #0
 800200c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	ea03 0501 	and.w	r5, r3, r1
 8002018:	ea04 0602 	and.w	r6, r4, r2
 800201c:	4629      	mov	r1, r5
 800201e:	4632      	mov	r2, r6
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	f04f 0400 	mov.w	r4, #0
 8002028:	0154      	lsls	r4, r2, #5
 800202a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800202e:	014b      	lsls	r3, r1, #5
 8002030:	4619      	mov	r1, r3
 8002032:	4622      	mov	r2, r4
 8002034:	1b49      	subs	r1, r1, r5
 8002036:	eb62 0206 	sbc.w	r2, r2, r6
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	f04f 0400 	mov.w	r4, #0
 8002042:	0194      	lsls	r4, r2, #6
 8002044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002048:	018b      	lsls	r3, r1, #6
 800204a:	1a5b      	subs	r3, r3, r1
 800204c:	eb64 0402 	sbc.w	r4, r4, r2
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	00e2      	lsls	r2, r4, #3
 800205a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800205e:	00d9      	lsls	r1, r3, #3
 8002060:	460b      	mov	r3, r1
 8002062:	4614      	mov	r4, r2
 8002064:	195b      	adds	r3, r3, r5
 8002066:	eb44 0406 	adc.w	r4, r4, r6
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	0262      	lsls	r2, r4, #9
 8002074:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002078:	0259      	lsls	r1, r3, #9
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	4618      	mov	r0, r3
 8002080:	4621      	mov	r1, r4
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f04f 0400 	mov.w	r4, #0
 8002088:	461a      	mov	r2, r3
 800208a:	4623      	mov	r3, r4
 800208c:	f7fe f900 	bl	8000290 <__aeabi_uldivmod>
 8002090:	4603      	mov	r3, r0
 8002092:	460c      	mov	r4, r1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e049      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	f04f 0400 	mov.w	r4, #0
 80020a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	ea03 0501 	and.w	r5, r3, r1
 80020ae:	ea04 0602 	and.w	r6, r4, r2
 80020b2:	4629      	mov	r1, r5
 80020b4:	4632      	mov	r2, r6
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	f04f 0400 	mov.w	r4, #0
 80020be:	0154      	lsls	r4, r2, #5
 80020c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020c4:	014b      	lsls	r3, r1, #5
 80020c6:	4619      	mov	r1, r3
 80020c8:	4622      	mov	r2, r4
 80020ca:	1b49      	subs	r1, r1, r5
 80020cc:	eb62 0206 	sbc.w	r2, r2, r6
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	0194      	lsls	r4, r2, #6
 80020da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020de:	018b      	lsls	r3, r1, #6
 80020e0:	1a5b      	subs	r3, r3, r1
 80020e2:	eb64 0402 	sbc.w	r4, r4, r2
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	00e2      	lsls	r2, r4, #3
 80020f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020f4:	00d9      	lsls	r1, r3, #3
 80020f6:	460b      	mov	r3, r1
 80020f8:	4614      	mov	r4, r2
 80020fa:	195b      	adds	r3, r3, r5
 80020fc:	eb44 0406 	adc.w	r4, r4, r6
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	02a2      	lsls	r2, r4, #10
 800210a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800210e:	0299      	lsls	r1, r3, #10
 8002110:	460b      	mov	r3, r1
 8002112:	4614      	mov	r4, r2
 8002114:	4618      	mov	r0, r3
 8002116:	4621      	mov	r1, r4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f04f 0400 	mov.w	r4, #0
 800211e:	461a      	mov	r2, r3
 8002120:	4623      	mov	r3, r4
 8002122:	f7fe f8b5 	bl	8000290 <__aeabi_uldivmod>
 8002126:	4603      	mov	r3, r0
 8002128:	460c      	mov	r4, r1
 800212a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	60bb      	str	r3, [r7, #8]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800214a:	60bb      	str	r3, [r7, #8]
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	68bb      	ldr	r3, [r7, #8]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000014 	.word	0x20000014

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff0 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002184:	4601      	mov	r1, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a9b      	lsrs	r3, r3, #10
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	08008148 	.word	0x08008148

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffdc 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ac:	4601      	mov	r1, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0b5b      	lsrs	r3, r3, #13
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4a03      	ldr	r2, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08008148 	.word	0x08008148

080021cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e01d      	b.n	800221a <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f005 f91b 	bl	800742c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f810 	bl	8002224 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b08e      	sub	sp, #56	; 0x38
 8002228:	af04      	add	r7, sp, #16
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002244:	2376      	movs	r3, #118	; 0x76
 8002246:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681d      	ldr	r5, [r3, #0]
 800224c:	466c      	mov	r4, sp
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002260:	4628      	mov	r0, r5
 8002262:	f001 fc27 	bl	8003ab4 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_SD_InitCard+0xb4>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fc68 	bl	8003b46 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_SD_InitCard+0xb4>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800227c:	2002      	movs	r0, #2
 800227e:	f7fe f9e5 	bl	800064c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fe6c 	bl	8002f60 <SD_PowerON>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e013      	b.n	80022d0 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fd90 	bl	8002dce <SD_InitCard>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bdb0      	pop	{r4, r5, r7, pc}
 80022d8:	422580a0 	.word	0x422580a0

080022dc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b08f      	sub	sp, #60	; 0x3c
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80022ee:	f7fe f9a1 	bl	8000634 <HAL_GetTick>
 80022f2:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d107      	bne.n	8002312 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e177      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 816a 	bne.w	80025f4 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	441a      	add	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	429a      	cmp	r2, r3
 8002332:	d907      	bls.n	8002344 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e15e      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2203      	movs	r2, #3
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	2b01      	cmp	r3, #1
 800235a:	d002      	beq.n	8002362 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fc7f 	bl	8003c6e <SDMMC_CmdBlockLength>
 8002370:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	431a      	orrs	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e133      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239e:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	025b      	lsls	r3, r3, #9
 80023a4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80023a6:	2390      	movs	r3, #144	; 0x90
 80023a8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f107 0210 	add.w	r2, r7, #16
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f001 fc28 	bl	8003c16 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d90a      	bls.n	80023e2 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2202      	movs	r2, #2
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 fc90 	bl	8003cfe <SDMMC_CmdReadMultiBlock>
 80023de:	6378      	str	r0, [r7, #52]	; 0x34
 80023e0:	e009      	b.n	80023f6 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fc61 	bl	8003cb6 <SDMMC_CmdReadSingleBlock>
 80023f4:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d04a      	beq.n	8002492 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0f1      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d016      	beq.n	800245a <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800242c:	2300      	movs	r3, #0
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
 8002430:	e00d      	b.n	800244e <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6819      	ldr	r1, [r3, #0]
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800243c:	18d4      	adds	r4, r2, r3
 800243e:	4608      	mov	r0, r1
 8002440:	f001 fb63 	bl	8003b0a <SDIO_ReadFIFO>
 8002444:	4603      	mov	r3, r0
 8002446:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	3301      	adds	r3, #1
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	2b07      	cmp	r3, #7
 8002452:	d9ee      	bls.n	8002432 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	3320      	adds	r3, #32
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800245a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_SD_ReadBlocks+0x194>
 8002460:	f7fe f8e8 	bl	8000634 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800246c:	429a      	cmp	r2, r3
 800246e:	d810      	bhi.n	8002492 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0b7      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002498:	f240 332a 	movw	r3, #810	; 0x32a
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0bd      	beq.n	800241e <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_SD_ReadBlocks+0x216>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d91d      	bls.n	80024f2 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d019      	beq.n	80024f2 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fc88 	bl	8003dd8 <SDMMC_CmdStopTransfer>
 80024c8:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e087      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002508:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	f043 0208 	orr.w	r2, r3, #8
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e06f      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d010      	beq.n	8002552 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e057      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d037      	beq.n	80025d0 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e03f      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fabf 	bl	8003b0a <SDIO_ReadFIFO>
 800258c:	4602      	mov	r2, r0
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	3304      	adds	r3, #4
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_SD_ReadBlocks+0x2d2>
 800259e:	f7fe f849 	bl	8000634 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d810      	bhi.n	80025d0 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e018      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1d1      	bne.n	8002582 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e006      	b.n	8002602 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	373c      	adds	r7, #60	; 0x3c
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b08e      	sub	sp, #56	; 0x38
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002618:	2300      	movs	r3, #0
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7fe f80a 	bl	8000634 <HAL_GetTick>
 8002620:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e148      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	f040 813b 	bne.w	80028c4 <HAL_SD_WriteBlocks+0x2ba>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	441a      	add	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	429a      	cmp	r2, r3
 8002660:	d907      	bls.n	8002672 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e12f      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2203      	movs	r2, #3
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	2b01      	cmp	r3, #1
 8002688:	d002      	beq.n	8002690 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	025b      	lsls	r3, r3, #9
 800268e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fae8 	bl	8003c6e <SDMMC_CmdBlockLength>
 800269e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e104      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d90a      	bls.n	80026e4 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 fb57 	bl	8003d8e <SDMMC_CmdWriteMultiBlock>
 80026e0:	6378      	str	r0, [r7, #52]	; 0x34
 80026e2:	e009      	b.n	80026f8 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2210      	movs	r2, #16
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fb28 	bl	8003d46 <SDMMC_CmdWriteSingleBlock>
 80026f6:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80026f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d010      	beq.n	8002720 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	431a      	orrs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0d8      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002724:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800272c:	2390      	movs	r3, #144	; 0x90
 800272e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002738:	2301      	movs	r3, #1
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f107 0210 	add.w	r2, r7, #16
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f001 fa65 	bl	8003c16 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800274c:	e037      	b.n	80027be <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d014      	beq.n	8002786 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800275c:	2300      	movs	r3, #0
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
 8002760:	e00b      	b.n	800277a <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276c:	4413      	add	r3, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f001 f9d8 	bl	8003b24 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	3301      	adds	r3, #1
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	2b07      	cmp	r3, #7
 800277e:	d9f0      	bls.n	8002762 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	3320      	adds	r3, #32
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_SD_WriteBlocks+0x192>
 800278c:	f7fd ff52 	bl	8000634 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002798:	429a      	cmp	r2, r3
 800279a:	d810      	bhi.n	80027be <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e089      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c4:	f240 331a 	movw	r3, #794	; 0x31a
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0bf      	beq.n	800274e <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_SD_WriteBlocks+0x214>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d91d      	bls.n	800281e <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d019      	beq.n	800281e <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 faf2 	bl	8003dd8 <SDMMC_CmdStopTransfer>
 80027f4:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e059      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	f043 0208 	orr.w	r2, r3, #8
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e041      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002864:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e029      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d010      	beq.n	80028ae <HAL_SD_WriteBlocks+0x2a4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e011      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e006      	b.n	80028d2 <HAL_SD_WriteBlocks+0x2c8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3738      	adds	r7, #56	; 0x38
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ec:	0e1b      	lsrs	r3, r3, #24
 80028ee:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	b2da      	uxtb	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	b2da      	uxtb	r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	b2db      	uxtb	r3, r3
 8002926:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b2db      	uxtb	r3, r3
 8002938:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002946:	b2db      	uxtb	r3, r3
 8002948:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002956:	0e1b      	lsrs	r3, r3, #24
 8002958:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	b29b      	uxth	r3, r3
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	b29a      	uxth	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296a:	0c1b      	lsrs	r3, r3, #16
 800296c:	b2db      	uxtb	r3, r3
 800296e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	88db      	ldrh	r3, [r3, #6]
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	b29b      	uxth	r3, r3
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	b29b      	uxth	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b29a      	uxth	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	b2da      	uxtb	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	09db      	lsrs	r3, r3, #7
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2200      	movs	r2, #0
 80029e6:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 8087 	bne.w	8002b00 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	029b      	lsls	r3, r3, #10
 80029f6:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a18:	0e1b      	lsrs	r3, r3, #24
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 0306 	and.w	r3, r3, #6
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	7e1b      	ldrb	r3, [r3, #24]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	09db      	lsrs	r3, r3, #7
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7e1b      	ldrb	r3, [r3, #24]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3302      	adds	r3, #2
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002aca:	fb02 f203 	mul.w	r2, r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	7a1b      	ldrb	r3, [r3, #8]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2301      	movs	r3, #1
 8002adc:	fa03 f202 	lsl.w	r2, r3, r2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002aec:	0a52      	lsrs	r2, r2, #9
 8002aee:	fb02 f203 	mul.w	r2, r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afc:	661a      	str	r2, [r3, #96]	; 0x60
 8002afe:	e04d      	b.n	8002b9c <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d138      	bne.n	8002b7a <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b20:	0e1b      	lsrs	r3, r3, #24
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	0c1b      	lsrs	r3, r3, #16
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	029a      	lsls	r2, r3, #10
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	661a      	str	r2, [r3, #96]	; 0x60
 8002b78:	e010      	b.n	8002b9c <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0c1      	b.n	8002d20 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	7e9b      	ldrb	r3, [r3, #26]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	09db      	lsrs	r3, r3, #7
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	0e1b      	lsrs	r3, r3, #24
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	09db      	lsrs	r3, r3, #7
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	7fdb      	ldrb	r3, [r3, #31]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	09db      	lsrs	r3, r3, #7
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f986 	bl	80030b0 <SD_SendStatus>
 8002da4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	0a5b      	lsrs	r3, r3, #9
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002dce:	b5b0      	push	{r4, r5, r7, lr}
 8002dd0:	b094      	sub	sp, #80	; 0x50
 8002dd2:	af04      	add	r7, sp, #16
 8002dd4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 febd 	bl	8003b62 <SDIO_GetPowerState>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002df2:	e0b1      	b.n	8002f58 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d02f      	beq.n	8002e5c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 f8bc 	bl	8003f7e <SDMMC_CmdSendCID>
 8002e06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <SD_InitCard+0x44>
    {
      return errorstate;
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	e0a2      	b.n	8002f58 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fee7 	bl	8003bec <SDIO_GetResponse>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2104      	movs	r1, #4
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fede 	bl	8003bec <SDIO_GetResponse>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2108      	movs	r1, #8
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fed5 	bl	8003bec <SDIO_GetResponse>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	210c      	movs	r1, #12
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fecc 	bl	8003bec <SDIO_GetResponse>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d00d      	beq.n	8002e80 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f107 020e 	add.w	r2, r7, #14
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f8c6 	bl	8004000 <SDMMC_CmdSetRelAdd>
 8002e74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <SD_InitCard+0xb2>
    {
      return errorstate;
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7e:	e06b      	b.n	8002f58 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d036      	beq.n	8002ef6 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f001 f88e 	bl	8003fbe <SDMMC_CmdSendCSD>
 8002ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <SD_InitCard+0xe0>
    {
      return errorstate;
 8002eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eac:	e054      	b.n	8002f58 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fe99 	bl	8003bec <SDIO_GetResponse>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2104      	movs	r1, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fe90 	bl	8003bec <SDIO_GetResponse>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fe87 	bl	8003bec <SDIO_GetResponse>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	210c      	movs	r1, #12
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fe7e 	bl	8003bec <SDIO_GetResponse>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2104      	movs	r1, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fe75 	bl	8003bec <SDIO_GetResponse>
 8002f02:	4603      	mov	r3, r0
 8002f04:	0d1a      	lsrs	r2, r3, #20
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002f0a:	f107 0310 	add.w	r3, r7, #16
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff fce2 	bl	80028da <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	461a      	mov	r2, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	4608      	mov	r0, r1
 8002f2a:	f000 ff79 	bl	8003e20 <SDMMC_CmdSelDesel>
 8002f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <SD_InitCard+0x16c>
  {
    return errorstate;
 8002f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f38:	e00e      	b.n	8002f58 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681d      	ldr	r5, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	466c      	mov	r4, sp
 8002f42:	f103 0210 	add.w	r2, r3, #16
 8002f46:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f50:	4628      	mov	r0, r5
 8002f52:	f000 fdaf 	bl	8003ab4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3740      	adds	r7, #64	; 0x40
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bdb0      	pop	{r4, r5, r7, pc}

08002f60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 ff74 	bl	8003e6a <SDMMC_CmdGoIdleState>
 8002f82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <SD_PowerON+0x2e>
  {
    return errorstate;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	e08c      	b.n	80030a8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 ff89 	bl	8003eaa <SDMMC_CmdOperCond>
 8002f98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03d      	beq.n	800301c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002fa6:	e032      	b.n	800300e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d102      	bne.n	8002fbc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002fb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fba:	e075      	b.n	80030a8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 ff92 	bl	8003eec <SDMMC_CmdAppCommand>
 8002fc8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fd4:	e068      	b.n	80030a8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 ffa9 	bl	8003f34 <SDMMC_CmdAppOperCommand>
 8002fe2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fee:	e05b      	b.n	80030a8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fdf8 	bl	8003bec <SDIO_GetResponse>
 8002ffc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	0fdb      	lsrs	r3, r3, #31
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <SD_PowerON+0xaa>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <SD_PowerON+0xac>
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0c9      	beq.n	8002fa8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
 800301a:	e044      	b.n	80030a6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8003022:	e031      	b.n	8003088 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	60ba      	str	r2, [r7, #8]
 800302a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800302e:	4293      	cmp	r3, r2
 8003030:	d102      	bne.n	8003038 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003036:	e037      	b.n	80030a8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 ff54 	bl	8003eec <SDMMC_CmdAppCommand>
 8003044:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <SD_PowerON+0xf0>
      {
        return errorstate;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	e02b      	b.n	80030a8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003058:	4618      	mov	r0, r3
 800305a:	f000 ff6b 	bl	8003f34 <SDMMC_CmdAppOperCommand>
 800305e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <SD_PowerON+0x10a>
      {
        return errorstate;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	e01e      	b.n	80030a8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fdbb 	bl	8003bec <SDIO_GetResponse>
 8003076:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	0fdb      	lsrs	r3, r3, #31
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <SD_PowerON+0x124>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <SD_PowerON+0x126>
 8003084:	2300      	movs	r3, #0
 8003086:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ca      	beq.n	8003024 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
 800309e:	e002      	b.n	80030a6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80030c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030c8:	e018      	b.n	80030fc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 ffb5 	bl	8004046 <SDMMC_CmdSendStatus>
 80030dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <SD_SendStatus+0x38>
  {
    return errorstate;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	e009      	b.n	80030fc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fd7c 	bl	8003bec <SDIO_GetResponse>
 80030f4:	4602      	mov	r2, r0
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e03f      	b.n	8003196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f004 fa66 	bl	80075fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 faa9 	bl	80036a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800315c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800316c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d130      	bne.n	800321a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Transmit_IT+0x26>
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e029      	b.n	800321c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Transmit_IT+0x38>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e022      	b.n	800321c <HAL_UART_Transmit_IT+0x7e>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2221      	movs	r2, #33	; 0x21
 80031fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003214:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_UART_IRQHandler+0x52>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f992 	bl	800359c <UART_Receive_IT>
      return;
 8003278:	e0cc      	b.n	8003414 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80ab 	beq.w	80033d8 <HAL_UART_IRQHandler+0x1b0>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_UART_IRQHandler+0x70>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80a0 	beq.w	80033d8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_UART_IRQHandler+0x90>
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_UART_IRQHandler+0xb0>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_UART_IRQHandler+0xd0>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_UART_IRQHandler+0xf0>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	f043 0208 	orr.w	r2, r3, #8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d078      	beq.n	8003412 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_UART_IRQHandler+0x112>
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f931 	bl	800359c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <HAL_UART_IRQHandler+0x13a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d031      	beq.n	80033c6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f87a 	bl	800345c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d123      	bne.n	80033be <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003384:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	2b00      	cmp	r3, #0
 800338c:	d013      	beq.n	80033b6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_UART_IRQHandler+0x1f4>)
 8003394:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fe94 	bl	80010c8 <HAL_DMA_Abort_IT>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033b0:	4610      	mov	r0, r2
 80033b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e00e      	b.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f846 	bl	8003448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033bc:	e00a      	b.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f842 	bl	8003448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e006      	b.n	80033d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f83e 	bl	8003448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033d2:	e01e      	b.n	8003412 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	bf00      	nop
    return;
 80033d6:	e01c      	b.n	8003412 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_UART_IRQHandler+0x1cc>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f867 	bl	80034c0 <UART_Transmit_IT>
    return;
 80033f2:	e00f      	b.n	8003414 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_UART_IRQHandler+0x1ec>
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8af 	bl	800356c <UART_EndTransmit_IT>
    return;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003412:	bf00      	nop
  }
}
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	08003499 	.word	0x08003499

08003420 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003472:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff ffc8 	bl	8003448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b21      	cmp	r3, #33	; 0x21
 80034d2:	d144      	bne.n	800355e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034dc:	d11a      	bne.n	8003514 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	1c9a      	adds	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	621a      	str	r2, [r3, #32]
 8003506:	e00e      	b.n	8003526 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	621a      	str	r2, [r3, #32]
 8003512:	e008      	b.n	8003526 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	1c59      	adds	r1, r3, #1
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6211      	str	r1, [r2, #32]
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29b      	uxth	r3, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4619      	mov	r1, r3
 8003534:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003548:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003558:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003582:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff47 	bl	8003420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b22      	cmp	r3, #34	; 0x22
 80035ae:	d171      	bne.n	8003694 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d123      	bne.n	8003602 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10e      	bne.n	80035e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
 80035e4:	e029      	b.n	800363a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003600:	e01b      	b.n	800363a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6858      	ldr	r0, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6291      	str	r1, [r2, #40]	; 0x28
 800361a:	b2c2      	uxtb	r2, r0
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e00c      	b.n	800363a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	1c58      	adds	r0, r3, #1
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	6288      	str	r0, [r1, #40]	; 0x28
 8003632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29b      	uxth	r3, r3
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4619      	mov	r1, r3
 8003648:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800364a:	2b00      	cmp	r3, #0
 800364c:	d120      	bne.n	8003690 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0220 	bic.w	r2, r2, #32
 800365c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800366c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fed4 	bl	8003434 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e002      	b.n	8003696 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036e0:	f023 030c 	bic.w	r3, r3, #12
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	68f9      	ldr	r1, [r7, #12]
 80036ea:	430b      	orrs	r3, r1
 80036ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	f040 80e4 	bne.w	80038d8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4aab      	ldr	r2, [pc, #684]	; (80039c4 <UART_SetConfig+0x324>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <UART_SetConfig+0x84>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4aaa      	ldr	r2, [pc, #680]	; (80039c8 <UART_SetConfig+0x328>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d16c      	bne.n	80037fe <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003724:	f7fe fd3e 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8003728:	4602      	mov	r2, r0
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009a      	lsls	r2, r3, #2
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4aa3      	ldr	r2, [pc, #652]	; (80039cc <UART_SetConfig+0x32c>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	011c      	lsls	r4, r3, #4
 8003748:	f7fe fd2c 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 800374c:	4602      	mov	r2, r0
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009a      	lsls	r2, r3, #2
 8003756:	441a      	add	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003762:	f7fe fd1f 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8003766:	4602      	mov	r2, r0
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009a      	lsls	r2, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	4a93      	ldr	r2, [pc, #588]	; (80039cc <UART_SetConfig+0x32c>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2264      	movs	r2, #100	; 0x64
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	1aeb      	subs	r3, r5, r3
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	3332      	adds	r3, #50	; 0x32
 8003790:	4a8e      	ldr	r2, [pc, #568]	; (80039cc <UART_SetConfig+0x32c>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800379e:	441c      	add	r4, r3
 80037a0:	f7fe fd00 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80037a4:	4602      	mov	r2, r0
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009a      	lsls	r2, r3, #2
 80037ae:	441a      	add	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80037ba:	f7fe fcf3 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009a      	lsls	r2, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	4a7d      	ldr	r2, [pc, #500]	; (80039cc <UART_SetConfig+0x32c>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2264      	movs	r2, #100	; 0x64
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	1aeb      	subs	r3, r5, r3
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	3332      	adds	r3, #50	; 0x32
 80037e8:	4a78      	ldr	r2, [pc, #480]	; (80039cc <UART_SetConfig+0x32c>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	f003 0207 	and.w	r2, r3, #7
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4422      	add	r2, r4
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	e154      	b.n	8003aa8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80037fe:	f7fe fcbd 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003802:	4602      	mov	r2, r0
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009a      	lsls	r2, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	4a6c      	ldr	r2, [pc, #432]	; (80039cc <UART_SetConfig+0x32c>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011c      	lsls	r4, r3, #4
 8003822:	f7fe fcab 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003826:	4602      	mov	r2, r0
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fbb2 f5f3 	udiv	r5, r2, r3
 800383c:	f7fe fc9e 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003840:	4602      	mov	r2, r0
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	4a5d      	ldr	r2, [pc, #372]	; (80039cc <UART_SetConfig+0x32c>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	2264      	movs	r2, #100	; 0x64
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	1aeb      	subs	r3, r5, r3
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	3332      	adds	r3, #50	; 0x32
 800386a:	4a58      	ldr	r2, [pc, #352]	; (80039cc <UART_SetConfig+0x32c>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003878:	441c      	add	r4, r3
 800387a:	f7fe fc7f 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 800387e:	4602      	mov	r2, r0
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fbb2 f5f3 	udiv	r5, r2, r3
 8003894:	f7fe fc72 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003898:	4602      	mov	r2, r0
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	441a      	add	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	4a47      	ldr	r2, [pc, #284]	; (80039cc <UART_SetConfig+0x32c>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	2264      	movs	r2, #100	; 0x64
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	1aeb      	subs	r3, r5, r3
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	3332      	adds	r3, #50	; 0x32
 80038c2:	4a42      	ldr	r2, [pc, #264]	; (80039cc <UART_SetConfig+0x32c>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	f003 0207 	and.w	r2, r3, #7
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4422      	add	r2, r4
 80038d4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80038d6:	e0e7      	b.n	8003aa8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a39      	ldr	r2, [pc, #228]	; (80039c4 <UART_SetConfig+0x324>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <UART_SetConfig+0x24c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <UART_SetConfig+0x328>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d171      	bne.n	80039d0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80038ec:	f7fe fc5a 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009a      	lsls	r2, r3, #2
 80038fa:	441a      	add	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	4a31      	ldr	r2, [pc, #196]	; (80039cc <UART_SetConfig+0x32c>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	011c      	lsls	r4, r3, #4
 8003910:	f7fe fc48 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8003914:	4602      	mov	r2, r0
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009a      	lsls	r2, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	fbb2 f5f3 	udiv	r5, r2, r3
 800392a:	f7fe fc3b 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 800392e:	4602      	mov	r2, r0
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	4a21      	ldr	r2, [pc, #132]	; (80039cc <UART_SetConfig+0x32c>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2264      	movs	r2, #100	; 0x64
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	1aeb      	subs	r3, r5, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <UART_SetConfig+0x32c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	441c      	add	r4, r3
 8003966:	f7fe fc1d 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 800396a:	4602      	mov	r2, r0
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003980:	f7fe fc10 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8003984:	4602      	mov	r2, r0
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009a      	lsls	r2, r3, #2
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <UART_SetConfig+0x32c>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2264      	movs	r2, #100	; 0x64
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	1aeb      	subs	r3, r5, r3
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a07      	ldr	r2, [pc, #28]	; (80039cc <UART_SetConfig+0x32c>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	f003 020f 	and.w	r2, r3, #15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4422      	add	r2, r4
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	e071      	b.n	8003aa8 <UART_SetConfig+0x408>
 80039c4:	40011000 	.word	0x40011000
 80039c8:	40011400 	.word	0x40011400
 80039cc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80039d0:	f7fe fbd4 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009a      	lsls	r2, r3, #2
 80039de:	441a      	add	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	4a31      	ldr	r2, [pc, #196]	; (8003ab0 <UART_SetConfig+0x410>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	011c      	lsls	r4, r3, #4
 80039f4:	f7fe fbc2 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009a      	lsls	r2, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a0e:	f7fe fbb5 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003a12:	4602      	mov	r2, r0
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009a      	lsls	r2, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	4a21      	ldr	r2, [pc, #132]	; (8003ab0 <UART_SetConfig+0x410>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2264      	movs	r2, #100	; 0x64
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	1aeb      	subs	r3, r5, r3
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	3332      	adds	r3, #50	; 0x32
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <UART_SetConfig+0x410>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a48:	441c      	add	r4, r3
 8003a4a:	f7fe fb97 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009a      	lsls	r2, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a64:	f7fe fb8a 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009a      	lsls	r2, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <UART_SetConfig+0x410>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2264      	movs	r2, #100	; 0x64
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	1aeb      	subs	r3, r5, r3
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	3332      	adds	r3, #50	; 0x32
 8003a92:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <UART_SetConfig+0x410>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 020f 	and.w	r2, r3, #15
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4422      	add	r2, r4
 8003aa4:	609a      	str	r2, [r3, #8]
}
 8003aa6:	e7ff      	b.n	8003aa8 <UART_SetConfig+0x408>
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab0:	51eb851f 	.word	0x51eb851f

08003ab4 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	f107 001c 	add.w	r0, r7, #28
 8003ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003aca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003acc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003ace:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003ad2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003ad6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003ada:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003ade:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003aee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	b004      	add	sp, #16
 8003b08:	4770      	bx	lr

08003b0a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2203      	movs	r2, #3
 8003b52:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003b9c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003ba2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003ba8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003bb8:	f023 030f 	bic.w	r3, r3, #15
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	b2db      	uxtb	r3, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	461a      	mov	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
}  
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c3c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003c42:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003c48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0

}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b088      	sub	sp, #32
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003c80:	2310      	movs	r3, #16
 8003c82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c84:	2340      	movs	r3, #64	; 0x40
 8003c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c90:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4619      	mov	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff70 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fa1d 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003caa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cac:	69fb      	ldr	r3, [r7, #28]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b088      	sub	sp, #32
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003cc8:	2311      	movs	r3, #17
 8003cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ccc:	2340      	movs	r3, #64	; 0x40
 8003cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff4c 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	2111      	movs	r1, #17
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f9f9 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b088      	sub	sp, #32
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003d10:	2312      	movs	r3, #18
 8003d12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d14:	2340      	movs	r3, #64	; 0x40
 8003d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d20:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff28 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	2112      	movs	r1, #18
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f9d5 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b088      	sub	sp, #32
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003d58:	2318      	movs	r3, #24
 8003d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d5c:	2340      	movs	r3, #64	; 0x40
 8003d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d68:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff04 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7a:	2118      	movs	r1, #24
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9b1 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d84:	69fb      	ldr	r3, [r7, #28]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b088      	sub	sp, #32
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003da0:	2319      	movs	r3, #25
 8003da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003db2:	f107 0308 	add.w	r3, r7, #8
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fee0 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	2119      	movs	r1, #25
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f98d 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003de8:	230c      	movs	r3, #12
 8003dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dec:	2340      	movs	r3, #64	; 0x40
 8003dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff febc 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003e06:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <SDMMC_CmdStopTransfer+0x44>)
 8003e08:	210c      	movs	r1, #12
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f96a 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003e10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e12:	69fb      	ldr	r3, [r7, #28]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	05f5e100 	.word	0x05f5e100

08003e20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003e34:	2307      	movs	r3, #7
 8003e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e38:	2340      	movs	r3, #64	; 0x40
 8003e3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e44:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e46:	f107 0310 	add.w	r3, r7, #16
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff fe96 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	2107      	movs	r1, #7
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f943 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003e5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3728      	adds	r7, #40	; 0x28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b088      	sub	sp, #32
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fe73 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f8f9 	bl	8004090 <SDMMC_GetCmdError>
 8003e9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b088      	sub	sp, #32
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003eb6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ec0:	2340      	movs	r3, #64	; 0x40
 8003ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ecc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ece:	f107 0308 	add.w	r3, r7, #8
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fe52 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 faca 	bl	8004474 <SDMMC_GetCmdResp7>
 8003ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003efe:	2337      	movs	r3, #55	; 0x37
 8003f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f02:	2340      	movs	r3, #64	; 0x40
 8003f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f0e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f10:	f107 0308 	add.w	r3, r7, #8
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe31 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f20:	2137      	movs	r1, #55	; 0x37
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8de 	bl	80040e4 <SDMMC_GetCmdResp1>
 8003f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003f4e:	2329      	movs	r3, #41	; 0x29
 8003f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f5e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f60:	f107 0308 	add.w	r3, r7, #8
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fe09 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f9df 	bl	8004330 <SDMMC_GetCmdResp3>
 8003f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f74:	69fb      	ldr	r3, [r7, #28]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b088      	sub	sp, #32
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f92:	23c0      	movs	r3, #192	; 0xc0
 8003f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fde9 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f97f 	bl	80042b0 <SDMMC_GetCmdResp2>
 8003fb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003fd0:	2309      	movs	r3, #9
 8003fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003fd4:	23c0      	movs	r3, #192	; 0xc0
 8003fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fdc8 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f95e 	bl	80042b0 <SDMMC_GetCmdResp2>
 8003ff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004012:	2303      	movs	r3, #3
 8004014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800401e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004022:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004024:	f107 0308 	add.w	r3, r7, #8
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fda7 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	2103      	movs	r1, #3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f9af 	bl	8004398 <SDMMC_GetCmdResp6>
 800403a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800403c:	69fb      	ldr	r3, [r7, #28]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b088      	sub	sp, #32
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004058:	230d      	movs	r3, #13
 800405a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800405c:	2340      	movs	r3, #64	; 0x40
 800405e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004068:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800406a:	f107 0308 	add.w	r3, r7, #8
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fd84 	bl	8003b7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	210d      	movs	r1, #13
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f831 	bl	80040e4 <SDMMC_GetCmdResp1>
 8004082:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004084:	69fb      	ldr	r3, [r7, #28]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004090:	b490      	push	{r4, r7}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004098:	4b10      	ldr	r3, [pc, #64]	; (80040dc <SDMMC_GetCmdError+0x4c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <SDMMC_GetCmdError+0x50>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0a5b      	lsrs	r3, r3, #9
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80040ac:	4623      	mov	r3, r4
 80040ae:	1e5c      	subs	r4, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040b8:	e00a      	b.n	80040d0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f2      	beq.n	80040ac <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc90      	pop	{r4, r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000014 	.word	0x20000014
 80040e0:	10624dd3 	.word	0x10624dd3

080040e4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	460b      	mov	r3, r1
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80040f2:	4b6c      	ldr	r3, [pc, #432]	; (80042a4 <SDMMC_GetCmdResp1+0x1c0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a6c      	ldr	r2, [pc, #432]	; (80042a8 <SDMMC_GetCmdResp1+0x1c4>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	0a5b      	lsrs	r3, r3, #9
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004104:	4623      	mov	r3, r4
 8004106:	1e5c      	subs	r4, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800410c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004110:	e0c3      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f2      	beq.n	8004104 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2204      	movs	r2, #4
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004130:	2304      	movs	r3, #4
 8004132:	e0b2      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004146:	2301      	movs	r3, #1
 8004148:	e0a7      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff fd41 	bl	8003bd2 <SDIO_GetCommandResponse>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	4293      	cmp	r3, r2
 8004158:	d001      	beq.n	800415e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800415a:	2301      	movs	r3, #1
 800415c:	e09d      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004164:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004166:	2100      	movs	r1, #0
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff fd3f 	bl	8003bec <SDIO_GetResponse>
 800416e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <SDMMC_GetCmdResp1+0x1c8>)
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800417a:	2300      	movs	r3, #0
 800417c:	e08d      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	da02      	bge.n	800418a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004188:	e087      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	e080      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	e079      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80041b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041b4:	e071      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80041c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c4:	e069      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80041d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041d4:	e061      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80041e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041e4:	e059      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80041f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f4:	e051      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004204:	e049      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004214:	e041      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8004220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004224:	e039      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004234:	e031      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004240:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004244:	e029      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004254:	e021      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004260:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004264:	e019      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004270:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004274:	e011      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004284:	e009      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004290:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004294:	e001      	b.n	800429a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd90      	pop	{r4, r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000014 	.word	0x20000014
 80042a8:	10624dd3 	.word	0x10624dd3
 80042ac:	fdffe008 	.word	0xfdffe008

080042b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80042b0:	b490      	push	{r4, r7}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <SDMMC_GetCmdResp2+0x78>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <SDMMC_GetCmdResp2+0x7c>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	0a5b      	lsrs	r3, r3, #9
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80042cc:	4623      	mov	r3, r4
 80042ce:	1e5c      	subs	r4, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042d8:	e020      	b.n	800431c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f2      	beq.n	80042cc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042f8:	2304      	movs	r3, #4
 80042fa:	e00f      	b.n	800431c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800430e:	2301      	movs	r3, #1
 8004310:	e004      	b.n	800431c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bc90      	pop	{r4, r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000014 	.word	0x20000014
 800432c:	10624dd3 	.word	0x10624dd3

08004330 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004330:	b490      	push	{r4, r7}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <SDMMC_GetCmdResp3+0x60>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <SDMMC_GetCmdResp3+0x64>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0a5b      	lsrs	r3, r3, #9
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800434c:	4623      	mov	r3, r4
 800434e:	1e5c      	subs	r4, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004358:	e015      	b.n	8004386 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f2      	beq.n	800434c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004378:	2304      	movs	r3, #4
 800437a:	e004      	b.n	8004386 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bc90      	pop	{r4, r7}
 800438e:	4770      	bx	lr
 8004390:	20000014 	.word	0x20000014
 8004394:	10624dd3 	.word	0x10624dd3

08004398 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	460b      	mov	r3, r1
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043a6:	4b31      	ldr	r3, [pc, #196]	; (800446c <SDMMC_GetCmdResp6+0xd4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a31      	ldr	r2, [pc, #196]	; (8004470 <SDMMC_GetCmdResp6+0xd8>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	0a5b      	lsrs	r3, r3, #9
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80043ba:	4623      	mov	r3, r4
 80043bc:	1e5c      	subs	r4, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80043c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043c6:	e04c      	b.n	8004462 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f2      	beq.n	80043ba <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2204      	movs	r2, #4
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043e6:	2304      	movs	r3, #4
 80043e8:	e03b      	b.n	8004462 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e030      	b.n	8004462 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fbe6 	bl	8003bd2 <SDIO_GetCommandResponse>
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	4293      	cmp	r3, r2
 800440e:	d001      	beq.n	8004414 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004410:	2301      	movs	r3, #1
 8004412:	e026      	b.n	8004462 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800441c:	2100      	movs	r1, #0
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff fbe4 	bl	8003bec <SDIO_GetResponse>
 8004424:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800443a:	2300      	movs	r3, #0
 800443c:	e011      	b.n	8004462 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800444c:	e009      	b.n	8004462 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800445c:	e001      	b.n	8004462 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800445e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd90      	pop	{r4, r7, pc}
 800446a:	bf00      	nop
 800446c:	20000014 	.word	0x20000014
 8004470:	10624dd3 	.word	0x10624dd3

08004474 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004474:	b490      	push	{r4, r7}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <SDMMC_GetCmdResp7+0x6c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <SDMMC_GetCmdResp7+0x70>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0a5b      	lsrs	r3, r3, #9
 8004488:	f241 3288 	movw	r2, #5000	; 0x1388
 800448c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004490:	4623      	mov	r3, r4
 8004492:	1e5c      	subs	r4, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800449c:	e01a      	b.n	80044d4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f2      	beq.n	8004490 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044bc:	2304      	movs	r3, #4
 80044be:	e009      	b.n	80044d4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80044d2:	2300      	movs	r3, #0
  
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc90      	pop	{r4, r7}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000014 	.word	0x20000014
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <FATFS_LinkDriverEx+0x94>)
 8004500:	7a5b      	ldrb	r3, [r3, #9]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d131      	bne.n	800456c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004508:	4b1c      	ldr	r3, [pc, #112]	; (800457c <FATFS_LinkDriverEx+0x94>)
 800450a:	7a5b      	ldrb	r3, [r3, #9]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <FATFS_LinkDriverEx+0x94>)
 8004512:	2100      	movs	r1, #0
 8004514:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <FATFS_LinkDriverEx+0x94>)
 8004518:	7a5b      	ldrb	r3, [r3, #9]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <FATFS_LinkDriverEx+0x94>)
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <FATFS_LinkDriverEx+0x94>)
 8004528:	7a5b      	ldrb	r3, [r3, #9]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <FATFS_LinkDriverEx+0x94>)
 8004530:	4413      	add	r3, r2
 8004532:	79fa      	ldrb	r2, [r7, #7]
 8004534:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004536:	4b11      	ldr	r3, [pc, #68]	; (800457c <FATFS_LinkDriverEx+0x94>)
 8004538:	7a5b      	ldrb	r3, [r3, #9]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	b2d1      	uxtb	r1, r2
 8004540:	4a0e      	ldr	r2, [pc, #56]	; (800457c <FATFS_LinkDriverEx+0x94>)
 8004542:	7251      	strb	r1, [r2, #9]
 8004544:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004546:	7dbb      	ldrb	r3, [r7, #22]
 8004548:	3330      	adds	r3, #48	; 0x30
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3301      	adds	r3, #1
 8004554:	223a      	movs	r2, #58	; 0x3a
 8004556:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	3302      	adds	r3, #2
 800455c:	222f      	movs	r2, #47	; 0x2f
 800455e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3303      	adds	r3, #3
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000098 	.word	0x20000098

08004580 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ffaa 	bl	80044e8 <FATFS_LinkDriverEx>
 8004594:	4603      	mov	r3, r0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f103 0208 	add.w	r2, r3, #8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f103 0208 	add.w	r2, r3, #8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f103 0208 	add.w	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
}
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004656:	d103      	bne.n	8004660 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e00c      	b.n	800467a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3308      	adds	r3, #8
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e002      	b.n	800466e <vListInsert+0x2e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	429a      	cmp	r2, r3
 8004678:	d2f6      	bcs.n	8004668 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6892      	ldr	r2, [r2, #8]
 80046c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6852      	ldr	r2, [r2, #4]
 80046d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d103      	bne.n	80046e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1e5a      	subs	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	e7fe      	b.n	800472e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004730:	f001 ff7c 	bl	800662c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	68f9      	ldr	r1, [r7, #12]
 800473e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	3b01      	subs	r3, #1
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	441a      	add	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	22ff      	movs	r2, #255	; 0xff
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	22ff      	movs	r2, #255	; 0xff
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d114      	bne.n	80047b0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01a      	beq.n	80047c4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3310      	adds	r3, #16
 8004792:	4618      	mov	r0, r3
 8004794:	f001 f872 	bl	800587c <xTaskRemoveFromEventList>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d012      	beq.n	80047c4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <xQueueGenericReset+0xcc>)
 80047a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	e009      	b.n	80047c4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3310      	adds	r3, #16
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fef2 	bl	800459e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3324      	adds	r3, #36	; 0x24
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff feed 	bl	800459e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047c4:	f001 ff60 	bl	8006688 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047c8:	2301      	movs	r3, #1
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <xQueueGenericCreate+0x28>
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	e7fe      	b.n	80047fe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	e004      	b.n	8004816 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3350      	adds	r3, #80	; 0x50
 800481a:	4618      	mov	r0, r3
 800481c:	f002 f820 	bl	8006860 <pvPortMalloc>
 8004820:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3350      	adds	r3, #80	; 0x50
 8004830:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004832:	79fa      	ldrb	r2, [r7, #7]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f805 	bl	800484e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004844:	69bb      	ldr	r3, [r7, #24]
	}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e002      	b.n	8004870 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800487c:	2101      	movs	r1, #1
 800487e:	69b8      	ldr	r0, [r7, #24]
 8004880:	f7ff ff42 	bl	8004708 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08e      	sub	sp, #56	; 0x38
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048a2:	2300      	movs	r3, #0
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <xQueueGenericSend+0x30>
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	e7fe      	b.n	80048c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <xQueueGenericSend+0x3e>
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <xQueueGenericSend+0x42>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <xQueueGenericSend+0x44>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <xQueueGenericSend+0x5c>
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	e7fe      	b.n	80048ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <xQueueGenericSend+0x6a>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <xQueueGenericSend+0x6e>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <xQueueGenericSend+0x70>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <xQueueGenericSend+0x88>
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	e7fe      	b.n	800491a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800491c:	f001 f946 	bl	8005bac <xTaskGetSchedulerState>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <xQueueGenericSend+0x98>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xQueueGenericSend+0x9c>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueGenericSend+0x9e>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <xQueueGenericSend+0xb6>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e7fe      	b.n	8004948 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800494a:	f001 fe6f 	bl	800662c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	429a      	cmp	r2, r3
 8004958:	d302      	bcc.n	8004960 <xQueueGenericSend+0xcc>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d129      	bne.n	80049b4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004966:	f000 f9ff 	bl	8004d68 <prvCopyDataToQueue>
 800496a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d010      	beq.n	8004996 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	3324      	adds	r3, #36	; 0x24
 8004978:	4618      	mov	r0, r3
 800497a:	f000 ff7f 	bl	800587c <xTaskRemoveFromEventList>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004984:	4b3f      	ldr	r3, [pc, #252]	; (8004a84 <xQueueGenericSend+0x1f0>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	e00a      	b.n	80049ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800499c:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <xQueueGenericSend+0x1f0>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049ac:	f001 fe6c 	bl	8006688 <vPortExitCritical>
				return pdPASS;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e063      	b.n	8004a7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ba:	f001 fe65 	bl	8006688 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	e05c      	b.n	8004a7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 ffb7 	bl	8005940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049d2:	2301      	movs	r3, #1
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d6:	f001 fe57 	bl	8006688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049da:	f000 fd35 	bl	8005448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049de:	f001 fe25 	bl	800662c <vPortEnterCritical>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ee:	d103      	bne.n	80049f8 <xQueueGenericSend+0x164>
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a04:	d103      	bne.n	8004a0e <xQueueGenericSend+0x17a>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0e:	f001 fe3b 	bl	8006688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a12:	1d3a      	adds	r2, r7, #4
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 ffa6 	bl	800596c <xTaskCheckForTimeOut>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d124      	bne.n	8004a70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a28:	f000 fa96 	bl	8004f58 <prvIsQueueFull>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d018      	beq.n	8004a64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	3310      	adds	r3, #16
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fed0 	bl	80057e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a42:	f000 fa21 	bl	8004e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a46:	f000 fd0d 	bl	8005464 <xTaskResumeAll>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f af7c 	bne.w	800494a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <xQueueGenericSend+0x1f0>)
 8004a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	e772      	b.n	800494a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a66:	f000 fa0f 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a6a:	f000 fcfb 	bl	8005464 <xTaskResumeAll>
 8004a6e:	e76c      	b.n	800494a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a72:	f000 fa09 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a76:	f000 fcf5 	bl	8005464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3738      	adds	r7, #56	; 0x38
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08e      	sub	sp, #56	; 0x38
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <xQueueGenericSendFromISR+0x2c>
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	e7fe      	b.n	8004ab2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x3a>
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <xQueueGenericSendFromISR+0x3e>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <xQueueGenericSendFromISR+0x40>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <xQueueGenericSendFromISR+0x58>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	e7fe      	b.n	8004ade <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d103      	bne.n	8004aee <xQueueGenericSendFromISR+0x66>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <xQueueGenericSendFromISR+0x6a>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueGenericSendFromISR+0x6c>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <xQueueGenericSendFromISR+0x84>
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e7fe      	b.n	8004b0a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b0c:	f001 fe6a 	bl	80067e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b10:	f3ef 8211 	mrs	r2, BASEPRI
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	61ba      	str	r2, [r7, #24]
 8004b26:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <xQueueGenericSendFromISR+0xb6>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d12c      	bne.n	8004b98 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b4e:	f000 f90b 	bl	8004d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b5a:	d112      	bne.n	8004b82 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d016      	beq.n	8004b92 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	3324      	adds	r3, #36	; 0x24
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fe87 	bl	800587c <xTaskRemoveFromEventList>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e007      	b.n	8004b92 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b86:	3301      	adds	r3, #1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	b25a      	sxtb	r2, r3
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b92:	2301      	movs	r3, #1
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b96:	e001      	b.n	8004b9c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3738      	adds	r7, #56	; 0x38
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <xQueueReceive+0x2e>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	623b      	str	r3, [r7, #32]
 8004bdc:	e7fe      	b.n	8004bdc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <xQueueReceive+0x3c>
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <xQueueReceive+0x40>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <xQueueReceive+0x42>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <xQueueReceive+0x5a>
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	e7fe      	b.n	8004c08 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c0a:	f000 ffcf 	bl	8005bac <xTaskGetSchedulerState>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <xQueueReceive+0x6a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <xQueueReceive+0x6e>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueReceive+0x70>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <xQueueReceive+0x88>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e7fe      	b.n	8004c36 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c38:	f001 fcf8 	bl	800662c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01f      	beq.n	8004c88 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4c:	f000 f8f6 	bl	8004e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00f      	beq.n	8004c80 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	3310      	adds	r3, #16
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fe09 	bl	800587c <xTaskRemoveFromEventList>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c70:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <xQueueReceive+0x1b4>)
 8004c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c80:	f001 fd02 	bl	8006688 <vPortExitCritical>
				return pdPASS;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e069      	b.n	8004d5c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c8e:	f001 fcfb 	bl	8006688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e062      	b.n	8004d5c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c9c:	f107 0310 	add.w	r3, r7, #16
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fe4d 	bl	8005940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004caa:	f001 fced 	bl	8006688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cae:	f000 fbcb 	bl	8005448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cb2:	f001 fcbb 	bl	800662c <vPortEnterCritical>
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc2:	d103      	bne.n	8004ccc <xQueueReceive+0x11c>
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd8:	d103      	bne.n	8004ce2 <xQueueReceive+0x132>
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce2:	f001 fcd1 	bl	8006688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce6:	1d3a      	adds	r2, r7, #4
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fe3c 	bl	800596c <xTaskCheckForTimeOut>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d123      	bne.n	8004d42 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfc:	f000 f916 	bl	8004f2c <prvIsQueueEmpty>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d017      	beq.n	8004d36 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	3324      	adds	r3, #36	; 0x24
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fd66 	bl	80057e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d16:	f000 f8b7 	bl	8004e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d1a:	f000 fba3 	bl	8005464 <xTaskResumeAll>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d189      	bne.n	8004c38 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004d24:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <xQueueReceive+0x1b4>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	e780      	b.n	8004c38 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d38:	f000 f8a6 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d3c:	f000 fb92 	bl	8005464 <xTaskResumeAll>
 8004d40:	e77a      	b.n	8004c38 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d44:	f000 f8a0 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d48:	f000 fb8c 	bl	8005464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4e:	f000 f8ed 	bl	8004f2c <prvIsQueueEmpty>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f43f af6f 	beq.w	8004c38 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3730      	adds	r7, #48	; 0x30
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d14d      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 ff28 	bl	8005be8 <xTaskPriorityDisinherit>
 8004d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	e043      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d119      	bne.n	8004ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6858      	ldr	r0, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	461a      	mov	r2, r3
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	f002 fd58 	bl	8007868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d32b      	bcc.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e026      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68d8      	ldr	r0, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f002 fd3e 	bl	8007868 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	425b      	negs	r3, r3
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d207      	bcs.n	8004e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	425b      	negs	r3, r3
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d105      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e32:	697b      	ldr	r3, [r7, #20]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d303      	bcc.n	8004e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f002 fcf4 	bl	8007868 <memcpy>
	}
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e90:	f001 fbcc 	bl	800662c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e9c:	e011      	b.n	8004ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3324      	adds	r3, #36	; 0x24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fce6 	bl	800587c <xTaskRemoveFromEventList>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eb6:	f000 fdb9 	bl	8005a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dce9      	bgt.n	8004e9e <prvUnlockQueue+0x16>
 8004eca:	e000      	b.n	8004ece <prvUnlockQueue+0x46>
					break;
 8004ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ed6:	f001 fbd7 	bl	8006688 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eda:	f001 fba7 	bl	800662c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ee6:	e011      	b.n	8004f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fcc1 	bl	800587c <xTaskRemoveFromEventList>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f00:	f000 fd94 	bl	8005a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dce9      	bgt.n	8004ee8 <prvUnlockQueue+0x60>
 8004f14:	e000      	b.n	8004f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f20:	f001 fbb2 	bl	8006688 <vPortExitCritical>
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f34:	f001 fb7a 	bl	800662c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 fb9d 	bl	8006688 <vPortExitCritical>

	return xReturn;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f60:	f001 fb64 	bl	800662c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d102      	bne.n	8004f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e001      	b.n	8004f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7a:	f001 fb85 	bl	8006688 <vPortExitCritical>

	return xReturn;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e014      	b.n	8004fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f98:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <vQueueAddToRegistry+0x4c>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fa4:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <vQueueAddToRegistry+0x4c>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <vQueueAddToRegistry+0x4c>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fba:	e005      	b.n	8004fc8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b07      	cmp	r3, #7
 8004fc6:	d9e7      	bls.n	8004f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20012e14 	.word	0x20012e14

08004fd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fe8:	f001 fb20 	bl	800662c <vPortEnterCritical>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff8:	d103      	bne.n	8005002 <vQueueWaitForMessageRestricted+0x2a>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005008:	b25b      	sxtb	r3, r3
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800500e:	d103      	bne.n	8005018 <vQueueWaitForMessageRestricted+0x40>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005018:	f001 fb36 	bl	8006688 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3324      	adds	r3, #36	; 0x24
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fbfb 	bl	8005828 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	f7ff ff28 	bl	8004e88 <prvUnlockQueue>
	}
 8005038:	bf00      	nop
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08c      	sub	sp, #48	; 0x30
 8005044:	af04      	add	r7, sp, #16
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4618      	mov	r0, r3
 8005056:	f001 fc03 	bl	8006860 <pvPortMalloc>
 800505a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005062:	2058      	movs	r0, #88	; 0x58
 8005064:	f001 fbfc 	bl	8006860 <pvPortMalloc>
 8005068:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
 8005076:	e005      	b.n	8005084 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005078:	6978      	ldr	r0, [r7, #20]
 800507a:	f001 fc7f 	bl	800697c <vPortFree>
 800507e:	e001      	b.n	8005084 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d013      	beq.n	80050b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	2300      	movs	r3, #0
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	9302      	str	r3, [sp, #8]
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f80e 	bl	80050c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a6:	69f8      	ldr	r0, [r7, #28]
 80050a8:	f000 f89a 	bl	80051e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050ac:	2301      	movs	r3, #1
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	e002      	b.n	80050b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050b8:	69bb      	ldr	r3, [r7, #24]
	}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b088      	sub	sp, #32
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	461a      	mov	r2, r3
 80050da:	21a5      	movs	r1, #165	; 0xa5
 80050dc:	f002 fbcf 	bl	800787e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050ea:	3b01      	subs	r3, #1
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f023 0307 	bic.w	r3, r3, #7
 80050f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <prvInitialiseNewTask+0x56>
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e7fe      	b.n	8005116 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01f      	beq.n	800515e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e012      	b.n	800514a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	7819      	ldrb	r1, [r3, #0]
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	3334      	adds	r3, #52	; 0x34
 8005134:	460a      	mov	r2, r1
 8005136:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b09      	cmp	r3, #9
 800514e:	d9e9      	bls.n	8005124 <prvInitialiseNewTask+0x62>
 8005150:	e000      	b.n	8005154 <prvInitialiseNewTask+0x92>
			{
				break;
 8005152:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800515c:	e003      	b.n	8005166 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	2b04      	cmp	r3, #4
 800516a:	d901      	bls.n	8005170 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800516c:	2304      	movs	r3, #4
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	2200      	movs	r2, #0
 8005180:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	3304      	adds	r3, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fa29 	bl	80045de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	3318      	adds	r3, #24
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fa24 	bl	80045de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	f1c3 0205 	rsb	r2, r3, #5
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2200      	movs	r2, #0
 80051b0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	69b8      	ldr	r0, [r7, #24]
 80051c0:	f001 f90a 	bl	80063d8 <pxPortInitialiseStack>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051d6:	bf00      	nop
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051e8:	f001 fa20 	bl	800662c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <prvAddNewTaskToReadyList+0xc0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a2b      	ldr	r2, [pc, #172]	; (80052a0 <prvAddNewTaskToReadyList+0xc0>)
 80051f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051f6:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <prvAddNewTaskToReadyList+0xc4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051fe:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <prvAddNewTaskToReadyList+0xc4>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005204:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <prvAddNewTaskToReadyList+0xc0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d110      	bne.n	800522e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800520c:	f000 fc32 	bl	8005a74 <prvInitialiseTaskLists>
 8005210:	e00d      	b.n	800522e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <prvAddNewTaskToReadyList+0xc8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <prvAddNewTaskToReadyList+0xc4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	429a      	cmp	r2, r3
 8005226:	d802      	bhi.n	800522e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <prvAddNewTaskToReadyList+0xc4>)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800522e:	4b1f      	ldr	r3, [pc, #124]	; (80052ac <prvAddNewTaskToReadyList+0xcc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3301      	adds	r3, #1
 8005234:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <prvAddNewTaskToReadyList+0xcc>)
 8005236:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005238:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <prvAddNewTaskToReadyList+0xcc>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <prvAddNewTaskToReadyList+0xd0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4313      	orrs	r3, r2
 800524e:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <prvAddNewTaskToReadyList+0xd0>)
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <prvAddNewTaskToReadyList+0xd4>)
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7ff f9c5 	bl	80045f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800526e:	f001 fa0b 	bl	8006688 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <prvAddNewTaskToReadyList+0xc8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00e      	beq.n	8005298 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <prvAddNewTaskToReadyList+0xc4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	429a      	cmp	r2, r3
 8005286:	d207      	bcs.n	8005298 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <prvAddNewTaskToReadyList+0xd8>)
 800528a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	2000017c 	.word	0x2000017c
 80052a4:	200000a4 	.word	0x200000a4
 80052a8:	20000188 	.word	0x20000188
 80052ac:	20000198 	.word	0x20000198
 80052b0:	20000184 	.word	0x20000184
 80052b4:	200000a8 	.word	0x200000a8
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d109      	bne.n	80052e4 <vTaskDelayUntil+0x28>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	e7fe      	b.n	80052e2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <vTaskDelayUntil+0x42>
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	e7fe      	b.n	80052fc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <vTaskDelayUntil+0xe8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <vTaskDelayUntil+0x5e>
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e7fe      	b.n	8005318 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800531a:	f000 f895 	bl	8005448 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800531e:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <vTaskDelayUntil+0xec>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	4413      	add	r3, r2
 800532c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a3a      	ldr	r2, [r7, #32]
 8005334:	429a      	cmp	r2, r3
 8005336:	d20b      	bcs.n	8005350 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	429a      	cmp	r2, r3
 8005340:	d211      	bcs.n	8005366 <vTaskDelayUntil+0xaa>
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	429a      	cmp	r2, r3
 8005348:	d90d      	bls.n	8005366 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800534a:	2301      	movs	r3, #1
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	e00a      	b.n	8005366 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	429a      	cmp	r2, r3
 8005358:	d303      	bcc.n	8005362 <vTaskDelayUntil+0xa6>
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	429a      	cmp	r2, r3
 8005360:	d901      	bls.n	8005366 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005362:	2301      	movs	r3, #1
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fcb8 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005380:	f000 f870 	bl	8005464 <xTaskResumeAll>
 8005384:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <vTaskDelayUntil+0xf0>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800539c:	bf00      	nop
 800539e:	3728      	adds	r7, #40	; 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	200001a4 	.word	0x200001a4
 80053a8:	20000180 	.word	0x20000180
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80053b6:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <vTaskStartScheduler+0x80>)
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	2300      	movs	r3, #0
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	2282      	movs	r2, #130	; 0x82
 80053c2:	491c      	ldr	r1, [pc, #112]	; (8005434 <vTaskStartScheduler+0x84>)
 80053c4:	481c      	ldr	r0, [pc, #112]	; (8005438 <vTaskStartScheduler+0x88>)
 80053c6:	f7ff fe3b 	bl	8005040 <xTaskCreate>
 80053ca:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d102      	bne.n	80053d8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80053d2:	f000 fcf3 	bl	8005dbc <xTimerCreateTimerTask>
 80053d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d115      	bne.n	800540a <vTaskStartScheduler+0x5a>
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053f0:	4b12      	ldr	r3, [pc, #72]	; (800543c <vTaskStartScheduler+0x8c>)
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <vTaskStartScheduler+0x90>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <vTaskStartScheduler+0x94>)
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005404:	f001 f874 	bl	80064f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005408:	e00d      	b.n	8005426 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005410:	d109      	bne.n	8005426 <vTaskStartScheduler+0x76>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	e7fe      	b.n	8005424 <vTaskStartScheduler+0x74>
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200001a0 	.word	0x200001a0
 8005434:	080080a0 	.word	0x080080a0
 8005438:	08005a45 	.word	0x08005a45
 800543c:	2000019c 	.word	0x2000019c
 8005440:	20000188 	.word	0x20000188
 8005444:	20000180 	.word	0x20000180

08005448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <vTaskSuspendAll+0x18>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	4a03      	ldr	r2, [pc, #12]	; (8005460 <vTaskSuspendAll+0x18>)
 8005454:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	200001a4 	.word	0x200001a4

08005464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <xTaskResumeAll+0x114>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <xTaskResumeAll+0x2a>
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	e7fe      	b.n	800548c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800548e:	f001 f8cd 	bl	800662c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005492:	4b39      	ldr	r3, [pc, #228]	; (8005578 <xTaskResumeAll+0x114>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3b01      	subs	r3, #1
 8005498:	4a37      	ldr	r2, [pc, #220]	; (8005578 <xTaskResumeAll+0x114>)
 800549a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <xTaskResumeAll+0x114>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d161      	bne.n	8005568 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054a4:	4b35      	ldr	r3, [pc, #212]	; (800557c <xTaskResumeAll+0x118>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d05d      	beq.n	8005568 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ac:	e02e      	b.n	800550c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ae:	4b34      	ldr	r3, [pc, #208]	; (8005580 <xTaskResumeAll+0x11c>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3318      	adds	r3, #24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff f8f9 	bl	80046b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff f8f4 	bl	80046b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	2201      	movs	r2, #1
 80054d0:	409a      	lsls	r2, r3
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <xTaskResumeAll+0x120>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <xTaskResumeAll+0x120>)
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <xTaskResumeAll+0x124>)
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7ff f880 	bl	80045f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <xTaskResumeAll+0x128>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <xTaskResumeAll+0x12c>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <xTaskResumeAll+0x11c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1cc      	bne.n	80054ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800551a:	f000 fb27 	bl	8005b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <xTaskResumeAll+0x130>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800552a:	f000 f847 	bl	80055bc <xTaskIncrementTick>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <xTaskResumeAll+0x12c>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3b01      	subs	r3, #1
 800553e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f1      	bne.n	800552a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <xTaskResumeAll+0x130>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <xTaskResumeAll+0x12c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <xTaskResumeAll+0x134>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005568:	f001 f88e 	bl	8006688 <vPortExitCritical>

	return xAlreadyYielded;
 800556c:	68bb      	ldr	r3, [r7, #8]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200001a4 	.word	0x200001a4
 800557c:	2000017c 	.word	0x2000017c
 8005580:	2000013c 	.word	0x2000013c
 8005584:	20000184 	.word	0x20000184
 8005588:	200000a8 	.word	0x200000a8
 800558c:	200000a4 	.word	0x200000a4
 8005590:	20000190 	.word	0x20000190
 8005594:	2000018c 	.word	0x2000018c
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <xTaskGetTickCount+0x1c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055a8:	687b      	ldr	r3, [r7, #4]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000180 	.word	0x20000180

080055bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c6:	4b4e      	ldr	r3, [pc, #312]	; (8005700 <xTaskIncrementTick+0x144>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 8087 	bne.w	80056de <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055d0:	4b4c      	ldr	r3, [pc, #304]	; (8005704 <xTaskIncrementTick+0x148>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055d8:	4a4a      	ldr	r2, [pc, #296]	; (8005704 <xTaskIncrementTick+0x148>)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d11f      	bne.n	8005624 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80055e4:	4b48      	ldr	r3, [pc, #288]	; (8005708 <xTaskIncrementTick+0x14c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <xTaskIncrementTick+0x46>
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	e7fe      	b.n	8005600 <xTaskIncrementTick+0x44>
 8005602:	4b41      	ldr	r3, [pc, #260]	; (8005708 <xTaskIncrementTick+0x14c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	4b40      	ldr	r3, [pc, #256]	; (800570c <xTaskIncrementTick+0x150>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a3e      	ldr	r2, [pc, #248]	; (8005708 <xTaskIncrementTick+0x14c>)
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	4a3e      	ldr	r2, [pc, #248]	; (800570c <xTaskIncrementTick+0x150>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <xTaskIncrementTick+0x154>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a3c      	ldr	r2, [pc, #240]	; (8005710 <xTaskIncrementTick+0x154>)
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	f000 faa4 	bl	8005b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005624:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <xTaskIncrementTick+0x158>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	429a      	cmp	r2, r3
 800562c:	d348      	bcc.n	80056c0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800562e:	4b36      	ldr	r3, [pc, #216]	; (8005708 <xTaskIncrementTick+0x14c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <xTaskIncrementTick+0x158>)
 800563a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800563e:	601a      	str	r2, [r3, #0]
					break;
 8005640:	e03e      	b.n	80056c0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005642:	4b31      	ldr	r3, [pc, #196]	; (8005708 <xTaskIncrementTick+0x14c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d203      	bcs.n	8005662 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800565a:	4a2e      	ldr	r2, [pc, #184]	; (8005714 <xTaskIncrementTick+0x158>)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005660:	e02e      	b.n	80056c0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3304      	adds	r3, #4
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff f823 	bl	80046b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	3318      	adds	r3, #24
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff f81a 	bl	80046b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	2201      	movs	r2, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	4b24      	ldr	r3, [pc, #144]	; (8005718 <xTaskIncrementTick+0x15c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	4a22      	ldr	r2, [pc, #136]	; (8005718 <xTaskIncrementTick+0x15c>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <xTaskIncrementTick+0x160>)
 800569e:	441a      	add	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7fe ffa6 	bl	80045f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <xTaskIncrementTick+0x164>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d3b9      	bcc.n	800562e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80056ba:	2301      	movs	r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056be:	e7b6      	b.n	800562e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056c0:	4b17      	ldr	r3, [pc, #92]	; (8005720 <xTaskIncrementTick+0x164>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	4915      	ldr	r1, [pc, #84]	; (800571c <xTaskIncrementTick+0x160>)
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d907      	bls.n	80056e8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e004      	b.n	80056e8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <xTaskIncrementTick+0x168>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	4a0f      	ldr	r2, [pc, #60]	; (8005724 <xTaskIncrementTick+0x168>)
 80056e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <xTaskIncrementTick+0x16c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056f4:	697b      	ldr	r3, [r7, #20]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200001a4 	.word	0x200001a4
 8005704:	20000180 	.word	0x20000180
 8005708:	20000134 	.word	0x20000134
 800570c:	20000138 	.word	0x20000138
 8005710:	20000194 	.word	0x20000194
 8005714:	2000019c 	.word	0x2000019c
 8005718:	20000184 	.word	0x20000184
 800571c:	200000a8 	.word	0x200000a8
 8005720:	200000a4 	.word	0x200000a4
 8005724:	2000018c 	.word	0x2000018c
 8005728:	20000190 	.word	0x20000190

0800572c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <vTaskSwitchContext+0xa0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800573a:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <vTaskSwitchContext+0xa4>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005740:	e03e      	b.n	80057c0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <vTaskSwitchContext+0xa4>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005748:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <vTaskSwitchContext+0xa8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	fab3 f383 	clz	r3, r3
 8005754:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	f1c3 031f 	rsb	r3, r3, #31
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	491e      	ldr	r1, [pc, #120]	; (80057d8 <vTaskSwitchContext+0xac>)
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	e7fe      	b.n	8005784 <vTaskSwitchContext+0x58>
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a11      	ldr	r2, [pc, #68]	; (80057d8 <vTaskSwitchContext+0xac>)
 8005792:	4413      	add	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	3308      	adds	r3, #8
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d104      	bne.n	80057b6 <vTaskSwitchContext+0x8a>
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4a07      	ldr	r2, [pc, #28]	; (80057dc <vTaskSwitchContext+0xb0>)
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	200001a4 	.word	0x200001a4
 80057d0:	20000190 	.word	0x20000190
 80057d4:	20000184 	.word	0x20000184
 80057d8:	200000a8 	.word	0x200000a8
 80057dc:	200000a4 	.word	0x200000a4

080057e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <vTaskPlaceOnEventList+0x24>
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e7fe      	b.n	8005802 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005804:	4b07      	ldr	r3, [pc, #28]	; (8005824 <vTaskPlaceOnEventList+0x44>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3318      	adds	r3, #24
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7fe ff17 	bl	8004640 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005812:	2101      	movs	r1, #1
 8005814:	6838      	ldr	r0, [r7, #0]
 8005816:	f000 fa6b 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	200000a4 	.word	0x200000a4

08005828 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <vTaskPlaceOnEventListRestricted+0x26>
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e7fe      	b.n	800584c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <vTaskPlaceOnEventListRestricted+0x50>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3318      	adds	r3, #24
 8005854:	4619      	mov	r1, r3
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7fe fece 	bl	80045f8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005866:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	68b8      	ldr	r0, [r7, #8]
 800586c:	f000 fa40 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
	}
 8005870:	bf00      	nop
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	200000a4 	.word	0x200000a4

0800587c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <xTaskRemoveFromEventList+0x2a>
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e7fe      	b.n	80058a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	3318      	adds	r3, #24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe ff01 	bl	80046b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <xTaskRemoveFromEventList+0xac>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d11c      	bne.n	80058f2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe fef8 	bl	80046b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	2201      	movs	r2, #1
 80058c8:	409a      	lsls	r2, r3
 80058ca:	4b18      	ldr	r3, [pc, #96]	; (800592c <xTaskRemoveFromEventList+0xb0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <xTaskRemoveFromEventList+0xb0>)
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4a13      	ldr	r2, [pc, #76]	; (8005930 <xTaskRemoveFromEventList+0xb4>)
 80058e2:	441a      	add	r2, r3
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7fe fe84 	bl	80045f8 <vListInsertEnd>
 80058f0:	e005      	b.n	80058fe <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	3318      	adds	r3, #24
 80058f6:	4619      	mov	r1, r3
 80058f8:	480e      	ldr	r0, [pc, #56]	; (8005934 <xTaskRemoveFromEventList+0xb8>)
 80058fa:	f7fe fe7d 	bl	80045f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <xTaskRemoveFromEventList+0xbc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	429a      	cmp	r2, r3
 800590a:	d905      	bls.n	8005918 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <xTaskRemoveFromEventList+0xc0>)
 8005912:	2201      	movs	r2, #1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e001      	b.n	800591c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800591c:	697b      	ldr	r3, [r7, #20]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200001a4 	.word	0x200001a4
 800592c:	20000184 	.word	0x20000184
 8005930:	200000a8 	.word	0x200000a8
 8005934:	2000013c 	.word	0x2000013c
 8005938:	200000a4 	.word	0x200000a4
 800593c:	20000190 	.word	0x20000190

08005940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <vTaskInternalSetTimeOutState+0x24>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <vTaskInternalSetTimeOutState+0x28>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	605a      	str	r2, [r3, #4]
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000194 	.word	0x20000194
 8005968:	20000180 	.word	0x20000180

0800596c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <xTaskCheckForTimeOut+0x24>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	e7fe      	b.n	800598e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <xTaskCheckForTimeOut+0x3e>
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e7fe      	b.n	80059a8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80059aa:	f000 fe3f 	bl	800662c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059ae:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <xTaskCheckForTimeOut+0xb8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c6:	d102      	bne.n	80059ce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e023      	b.n	8005a16 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <xTaskCheckForTimeOut+0xbc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d007      	beq.n	80059ea <xTaskCheckForTimeOut+0x7e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d302      	bcc.n	80059ea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e015      	b.n	8005a16 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d20b      	bcs.n	8005a0c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad2      	subs	r2, r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ff9d 	bl	8005940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e004      	b.n	8005a16 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a16:	f000 fe37 	bl	8006688 <vPortExitCritical>

	return xReturn;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000180 	.word	0x20000180
 8005a28:	20000194 	.word	0x20000194

08005a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <vTaskMissedYield+0x14>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	20000190 	.word	0x20000190

08005a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a4c:	f000 f852 	bl	8005af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <prvIdleTask+0x28>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d9f9      	bls.n	8005a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <prvIdleTask+0x2c>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a68:	e7f0      	b.n	8005a4c <prvIdleTask+0x8>
 8005a6a:	bf00      	nop
 8005a6c:	200000a8 	.word	0x200000a8
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e00c      	b.n	8005a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <prvInitialiseTaskLists+0x60>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fd85 	bl	800459e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3301      	adds	r3, #1
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d9ef      	bls.n	8005a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005aa0:	480d      	ldr	r0, [pc, #52]	; (8005ad8 <prvInitialiseTaskLists+0x64>)
 8005aa2:	f7fe fd7c 	bl	800459e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005aa6:	480d      	ldr	r0, [pc, #52]	; (8005adc <prvInitialiseTaskLists+0x68>)
 8005aa8:	f7fe fd79 	bl	800459e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005aac:	480c      	ldr	r0, [pc, #48]	; (8005ae0 <prvInitialiseTaskLists+0x6c>)
 8005aae:	f7fe fd76 	bl	800459e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ab2:	480c      	ldr	r0, [pc, #48]	; (8005ae4 <prvInitialiseTaskLists+0x70>)
 8005ab4:	f7fe fd73 	bl	800459e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ab8:	480b      	ldr	r0, [pc, #44]	; (8005ae8 <prvInitialiseTaskLists+0x74>)
 8005aba:	f7fe fd70 	bl	800459e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <prvInitialiseTaskLists+0x78>)
 8005ac0:	4a05      	ldr	r2, [pc, #20]	; (8005ad8 <prvInitialiseTaskLists+0x64>)
 8005ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <prvInitialiseTaskLists+0x7c>)
 8005ac6:	4a05      	ldr	r2, [pc, #20]	; (8005adc <prvInitialiseTaskLists+0x68>)
 8005ac8:	601a      	str	r2, [r3, #0]
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200000a8 	.word	0x200000a8
 8005ad8:	2000010c 	.word	0x2000010c
 8005adc:	20000120 	.word	0x20000120
 8005ae0:	2000013c 	.word	0x2000013c
 8005ae4:	20000150 	.word	0x20000150
 8005ae8:	20000168 	.word	0x20000168
 8005aec:	20000134 	.word	0x20000134
 8005af0:	20000138 	.word	0x20000138

08005af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005afa:	e019      	b.n	8005b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005afc:	f000 fd96 	bl	800662c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <prvCheckTasksWaitingTermination+0x4c>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe fdd0 	bl	80046b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <prvCheckTasksWaitingTermination+0x50>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <prvCheckTasksWaitingTermination+0x50>)
 8005b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <prvCheckTasksWaitingTermination+0x54>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <prvCheckTasksWaitingTermination+0x54>)
 8005b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b26:	f000 fdaf 	bl	8006688 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f80e 	bl	8005b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <prvCheckTasksWaitingTermination+0x54>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e1      	bne.n	8005afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000150 	.word	0x20000150
 8005b44:	2000017c 	.word	0x2000017c
 8005b48:	20000164 	.word	0x20000164

08005b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 ff0f 	bl	800697c <vPortFree>
			vPortFree( pxTCB );
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 ff0c 	bl	800697c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <prvResetNextTaskUnblockTime+0x38>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8005b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b84:	e008      	b.n	8005b98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <prvResetNextTaskUnblockTime+0x38>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8005b96:	6013      	str	r3, [r2, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	20000134 	.word	0x20000134
 8005ba8:	2000019c 	.word	0x2000019c

08005bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <xTaskGetSchedulerState+0x34>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	607b      	str	r3, [r7, #4]
 8005bbe:	e008      	b.n	8005bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc0:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <xTaskGetSchedulerState+0x38>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	e001      	b.n	8005bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bd2:	687b      	ldr	r3, [r7, #4]
	}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	20000188 	.word	0x20000188
 8005be4:	200001a4 	.word	0x200001a4

08005be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d06c      	beq.n	8005cd8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bfe:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <xTaskPriorityDisinherit+0xfc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d009      	beq.n	8005c1c <xTaskPriorityDisinherit+0x34>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e7fe      	b.n	8005c1a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <xTaskPriorityDisinherit+0x50>
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	e7fe      	b.n	8005c36 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d044      	beq.n	8005cd8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d140      	bne.n	8005cd8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fd29 	bl	80046b2 <uxListRemove>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d115      	bne.n	8005c92 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6a:	491f      	ldr	r1, [pc, #124]	; (8005ce8 <xTaskPriorityDisinherit+0x100>)
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xTaskPriorityDisinherit+0xaa>
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	2201      	movs	r2, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43da      	mvns	r2, r3
 8005c88:	4b18      	ldr	r3, [pc, #96]	; (8005cec <xTaskPriorityDisinherit+0x104>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	4a17      	ldr	r2, [pc, #92]	; (8005cec <xTaskPriorityDisinherit+0x104>)
 8005c90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	f1c3 0205 	rsb	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	2201      	movs	r2, #1
 8005cac:	409a      	lsls	r2, r3
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <xTaskPriorityDisinherit+0x104>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	; (8005cec <xTaskPriorityDisinherit+0x104>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <xTaskPriorityDisinherit+0x100>)
 8005cc6:	441a      	add	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe fc92 	bl	80045f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cd8:	697b      	ldr	r3, [r7, #20]
	}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200000a4 	.word	0x200000a4
 8005ce8:	200000a8 	.word	0x200000a8
 8005cec:	20000184 	.word	0x20000184

08005cf0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cfa:	4b29      	ldr	r3, [pc, #164]	; (8005da0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d00:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fcd3 	bl	80046b2 <uxListRemove>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10b      	bne.n	8005d2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	2201      	movs	r2, #1
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43da      	mvns	r2, r3
 8005d20:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4013      	ands	r3, r2
 8005d26:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d30:	d10a      	bne.n	8005d48 <prvAddCurrentTaskToDelayedList+0x58>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	481a      	ldr	r0, [pc, #104]	; (8005dac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d42:	f7fe fc59 	bl	80045f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d46:	e026      	b.n	8005d96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d50:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d209      	bcs.n	8005d74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f7fe fc67 	bl	8004640 <vListInsert>
}
 8005d72:	e010      	b.n	8005d96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7fe fc5d 	bl	8004640 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d202      	bcs.n	8005d96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d90:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6013      	str	r3, [r2, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000180 	.word	0x20000180
 8005da4:	200000a4 	.word	0x200000a4
 8005da8:	20000184 	.word	0x20000184
 8005dac:	20000168 	.word	0x20000168
 8005db0:	20000138 	.word	0x20000138
 8005db4:	20000134 	.word	0x20000134
 8005db8:	2000019c 	.word	0x2000019c

08005dbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dc6:	f000 fad1 	bl	800636c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <xTimerCreateTimerTask+0x54>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <xTimerCreateTimerTask+0x58>)
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005de0:	490d      	ldr	r1, [pc, #52]	; (8005e18 <xTimerCreateTimerTask+0x5c>)
 8005de2:	480e      	ldr	r0, [pc, #56]	; (8005e1c <xTimerCreateTimerTask+0x60>)
 8005de4:	f7ff f92c 	bl	8005040 <xTaskCreate>
 8005de8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <xTimerCreateTimerTask+0x48>
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	603b      	str	r3, [r7, #0]
 8005e02:	e7fe      	b.n	8005e02 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8005e04:	687b      	ldr	r3, [r7, #4]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	200001d8 	.word	0x200001d8
 8005e14:	200001dc 	.word	0x200001dc
 8005e18:	080080a8 	.word	0x080080a8
 8005e1c:	08005f51 	.word	0x08005f51

08005e20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <xTimerGenericCommand+0x2c>
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	e7fe      	b.n	8005e4a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <xTimerGenericCommand+0x94>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02a      	beq.n	8005eaa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	dc18      	bgt.n	8005e98 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e66:	f7ff fea1 	bl	8005bac <xTaskGetSchedulerState>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d109      	bne.n	8005e84 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e70:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <xTimerGenericCommand+0x94>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	f107 0114 	add.w	r1, r7, #20
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7c:	f7fe fd0a 	bl	8004894 <xQueueGenericSend>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24
 8005e82:	e012      	b.n	8005eaa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <xTimerGenericCommand+0x94>)
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	f107 0114 	add.w	r1, r7, #20
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f7fe fd00 	bl	8004894 <xQueueGenericSend>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24
 8005e96:	e008      	b.n	8005eaa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <xTimerGenericCommand+0x94>)
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	f107 0114 	add.w	r1, r7, #20
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	f7fe fdf0 	bl	8004a88 <xQueueGenericSendFromISR>
 8005ea8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3728      	adds	r7, #40	; 0x28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	200001d8 	.word	0x200001d8

08005eb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec2:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <prvProcessExpiredTimer+0x94>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fbee 	bl	80046b2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d021      	beq.n	8005f28 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	18d1      	adds	r1, r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	6978      	ldr	r0, [r7, #20]
 8005ef2:	f000 f8d1 	bl	8006098 <prvInsertTimerInActiveList>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01e      	beq.n	8005f3a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005efc:	2300      	movs	r3, #0
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	2100      	movs	r1, #0
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	f7ff ff8a 	bl	8005e20 <xTimerGenericCommand>
 8005f0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d112      	bne.n	8005f3a <prvProcessExpiredTimer+0x82>
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e7fe      	b.n	8005f26 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	6978      	ldr	r0, [r7, #20]
 8005f40:	4798      	blx	r3
}
 8005f42:	bf00      	nop
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200001d0 	.word	0x200001d0

08005f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f58:	f107 0308 	add.w	r3, r7, #8
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 f857 	bl	8006010 <prvGetNextExpireTime>
 8005f62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4619      	mov	r1, r3
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f803 	bl	8005f74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f6e:	f000 f8d5 	bl	800611c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f72:	e7f1      	b.n	8005f58 <prvTimerTask+0x8>

08005f74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f7e:	f7ff fa63 	bl	8005448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f866 	bl	8006058 <prvSampleTimeNow>
 8005f8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d130      	bne.n	8005ff6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <prvProcessTimerOrBlockTask+0x3c>
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d806      	bhi.n	8005fb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fa2:	f7ff fa5f 	bl	8005464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff85 	bl	8005eb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fae:	e024      	b.n	8005ffa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d008      	beq.n	8005fc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <prvProcessTimerOrBlockTask+0x90>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <prvProcessTimerOrBlockTask+0x50>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <prvProcessTimerOrBlockTask+0x52>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <prvProcessTimerOrBlockTask+0x94>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f7fe ffff 	bl	8004fd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fda:	f7ff fa43 	bl	8005464 <xTaskResumeAll>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fe4:	4b09      	ldr	r3, [pc, #36]	; (800600c <prvProcessTimerOrBlockTask+0x98>)
 8005fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	f3bf 8f6f 	isb	sy
}
 8005ff4:	e001      	b.n	8005ffa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ff6:	f7ff fa35 	bl	8005464 <xTaskResumeAll>
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	200001d4 	.word	0x200001d4
 8006008:	200001d8 	.word	0x200001d8
 800600c:	e000ed04 	.word	0xe000ed04

08006010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006018:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <prvGetNextExpireTime+0x44>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <prvGetNextExpireTime+0x16>
 8006022:	2201      	movs	r2, #1
 8006024:	e000      	b.n	8006028 <prvGetNextExpireTime+0x18>
 8006026:	2200      	movs	r2, #0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <prvGetNextExpireTime+0x44>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e001      	b.n	8006044 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	200001d0 	.word	0x200001d0

08006058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006060:	f7ff fa9c 	bl	800559c <xTaskGetTickCount>
 8006064:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <prvSampleTimeNow+0x3c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	429a      	cmp	r2, r3
 800606e:	d205      	bcs.n	800607c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006070:	f000 f918 	bl	80062a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e002      	b.n	8006082 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006082:	4a04      	ldr	r2, [pc, #16]	; (8006094 <prvSampleTimeNow+0x3c>)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006088:	68fb      	ldr	r3, [r7, #12]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200001e0 	.word	0x200001e0

08006098 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d812      	bhi.n	80060e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d302      	bcc.n	80060d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	e01b      	b.n	800610a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <prvInsertTimerInActiveList+0x7c>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3304      	adds	r3, #4
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f7fe faaf 	bl	8004640 <vListInsert>
 80060e2:	e012      	b.n	800610a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d206      	bcs.n	80060fa <prvInsertTimerInActiveList+0x62>
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e007      	b.n	800610a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <prvInsertTimerInActiveList+0x80>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7fe fa9b 	bl	8004640 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800610a:	697b      	ldr	r3, [r7, #20]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	200001d4 	.word	0x200001d4
 8006118:	200001d0 	.word	0x200001d0

0800611c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	; 0x30
 8006120:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006122:	e0ac      	b.n	800627e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f2c0 80a8 	blt.w	800627c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	3304      	adds	r3, #4
 800613c:	4618      	mov	r0, r3
 800613e:	f7fe fab8 	bl	80046b2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006142:	1d3b      	adds	r3, r7, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ff87 	bl	8006058 <prvSampleTimeNow>
 800614a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b09      	cmp	r3, #9
 8006150:	f200 8095 	bhi.w	800627e <prvProcessReceivedCommands+0x162>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <prvProcessReceivedCommands+0x40>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006185 	.word	0x08006185
 8006160:	08006185 	.word	0x08006185
 8006164:	08006185 	.word	0x08006185
 8006168:	080061f7 	.word	0x080061f7
 800616c:	0800620b 	.word	0x0800620b
 8006170:	08006253 	.word	0x08006253
 8006174:	08006185 	.word	0x08006185
 8006178:	08006185 	.word	0x08006185
 800617c:	080061f7 	.word	0x080061f7
 8006180:	0800620b 	.word	0x0800620b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	18d1      	adds	r1, r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061a4:	f7ff ff78 	bl	8006098 <prvInsertTimerInActiveList>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d067      	beq.n	800627e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d05c      	beq.n	800627e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	441a      	add	r2, r3
 80061cc:	2300      	movs	r3, #0
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2300      	movs	r3, #0
 80061d2:	2100      	movs	r1, #0
 80061d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061d6:	f7ff fe23 	bl	8005e20 <xTimerGenericCommand>
 80061da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d14d      	bne.n	800627e <prvProcessReceivedCommands+0x162>
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	e7fe      	b.n	80061f4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	b2da      	uxtb	r2, r3
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006208:	e039      	b.n	800627e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	b2da      	uxtb	r2, r3
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <prvProcessReceivedCommands+0x122>
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e7fe      	b.n	800623c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	18d1      	adds	r1, r2, r3
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800624c:	f7ff ff24 	bl	8006098 <prvInsertTimerInActiveList>
					break;
 8006250:	e015      	b.n	800627e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8006260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006262:	f000 fb8b 	bl	800697c <vPortFree>
 8006266:	e00a      	b.n	800627e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800627a:	e000      	b.n	800627e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800627c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <prvProcessReceivedCommands+0x184>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f107 0108 	add.w	r1, r7, #8
 8006286:	2200      	movs	r2, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fc91 	bl	8004bb0 <xQueueReceive>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f af47 	bne.w	8006124 <prvProcessReceivedCommands+0x8>
	}
}
 8006296:	bf00      	nop
 8006298:	3728      	adds	r7, #40	; 0x28
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	200001d8 	.word	0x200001d8

080062a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062aa:	e047      	b.n	800633c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062ac:	4b2d      	ldr	r3, [pc, #180]	; (8006364 <prvSwitchTimerLists+0xc0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b6:	4b2b      	ldr	r3, [pc, #172]	; (8006364 <prvSwitchTimerLists+0xc0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fe f9f4 	bl	80046b2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d02d      	beq.n	800633c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4413      	add	r3, r2
 80062e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d90e      	bls.n	8006310 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062fe:	4b19      	ldr	r3, [pc, #100]	; (8006364 <prvSwitchTimerLists+0xc0>)
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f7fe f999 	bl	8004640 <vListInsert>
 800630e:	e015      	b.n	800633c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006310:	2300      	movs	r3, #0
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	2100      	movs	r1, #0
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fd80 	bl	8005e20 <xTimerGenericCommand>
 8006320:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <prvSwitchTimerLists+0x98>
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	e7fe      	b.n	800633a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <prvSwitchTimerLists+0xc0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1b2      	bne.n	80062ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <prvSwitchTimerLists+0xc0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <prvSwitchTimerLists+0xc4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a04      	ldr	r2, [pc, #16]	; (8006364 <prvSwitchTimerLists+0xc0>)
 8006352:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006354:	4a04      	ldr	r2, [pc, #16]	; (8006368 <prvSwitchTimerLists+0xc4>)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6013      	str	r3, [r2, #0]
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200001d0 	.word	0x200001d0
 8006368:	200001d4 	.word	0x200001d4

0800636c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006370:	f000 f95c 	bl	800662c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <prvCheckForValidListAndQueue+0x54>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11d      	bne.n	80063b8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800637c:	4811      	ldr	r0, [pc, #68]	; (80063c4 <prvCheckForValidListAndQueue+0x58>)
 800637e:	f7fe f90e 	bl	800459e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006382:	4811      	ldr	r0, [pc, #68]	; (80063c8 <prvCheckForValidListAndQueue+0x5c>)
 8006384:	f7fe f90b 	bl	800459e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006388:	4b10      	ldr	r3, [pc, #64]	; (80063cc <prvCheckForValidListAndQueue+0x60>)
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <prvCheckForValidListAndQueue+0x58>)
 800638c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <prvCheckForValidListAndQueue+0x64>)
 8006390:	4a0d      	ldr	r2, [pc, #52]	; (80063c8 <prvCheckForValidListAndQueue+0x5c>)
 8006392:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006394:	2200      	movs	r2, #0
 8006396:	210c      	movs	r1, #12
 8006398:	200a      	movs	r0, #10
 800639a:	f7fe fa1d 	bl	80047d8 <xQueueGenericCreate>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <prvCheckForValidListAndQueue+0x54>)
 80063a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <prvCheckForValidListAndQueue+0x54>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <prvCheckForValidListAndQueue+0x54>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4908      	ldr	r1, [pc, #32]	; (80063d4 <prvCheckForValidListAndQueue+0x68>)
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe fde8 	bl	8004f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063b8:	f000 f966 	bl	8006688 <vPortExitCritical>
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	200001d8 	.word	0x200001d8
 80063c4:	200001a8 	.word	0x200001a8
 80063c8:	200001bc 	.word	0x200001bc
 80063cc:	200001d0 	.word	0x200001d0
 80063d0:	200001d4 	.word	0x200001d4
 80063d4:	080080b0 	.word	0x080080b0

080063d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3b04      	subs	r3, #4
 80063e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b04      	subs	r3, #4
 80063f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f023 0201 	bic.w	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3b04      	subs	r3, #4
 8006406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006408:	4a0c      	ldr	r2, [pc, #48]	; (800643c <pxPortInitialiseStack+0x64>)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b14      	subs	r3, #20
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b04      	subs	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f06f 0202 	mvn.w	r2, #2
 8006426:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b20      	subs	r3, #32
 800642c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	08006441 	.word	0x08006441

08006440 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800644a:	4b11      	ldr	r3, [pc, #68]	; (8006490 <prvTaskExitError+0x50>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006452:	d009      	beq.n	8006468 <prvTaskExitError+0x28>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e7fe      	b.n	8006466 <prvTaskExitError+0x26>
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800647a:	bf00      	nop
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0fc      	beq.n	800647c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006482:	bf00      	nop
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20000008 	.word	0x20000008
	...

080064a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <pxCurrentTCBConst2>)
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	f380 8809 	msr	PSP, r0
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	4770      	bx	lr
 80064bc:	f3af 8000 	nop.w

080064c0 <pxCurrentTCBConst2>:
 80064c0:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop

080064c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064c8:	4808      	ldr	r0, [pc, #32]	; (80064ec <prvPortStartFirstTask+0x24>)
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f380 8808 	msr	MSP, r0
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8814 	msr	CONTROL, r0
 80064da:	b662      	cpsie	i
 80064dc:	b661      	cpsie	f
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	df00      	svc	0
 80064e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064ea:	bf00      	nop
 80064ec:	e000ed08 	.word	0xe000ed08

080064f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064f6:	4b44      	ldr	r3, [pc, #272]	; (8006608 <xPortStartScheduler+0x118>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a44      	ldr	r2, [pc, #272]	; (800660c <xPortStartScheduler+0x11c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d109      	bne.n	8006514 <xPortStartScheduler+0x24>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	e7fe      	b.n	8006512 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006514:	4b3c      	ldr	r3, [pc, #240]	; (8006608 <xPortStartScheduler+0x118>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a3d      	ldr	r2, [pc, #244]	; (8006610 <xPortStartScheduler+0x120>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d109      	bne.n	8006532 <xPortStartScheduler+0x42>
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e7fe      	b.n	8006530 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006532:	4b38      	ldr	r3, [pc, #224]	; (8006614 <xPortStartScheduler+0x124>)
 8006534:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	22ff      	movs	r2, #255	; 0xff
 8006542:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006554:	b2da      	uxtb	r2, r3
 8006556:	4b30      	ldr	r3, [pc, #192]	; (8006618 <xPortStartScheduler+0x128>)
 8006558:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800655a:	4b30      	ldr	r3, [pc, #192]	; (800661c <xPortStartScheduler+0x12c>)
 800655c:	2207      	movs	r2, #7
 800655e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006560:	e009      	b.n	8006576 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006562:	4b2e      	ldr	r3, [pc, #184]	; (800661c <xPortStartScheduler+0x12c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3b01      	subs	r3, #1
 8006568:	4a2c      	ldr	r2, [pc, #176]	; (800661c <xPortStartScheduler+0x12c>)
 800656a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	2b80      	cmp	r3, #128	; 0x80
 8006580:	d0ef      	beq.n	8006562 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006582:	4b26      	ldr	r3, [pc, #152]	; (800661c <xPortStartScheduler+0x12c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f1c3 0307 	rsb	r3, r3, #7
 800658a:	2b04      	cmp	r3, #4
 800658c:	d009      	beq.n	80065a2 <xPortStartScheduler+0xb2>
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	e7fe      	b.n	80065a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <xPortStartScheduler+0x12c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	4a1c      	ldr	r2, [pc, #112]	; (800661c <xPortStartScheduler+0x12c>)
 80065aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065ac:	4b1b      	ldr	r3, [pc, #108]	; (800661c <xPortStartScheduler+0x12c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b4:	4a19      	ldr	r2, [pc, #100]	; (800661c <xPortStartScheduler+0x12c>)
 80065b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065c0:	4b17      	ldr	r3, [pc, #92]	; (8006620 <xPortStartScheduler+0x130>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a16      	ldr	r2, [pc, #88]	; (8006620 <xPortStartScheduler+0x130>)
 80065c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <xPortStartScheduler+0x130>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a13      	ldr	r2, [pc, #76]	; (8006620 <xPortStartScheduler+0x130>)
 80065d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065d8:	f000 f8d6 	bl	8006788 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <xPortStartScheduler+0x134>)
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065e2:	f000 f8f5 	bl	80067d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <xPortStartScheduler+0x138>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a0f      	ldr	r2, [pc, #60]	; (8006628 <xPortStartScheduler+0x138>)
 80065ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065f2:	f7ff ff69 	bl	80064c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065f6:	f7ff f899 	bl	800572c <vTaskSwitchContext>
	prvTaskExitError();
 80065fa:	f7ff ff21 	bl	8006440 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000ed00 	.word	0xe000ed00
 800660c:	410fc271 	.word	0x410fc271
 8006610:	410fc270 	.word	0x410fc270
 8006614:	e000e400 	.word	0xe000e400
 8006618:	200001e4 	.word	0x200001e4
 800661c:	200001e8 	.word	0x200001e8
 8006620:	e000ed20 	.word	0xe000ed20
 8006624:	20000008 	.word	0x20000008
 8006628:	e000ef34 	.word	0xe000ef34

0800662c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <vPortEnterCritical+0x54>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	4a0d      	ldr	r2, [pc, #52]	; (8006680 <vPortEnterCritical+0x54>)
 800664c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <vPortEnterCritical+0x54>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d10e      	bne.n	8006674 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <vPortEnterCritical+0x58>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <vPortEnterCritical+0x48>
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	e7fe      	b.n	8006672 <vPortEnterCritical+0x46>
	}
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000008 	.word	0x20000008
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800668e:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <vPortExitCritical+0x4c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <vPortExitCritical+0x22>
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	607b      	str	r3, [r7, #4]
 80066a8:	e7fe      	b.n	80066a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <vPortExitCritical+0x4c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <vPortExitCritical+0x4c>)
 80066b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <vPortExitCritical+0x4c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <vPortExitCritical+0x3e>
 80066bc:	2300      	movs	r3, #0
 80066be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000008 	.word	0x20000008
	...

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f01e 0f10 	tst.w	lr, #16
 80066f0:	bf08      	it	eq
 80066f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006704:	f380 8811 	msr	BASEPRI, r0
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f7ff f80c 	bl	800572c <vTaskSwitchContext>
 8006714:	f04f 0000 	mov.w	r0, #0
 8006718:	f380 8811 	msr	BASEPRI, r0
 800671c:	bc09      	pop	{r0, r3}
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	6808      	ldr	r0, [r1, #0]
 8006722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006726:	f01e 0f10 	tst.w	lr, #16
 800672a:	bf08      	it	eq
 800672c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006730:	f380 8809 	msr	PSP, r0
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst>:
 8006740:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006760:	f7fe ff2c 	bl	80055bc <xTaskIncrementTick>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <SysTick_Handler+0x3c>)
 800676c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <vPortSetupTimerInterrupt+0x34>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <vPortSetupTimerInterrupt+0x38>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <vPortSetupTimerInterrupt+0x3c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <vPortSetupTimerInterrupt+0x40>)
 800679e:	fba2 2303 	umull	r2, r3, r2, r3
 80067a2:	099b      	lsrs	r3, r3, #6
 80067a4:	4a09      	ldr	r2, [pc, #36]	; (80067cc <vPortSetupTimerInterrupt+0x44>)
 80067a6:	3b01      	subs	r3, #1
 80067a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067aa:	4b04      	ldr	r3, [pc, #16]	; (80067bc <vPortSetupTimerInterrupt+0x34>)
 80067ac:	2207      	movs	r2, #7
 80067ae:	601a      	str	r2, [r3, #0]
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	e000e010 	.word	0xe000e010
 80067c0:	e000e018 	.word	0xe000e018
 80067c4:	20000014 	.word	0x20000014
 80067c8:	10624dd3 	.word	0x10624dd3
 80067cc:	e000e014 	.word	0xe000e014

080067d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067e0 <vPortEnableVFP+0x10>
 80067d4:	6801      	ldr	r1, [r0, #0]
 80067d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067da:	6001      	str	r1, [r0, #0]
 80067dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067de:	bf00      	nop
 80067e0:	e000ed88 	.word	0xe000ed88

080067e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ea:	f3ef 8305 	mrs	r3, IPSR
 80067ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d913      	bls.n	800681e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067f6:	4a16      	ldr	r2, [pc, #88]	; (8006850 <vPortValidateInterruptPriority+0x6c>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <vPortValidateInterruptPriority+0x70>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	7afa      	ldrb	r2, [r7, #11]
 8006806:	429a      	cmp	r2, r3
 8006808:	d209      	bcs.n	800681e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	607b      	str	r3, [r7, #4]
 800681c:	e7fe      	b.n	800681c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <vPortValidateInterruptPriority+0x74>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <vPortValidateInterruptPriority+0x78>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d909      	bls.n	8006842 <vPortValidateInterruptPriority+0x5e>
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	e7fe      	b.n	8006840 <vPortValidateInterruptPriority+0x5c>
	}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e3f0 	.word	0xe000e3f0
 8006854:	200001e4 	.word	0x200001e4
 8006858:	e000ed0c 	.word	0xe000ed0c
 800685c:	200001e8 	.word	0x200001e8

08006860 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800686c:	f7fe fdec 	bl	8005448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8006870:	4b3d      	ldr	r3, [pc, #244]	; (8006968 <pvPortMalloc+0x108>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8006878:	f000 f8ba 	bl	80069f0 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800687c:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <pvPortMalloc+0x108>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00e      	beq.n	80068a6 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8006888:	2308      	movs	r3, #8
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f023 0307 	bic.w	r3, r3, #7
 80068a2:	3308      	adds	r3, #8
 80068a4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d056      	beq.n	800695a <pvPortMalloc+0xfa>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a2f      	ldr	r2, [pc, #188]	; (800696c <pvPortMalloc+0x10c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d852      	bhi.n	800695a <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80068b4:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <pvPortMalloc+0x110>)
 80068b6:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80068b8:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <pvPortMalloc+0x110>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068be:	e004      	b.n	80068ca <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <pvPortMalloc+0x7c>
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4a25      	ldr	r2, [pc, #148]	; (8006974 <pvPortMalloc+0x114>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d03a      	beq.n	800695a <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2208      	movs	r2, #8
 80068ea:	4413      	add	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2208      	movs	r2, #8
 8006900:	0052      	lsls	r2, r2, #1
 8006902:	4293      	cmp	r3, r2
 8006904:	d922      	bls.n	800694c <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <pvPortMalloc+0x110>)
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	e002      	b.n	8006932 <pvPortMalloc+0xd2>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	429a      	cmp	r2, r3
 800693c:	d8f6      	bhi.n	800692c <pvPortMalloc+0xcc>
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <pvPortMalloc+0x118>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <pvPortMalloc+0x118>)
 8006958:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800695a:	f7fe fd83 	bl	8005464 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800695e:	697b      	ldr	r3, [r7, #20]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20012dfc 	.word	0x20012dfc
 800696c:	00012bf7 	.word	0x00012bf7
 8006970:	20012dec 	.word	0x20012dec
 8006974:	20012df4 	.word	0x20012df4
 8006978:	2000000c 	.word	0x2000000c

0800697c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d027      	beq.n	80069de <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800698e:	2308      	movs	r3, #8
 8006990:	425b      	negs	r3, r3
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4413      	add	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800699c:	f7fe fd54 	bl	8005448 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <vPortFree+0x6c>)
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e002      	b.n	80069b2 <vPortFree+0x36>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d8f6      	bhi.n	80069ac <vPortFree+0x30>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b06      	ldr	r3, [pc, #24]	; (80069ec <vPortFree+0x70>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4413      	add	r3, r2
 80069d6:	4a05      	ldr	r2, [pc, #20]	; (80069ec <vPortFree+0x70>)
 80069d8:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80069da:	f7fe fd43 	bl	8005464 <xTaskResumeAll>
	}
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20012dec 	.word	0x20012dec
 80069ec:	2000000c 	.word	0x2000000c

080069f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80069f6:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <prvHeapInit+0x44>)
 80069f8:	f023 0307 	bic.w	r3, r3, #7
 80069fc:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069fe:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <prvHeapInit+0x48>)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <prvHeapInit+0x48>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <prvHeapInit+0x4c>)
 8006a0c:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <prvHeapInit+0x50>)
 8006a0e:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvHeapInit+0x4c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <prvHeapInit+0x50>)
 8006a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	4a06      	ldr	r2, [pc, #24]	; (8006a3c <prvHeapInit+0x4c>)
 8006a24:	601a      	str	r2, [r3, #0]
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	200001f4 	.word	0x200001f4
 8006a38:	20012dec 	.word	0x20012dec
 8006a3c:	20012df4 	.word	0x20012df4
 8006a40:	00012bf8 	.word	0x00012bf8

08006a44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006a4e:	f000 f86b 	bl	8006b28 <BSP_SD_IsDetected>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d001      	beq.n	8006a5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e005      	b.n	8006a68 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006a5c:	4804      	ldr	r0, [pc, #16]	; (8006a70 <BSP_SD_Init+0x2c>)
 8006a5e:	f7fb fbb5 	bl	80021cc <HAL_SD_Init>
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006a66:	79fb      	ldrb	r3, [r7, #7]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	200133f4 	.word	0x200133f4

08006a74 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	4806      	ldr	r0, [pc, #24]	; (8006aac <BSP_SD_ReadBlocks+0x38>)
 8006a92:	f7fb fc23 	bl	80022dc <HAL_SD_ReadBlocks>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200133f4 	.word	0x200133f4

08006ab0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	4806      	ldr	r0, [pc, #24]	; (8006ae8 <BSP_SD_WriteBlocks+0x38>)
 8006ace:	f7fb fd9c 	bl	800260a <HAL_SD_WriteBlocks>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200133f4 	.word	0x200133f4

08006aec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006af0:	4805      	ldr	r0, [pc, #20]	; (8006b08 <BSP_SD_GetCardState+0x1c>)
 8006af2:	f7fc f947 	bl	8002d84 <HAL_SD_GetCardState>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200133f4 	.word	0x200133f4

08006b0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4803      	ldr	r0, [pc, #12]	; (8006b24 <BSP_SD_GetCardInfo+0x18>)
 8006b18:	f7fc f908 	bl	8002d2c <HAL_SD_GetCardInfo>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	200133f4 	.word	0x200133f4

08006b28 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8006b32:	f000 f81d 	bl	8006b70 <BSP_PlatformIsDetected>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	b2db      	uxtb	r3, r3
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006b50:	4904      	ldr	r1, [pc, #16]	; (8006b64 <MX_FATFS_Init+0x18>)
 8006b52:	4805      	ldr	r0, [pc, #20]	; (8006b68 <MX_FATFS_Init+0x1c>)
 8006b54:	f7fd fd14 	bl	8004580 <FATFS_LinkDriver>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <MX_FATFS_Init+0x20>)
 8006b5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20012e58 	.word	0x20012e58
 8006b68:	08008124 	.word	0x08008124
 8006b6c:	20012e54 	.word	0x20012e54

08006b70 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006b76:	2301      	movs	r3, #1
 8006b78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006b7a:	2102      	movs	r1, #2
 8006b7c:	4806      	ldr	r0, [pc, #24]	; (8006b98 <BSP_PlatformIsDetected+0x28>)
 8006b7e:	f7fa fea9 	bl	80018d4 <HAL_GPIO_ReadPin>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
}  
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40020000 	.word	0x40020000

08006b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b094      	sub	sp, #80	; 0x50
 8006ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ba2:	f107 0320 	add.w	r3, r7, #32
 8006ba6:	2230      	movs	r2, #48	; 0x30
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fe67 	bl	800787e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bb0:	f107 030c 	add.w	r3, r7, #12
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60bb      	str	r3, [r7, #8]
 8006bc4:	4b28      	ldr	r3, [pc, #160]	; (8006c68 <SystemClock_Config+0xcc>)
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <SystemClock_Config+0xcc>)
 8006bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bce:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd0:	4b25      	ldr	r3, [pc, #148]	; (8006c68 <SystemClock_Config+0xcc>)
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006bdc:	2300      	movs	r3, #0
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	4b22      	ldr	r3, [pc, #136]	; (8006c6c <SystemClock_Config+0xd0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006be8:	4a20      	ldr	r2, [pc, #128]	; (8006c6c <SystemClock_Config+0xd0>)
 8006bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <SystemClock_Config+0xd0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bf8:	607b      	str	r3, [r7, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c00:	2301      	movs	r3, #1
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c04:	2310      	movs	r3, #16
 8006c06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006c10:	230c      	movs	r3, #12
 8006c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8006c14:	2390      	movs	r3, #144	; 0x90
 8006c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006c18:	2304      	movs	r3, #4
 8006c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c20:	f107 0320 	add.w	r3, r7, #32
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fa fea1 	bl	800196c <HAL_RCC_OscConfig>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006c30:	f000 faa0 	bl	8007174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c34:	230f      	movs	r3, #15
 8006c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fb f8cd 	bl	8001df0 <HAL_RCC_ClockConfig>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006c5c:	f000 fa8a 	bl	8007174 <Error_Handler>
  }
}
 8006c60:	bf00      	nop
 8006c62:	3750      	adds	r7, #80	; 0x50
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	40007000 	.word	0x40007000

08006c70 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c74:	2200      	movs	r2, #0
 8006c76:	2100      	movs	r1, #0
 8006c78:	2025      	movs	r0, #37	; 0x25
 8006c7a:	f7fa f940 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c7e:	2025      	movs	r0, #37	; 0x25
 8006c80:	f7fa f959 	bl	8000f36 <HAL_NVIC_EnableIRQ>
}
 8006c84:	bf00      	nop
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006c8c:	4b2b      	ldr	r3, [pc, #172]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <MX_CAN1_Init+0xb8>)
 8006c90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006c94:	2206      	movs	r2, #6
 8006c96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006c98:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006c9e:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006ca6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006caa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006cac:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cb2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006cba:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006cc0:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006cc6:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006ccc:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006cd2:	4b1a      	ldr	r3, [pc, #104]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006cd8:	4818      	ldr	r0, [pc, #96]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006cda:	f7f9 fcd9 	bl	8000690 <HAL_CAN_Init>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006ce4:	f000 fa46 	bl	8007174 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank 			= 0;
 8006ce8:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode				= CAN_FILTERMODE_IDMASK;
 8006cee:	4b15      	ldr	r3, [pc, #84]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale			= CAN_FILTERSCALE_32BIT;
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh			= 0x0000;
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow			= 0x0000;
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh		= 0x0000;
 8006d06:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow		= 0x0000;
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment	= CAN_RX_FIFO0;
 8006d12:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation		= ENABLE;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank 	= 14;
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006d20:	220e      	movs	r2, #14
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8006d24:	4907      	ldr	r1, [pc, #28]	; (8006d44 <MX_CAN1_Init+0xbc>)
 8006d26:	4805      	ldr	r0, [pc, #20]	; (8006d3c <MX_CAN1_Init+0xb4>)
 8006d28:	f7f9 fdae 	bl	8000888 <HAL_CAN_ConfigFilter>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <MX_CAN1_Init+0xae>
  {
    /* Filter configuration Error */
    Error_Handler();
 8006d32:	f000 fa1f 	bl	8007174 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8006d36:	bf00      	nop
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20013480 	.word	0x20013480
 8006d40:	40006400 	.word	0x40006400
 8006d44:	200132bc 	.word	0x200132bc

08006d48 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <MX_SDIO_SD_Init+0x38>)
 8006d4e:	4a0d      	ldr	r2, [pc, #52]	; (8006d84 <MX_SDIO_SD_Init+0x3c>)
 8006d50:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <MX_SDIO_SD_Init+0x38>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006d58:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <MX_SDIO_SD_Init+0x38>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <MX_SDIO_SD_Init+0x38>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <MX_SDIO_SD_Init+0x38>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d6a:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <MX_SDIO_SD_Init+0x38>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <MX_SDIO_SD_Init+0x38>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006d76:	bf00      	nop
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	200133f4 	.word	0x200133f4
 8006d84:	40012c00 	.word	0x40012c00

08006d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006d8c:	4b11      	ldr	r3, [pc, #68]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006d8e:	4a12      	ldr	r2, [pc, #72]	; (8006dd8 <MX_USART1_UART_Init+0x50>)
 8006d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d9a:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006dae:	220c      	movs	r2, #12
 8006db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006db2:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006dbe:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <MX_USART1_UART_Init+0x4c>)
 8006dc0:	f7fc f9a0 	bl	8003104 <HAL_UART_Init>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006dca:	f000 f9d3 	bl	8007174 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006dce:	bf00      	nop
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20013348 	.word	0x20013348
 8006dd8:	40011000 	.word	0x40011000

08006ddc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <MX_DMA_Init+0x4c>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	4a0f      	ldr	r2, [pc, #60]	; (8006e28 <MX_DMA_Init+0x4c>)
 8006dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006df0:	6313      	str	r3, [r2, #48]	; 0x30
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <MX_DMA_Init+0x4c>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2100      	movs	r1, #0
 8006e02:	203b      	movs	r0, #59	; 0x3b
 8006e04:	f7fa f87b 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006e08:	203b      	movs	r0, #59	; 0x3b
 8006e0a:	f7fa f894 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	2045      	movs	r0, #69	; 0x45
 8006e14:	f7fa f873 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006e18:	2045      	movs	r0, #69	; 0x45
 8006e1a:	f7fa f88c 	bl	8000f36 <HAL_NVIC_EnableIRQ>

}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40023800 	.word	0x40023800

08006e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e32:	f107 0314 	add.w	r3, r7, #20
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	605a      	str	r2, [r3, #4]
 8006e3c:	609a      	str	r2, [r3, #8]
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e42:	2300      	movs	r3, #0
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	4b34      	ldr	r3, [pc, #208]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	4a33      	ldr	r2, [pc, #204]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	6313      	str	r3, [r2, #48]	; 0x30
 8006e52:	4b31      	ldr	r3, [pc, #196]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	4b2d      	ldr	r3, [pc, #180]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e6e:	4b2a      	ldr	r3, [pc, #168]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e84:	f043 0304 	orr.w	r3, r3, #4
 8006e88:	6313      	str	r3, [r2, #48]	; 0x30
 8006e8a:	4b23      	ldr	r3, [pc, #140]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	4b1f      	ldr	r3, [pc, #124]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006ea0:	f043 0308 	orr.w	r3, r3, #8
 8006ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea6:	4b1c      	ldr	r3, [pc, #112]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	607b      	str	r3, [r7, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec2:	4b15      	ldr	r3, [pc, #84]	; (8006f18 <MX_GPIO_Init+0xec>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006ed4:	4811      	ldr	r0, [pc, #68]	; (8006f1c <MX_GPIO_Init+0xf0>)
 8006ed6:	f7fa fd15 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006eda:	2302      	movs	r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ee6:	f107 0314 	add.w	r3, r7, #20
 8006eea:	4619      	mov	r1, r3
 8006eec:	480c      	ldr	r0, [pc, #48]	; (8006f20 <MX_GPIO_Init+0xf4>)
 8006eee:	f7fa fb47 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8006ef2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f00:	2300      	movs	r3, #0
 8006f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f04:	f107 0314 	add.w	r3, r7, #20
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4804      	ldr	r0, [pc, #16]	; (8006f1c <MX_GPIO_Init+0xf0>)
 8006f0c:	f7fa fb38 	bl	8001580 <HAL_GPIO_Init>

}
 8006f10:	bf00      	nop
 8006f12:	3728      	adds	r7, #40	; 0x28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	40021800 	.word	0x40021800
 8006f20:	40020000 	.word	0x40020000

08006f24 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af02      	add	r7, sp, #8
	/* reset of all peripherals, initializes the flash interface and the Systick. */
	HAL_Init();
 8006f2a:	f7f9 fb31 	bl	8000590 <HAL_Init>

	/* configure the system clock */
	SystemClock_Config();
 8006f2e:	f7ff fe35 	bl	8006b9c <SystemClock_Config>

	/* initialize all configured peripherals */
	MX_DMA_Init();
 8006f32:	f7ff ff53 	bl	8006ddc <MX_DMA_Init>
	MX_GPIO_Init();
 8006f36:	f7ff ff79 	bl	8006e2c <MX_GPIO_Init>
	MX_CAN1_Init();
 8006f3a:	f7ff fea5 	bl	8006c88 <MX_CAN1_Init>
	MX_FATFS_Init();
 8006f3e:	f7ff fe05 	bl	8006b4c <MX_FATFS_Init>
	MX_SDIO_SD_Init();
 8006f42:	f7ff ff01 	bl	8006d48 <MX_SDIO_SD_Init>
	MX_USART1_UART_Init();
 8006f46:	f7ff ff1f 	bl	8006d88 <MX_USART1_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8006f4a:	f7ff fe91 	bl	8006c70 <MX_NVIC_Init>

	xQueueCAN = xQueueCreate(10, sizeof(struct canMessage));
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2110      	movs	r1, #16
 8006f52:	200a      	movs	r0, #10
 8006f54:	f7fd fc40 	bl	80047d8 <xQueueGenericCreate>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <main+0x80>)
 8006f5c:	601a      	str	r2, [r3, #0]
	if(xQueueCAN == NULL)
	{
		/* Queue was not created and must not be used. */
	}

	xTaskCreate (
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <main+0x84>)
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	2304      	movs	r3, #4
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	22c8      	movs	r2, #200	; 0xc8
 8006f6a:	4910      	ldr	r1, [pc, #64]	; (8006fac <main+0x88>)
 8006f6c:	4810      	ldr	r0, [pc, #64]	; (8006fb0 <main+0x8c>)
 8006f6e:	f7fe f867 	bl	8005040 <xTaskCreate>
		(void *) NULL,				// pvParameters
		PRIORITY_TASK_LED,			// priority
		&taskLedHandle				// taskHandle
	);

	xTaskCreate (
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <main+0x90>)
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	2303      	movs	r3, #3
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006f80:	490d      	ldr	r1, [pc, #52]	; (8006fb8 <main+0x94>)
 8006f82:	480e      	ldr	r0, [pc, #56]	; (8006fbc <main+0x98>)
 8006f84:	f7fe f85c 	bl	8005040 <xTaskCreate>
		(void *) NULL,				// pvParameters
		PRIORITY_TASK_LOG,			// priority
		&taskLogHandle				// taskHandle
	);

	xTaskCreate (
 8006f88:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <main+0x9c>)
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	2300      	movs	r3, #0
 8006f92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006f96:	490b      	ldr	r1, [pc, #44]	; (8006fc4 <main+0xa0>)
 8006f98:	480b      	ldr	r0, [pc, #44]	; (8006fc8 <main+0xa4>)
 8006f9a:	f7fe f851 	bl	8005040 <xTaskCreate>
		PRIORITY_TASK_HANDLECAN,		// priority
		&taskHandleCANHandle			// taskHandle
	);

	/* start the scheduler */
	vTaskStartScheduler();
 8006f9e:	f7fe fa07 	bl	80053b0 <vTaskStartScheduler>

	/* Infinite loop */
	for (;;);
 8006fa2:	e7fe      	b.n	8006fa2 <main+0x7e>
 8006fa4:	20013390 	.word	0x20013390
 8006fa8:	20013344 	.word	0x20013344
 8006fac:	080080b8 	.word	0x080080b8
 8006fb0:	08006fcd 	.word	0x08006fcd
 8006fb4:	20013388 	.word	0x20013388
 8006fb8:	080080c0 	.word	0x080080c0
 8006fbc:	08007085 	.word	0x08007085
 8006fc0:	2001338c 	.word	0x2001338c
 8006fc4:	080080c8 	.word	0x080080c8
 8006fc8:	08007001 	.word	0x08007001

08006fcc <taskLed>:
}

void taskLed(void *pvParameters) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8006fd4:	f7fe fae2 	bl	800559c <xTaskGetTickCount>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	60bb      	str	r3, [r7, #8]
	const TickType_t timeMiliseconds = 1000 / portTICK_PERIOD_MS;
 8006fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fe0:	60fb      	str	r3, [r7, #12]

	for (;;) {
		HAL_GPIO_TogglePin(GPIOG, GREEN_LED_Pin);
 8006fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <taskLed+0x30>)
 8006fe8:	f7fa fca5 	bl	8001936 <HAL_GPIO_TogglePin>

		vTaskDelayUntil(&xLastWakeTime, timeMiliseconds);
 8006fec:	f107 0308 	add.w	r3, r7, #8
 8006ff0:	68f9      	ldr	r1, [r7, #12]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe f962 	bl	80052bc <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOG, GREEN_LED_Pin);
 8006ff8:	e7f3      	b.n	8006fe2 <taskLed+0x16>
 8006ffa:	bf00      	nop
 8006ffc:	40021800 	.word	0x40021800

08007000 <taskHandleCAN>:
	}
}

void taskHandleCAN (void *pvParameters) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	uint32_t messagesInFifo;
	HAL_StatusTypeDef status;
	struct canMessage message;

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

//	CAN_ConfigFilter();

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800700c:	4819      	ldr	r0, [pc, #100]	; (8007074 <taskHandleCAN+0x74>)
 800700e:	f7f9 fd1b 	bl	8000a48 <HAL_CAN_Start>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <taskHandleCAN+0x1c>
		/* Start Error */
		Error_Handler();
 8007018:	f000 f8ac 	bl	8007174 <Error_Handler>
	}

	for (;;) {
		do {
			messagesInFifo = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800701c:	2100      	movs	r1, #0
 800701e:	4815      	ldr	r0, [pc, #84]	; (8007074 <taskHandleCAN+0x74>)
 8007020:	f7f9 fe69 	bl	8000cf6 <HAL_CAN_GetRxFifoFillLevel>
 8007024:	6278      	str	r0, [r7, #36]	; 0x24
		} while (messagesInFifo == 0);
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f7      	beq.n	800701c <taskHandleCAN+0x1c>

		status = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 800702c:	4b12      	ldr	r3, [pc, #72]	; (8007078 <taskHandleCAN+0x78>)
 800702e:	4a13      	ldr	r2, [pc, #76]	; (800707c <taskHandleCAN+0x7c>)
 8007030:	2100      	movs	r1, #0
 8007032:	4810      	ldr	r0, [pc, #64]	; (8007074 <taskHandleCAN+0x74>)
 8007034:	f7f9 fd4c 	bl	8000ad0 <HAL_CAN_GetRxMessage>
 8007038:	4603      	mov	r3, r0
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (status == HAL_OK) {
 800703e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1ea      	bne.n	800701c <taskHandleCAN+0x1c>
			message.id = RxHeader.StdId;
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <taskHandleCAN+0x7c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	613b      	str	r3, [r7, #16]
			memcpy(message.data, RxData, sizeof(RxData));
 800704c:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <taskHandleCAN+0x78>)
 800704e:	f107 0314 	add.w	r3, r7, #20
 8007052:	6810      	ldr	r0, [r2, #0]
 8007054:	6851      	ldr	r1, [r2, #4]
 8007056:	c303      	stmia	r3!, {r0, r1}
			message.timestamp = xTaskGetTickCount();
 8007058:	f7fe faa0 	bl	800559c <xTaskGetTickCount>
 800705c:	4603      	mov	r3, r0
 800705e:	61fb      	str	r3, [r7, #28]

			xQueueSend(xQueueCAN, (const void *) &message, &xHigherPriorityTaskWoken);
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <taskHandleCAN+0x80>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	f107 020c 	add.w	r2, r7, #12
 8007068:	f107 0110 	add.w	r1, r7, #16
 800706c:	2300      	movs	r3, #0
 800706e:	f7fd fc11 	bl	8004894 <xQueueGenericSend>
	for (;;) {
 8007072:	e7d3      	b.n	800701c <taskHandleCAN+0x1c>
 8007074:	20013480 	.word	0x20013480
 8007078:	20013478 	.word	0x20013478
 800707c:	200134a8 	.word	0x200134a8
 8007080:	20013390 	.word	0x20013390

08007084 <taskLog>:
		}
	}
}

void taskLog (void *pvParameters) {
 8007084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007086:	b0af      	sub	sp, #188	; 0xbc
 8007088:	af08      	add	r7, sp, #32
 800708a:	60f8      	str	r0, [r7, #12]

	struct canMessage message;
	struct nowDateTime logDateTime;

	for (;;) {
		xQueueReceive(xQueueCAN, (void *) &message, portMAX_DELAY);
 800708c:	4b34      	ldr	r3, [pc, #208]	; (8007160 <taskLog+0xdc>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007098:	4618      	mov	r0, r3
 800709a:	f7fd fd89 	bl	8004bb0 <xQueueReceive>

		if ((message.id == ID_CAN_GPS) && !(flagDateSet)) {
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80070a4:	d119      	bne.n	80070da <taskLog+0x56>
 80070a6:	4b2f      	ldr	r3, [pc, #188]	; (8007164 <taskLog+0xe0>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f083 0301 	eor.w	r3, r3, #1
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d012      	beq.n	80070da <taskLog+0x56>
			logDateTime.day = message.data[0];
 80070b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070b8:	613b      	str	r3, [r7, #16]
			logDateTime.month = message.data[1];
 80070ba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80070be:	617b      	str	r3, [r7, #20]
			logDateTime.year = message.data[2];
 80070c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80070c4:	61bb      	str	r3, [r7, #24]

			logDateTime.hour = message.data[3];
 80070c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070ca:	61fb      	str	r3, [r7, #28]
			logDateTime.minute = message.data[4];
 80070cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070d0:	623b      	str	r3, [r7, #32]

			flagDateSet = 1;
 80070d2:	4b24      	ldr	r3, [pc, #144]	; (8007164 <taskLog+0xe0>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e035      	b.n	8007146 <taskLog+0xc2>
		}

		else if (flagDateSet) {
 80070da:	4b22      	ldr	r3, [pc, #136]	; (8007164 <taskLog+0xe0>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d031      	beq.n	8007146 <taskLog+0xc2>
			memset(uartBuffer, 0, sizeof(uartBuffer));
 80070e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070e6:	2264      	movs	r2, #100	; 0x64
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fbc7 	bl	800787e <memset>
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 80070f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
				message.id,
				message.data[0],
 80070f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 80070f6:	469c      	mov	ip, r3
				message.data[1],
 80070f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 80070fc:	4619      	mov	r1, r3
				message.data[2],
 80070fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 8007102:	461c      	mov	r4, r3
				message.data[3],
 8007104:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 8007108:	461d      	mov	r5, r3
				message.data[4],
 800710a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 800710e:	461e      	mov	r6, r3
				message.data[5],
 8007110:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 8007114:	60bb      	str	r3, [r7, #8]
				message.data[6],
 8007116:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 800711a:	607b      	str	r3, [r7, #4]
				message.data[7],
 800711c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 8007120:	603b      	str	r3, [r7, #0]
				message.timestamp * portTICK_PERIOD_MS
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			sprintf(uartBuffer, "%x - %02x | %02x | %02x | %02x | %02x | %02x | %02x | %02x - %d\n\r",
 8007124:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007128:	9307      	str	r3, [sp, #28]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9306      	str	r3, [sp, #24]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	9305      	str	r3, [sp, #20]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	9603      	str	r6, [sp, #12]
 8007138:	9502      	str	r5, [sp, #8]
 800713a:	9401      	str	r4, [sp, #4]
 800713c:	9100      	str	r1, [sp, #0]
 800713e:	4663      	mov	r3, ip
 8007140:	4909      	ldr	r1, [pc, #36]	; (8007168 <taskLog+0xe4>)
 8007142:	f000 fba5 	bl	8007890 <siprintf>
			);
		}

		HAL_UART_Transmit_IT(&huart1, &uartBuffer, sizeof(uartBuffer));
 8007146:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800714a:	2264      	movs	r2, #100	; 0x64
 800714c:	4619      	mov	r1, r3
 800714e:	4807      	ldr	r0, [pc, #28]	; (800716c <taskLog+0xe8>)
 8007150:	f7fc f825 	bl	800319e <HAL_UART_Transmit_IT>

		HAL_GPIO_TogglePin(GPIOG, RED_LED_Pin);
 8007154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007158:	4805      	ldr	r0, [pc, #20]	; (8007170 <taskLog+0xec>)
 800715a:	f7fa fbec 	bl	8001936 <HAL_GPIO_TogglePin>
		xQueueReceive(xQueueCAN, (void *) &message, portMAX_DELAY);
 800715e:	e795      	b.n	800708c <taskLog+0x8>
 8007160:	20013390 	.word	0x20013390
 8007164:	20012e00 	.word	0x20012e00
 8007168:	080080d8 	.word	0x080080d8
 800716c:	20013348 	.word	0x20013348
 8007170:	40021800 	.word	0x40021800

08007174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800718e:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <SD_CheckStatus+0x38>)
 8007190:	2201      	movs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007194:	f7ff fcaa 	bl	8006aec <BSP_SD_GetCardState>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d107      	bne.n	80071ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800719e:	4b07      	ldr	r3, [pc, #28]	; (80071bc <SD_CheckStatus+0x38>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4b04      	ldr	r3, [pc, #16]	; (80071bc <SD_CheckStatus+0x38>)
 80071ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80071ae:	4b03      	ldr	r3, [pc, #12]	; (80071bc <SD_CheckStatus+0x38>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	b2db      	uxtb	r3, r3
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000010 	.word	0x20000010

080071c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <SD_initialize+0x38>)
 80071cc:	2201      	movs	r2, #1
 80071ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80071d0:	f7ff fc38 	bl	8006a44 <BSP_SD_Init>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d107      	bne.n	80071ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ffd1 	bl	8007184 <SD_CheckStatus>
 80071e2:	4603      	mov	r3, r0
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <SD_initialize+0x38>)
 80071e8:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80071ea:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <SD_initialize+0x38>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b2db      	uxtb	r3, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000010 	.word	0x20000010

080071fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff ffbb 	bl	8007184 <SD_CheckStatus>
 800720e:	4603      	mov	r3, r0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800722c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	68b8      	ldr	r0, [r7, #8]
 8007236:	f7ff fc1d 	bl	8006a74 <BSP_SD_ReadBlocks>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d107      	bne.n	8007250 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007240:	bf00      	nop
 8007242:	f7ff fc53 	bl	8006aec <BSP_SD_GetCardState>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1fa      	bne.n	8007242 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007250:	7dfb      	ldrb	r3, [r7, #23]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b086      	sub	sp, #24
 800725e:	af00      	add	r7, sp, #0
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4603      	mov	r3, r0
 8007268:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800726e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	68b8      	ldr	r0, [r7, #8]
 8007278:	f7ff fc1a 	bl	8006ab0 <BSP_SD_WriteBlocks>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007282:	bf00      	nop
 8007284:	f7ff fc32 	bl	8006aec <BSP_SD_GetCardState>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1fa      	bne.n	8007284 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08c      	sub	sp, #48	; 0x30
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	603a      	str	r2, [r7, #0]
 80072a6:	71fb      	strb	r3, [r7, #7]
 80072a8:	460b      	mov	r3, r1
 80072aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80072b2:	4b25      	ldr	r3, [pc, #148]	; (8007348 <SD_ioctl+0xac>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <SD_ioctl+0x28>
 80072c0:	2303      	movs	r3, #3
 80072c2:	e03c      	b.n	800733e <SD_ioctl+0xa2>

  switch (cmd)
 80072c4:	79bb      	ldrb	r3, [r7, #6]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d834      	bhi.n	8007334 <SD_ioctl+0x98>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <SD_ioctl+0x34>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072e9 	.word	0x080072e9
 80072d8:	08007301 	.word	0x08007301
 80072dc:	0800731b 	.word	0x0800731b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80072e6:	e028      	b.n	800733a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff fc0d 	bl	8006b0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80072f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80072fe:	e01c      	b.n	800733a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007300:	f107 030c 	add.w	r3, r7, #12
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fc01 	bl	8006b0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	b29a      	uxth	r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007318:	e00f      	b.n	800733a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800731a:	f107 030c 	add.w	r3, r7, #12
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fbf4 	bl	8006b0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	0a5a      	lsrs	r2, r3, #9
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007332:	e002      	b.n	800733a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007334:	2304      	movs	r3, #4
 8007336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800733a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800733e:	4618      	mov	r0, r3
 8007340:	3730      	adds	r7, #48	; 0x30
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000010 	.word	0x20000010

0800734c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007352:	2300      	movs	r3, #0
 8007354:	607b      	str	r3, [r7, #4]
 8007356:	4b10      	ldr	r3, [pc, #64]	; (8007398 <HAL_MspInit+0x4c>)
 8007358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735a:	4a0f      	ldr	r2, [pc, #60]	; (8007398 <HAL_MspInit+0x4c>)
 800735c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007360:	6453      	str	r3, [r2, #68]	; 0x44
 8007362:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <HAL_MspInit+0x4c>)
 8007364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800736e:	2300      	movs	r3, #0
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	4b09      	ldr	r3, [pc, #36]	; (8007398 <HAL_MspInit+0x4c>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	4a08      	ldr	r2, [pc, #32]	; (8007398 <HAL_MspInit+0x4c>)
 8007378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737c:	6413      	str	r3, [r2, #64]	; 0x40
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <HAL_MspInit+0x4c>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40023800 	.word	0x40023800

0800739c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	; 0x28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a4:	f107 0314 	add.w	r3, r7, #20
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	609a      	str	r2, [r3, #8]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a19      	ldr	r2, [pc, #100]	; (8007420 <HAL_CAN_MspInit+0x84>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d12c      	bne.n	8007418 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80073be:	2300      	movs	r3, #0
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <HAL_CAN_MspInit+0x88>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	4a17      	ldr	r2, [pc, #92]	; (8007424 <HAL_CAN_MspInit+0x88>)
 80073c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073cc:	6413      	str	r3, [r2, #64]	; 0x40
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <HAL_CAN_MspInit+0x88>)
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	4b11      	ldr	r3, [pc, #68]	; (8007424 <HAL_CAN_MspInit+0x88>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	4a10      	ldr	r2, [pc, #64]	; (8007424 <HAL_CAN_MspInit+0x88>)
 80073e4:	f043 0301 	orr.w	r3, r3, #1
 80073e8:	6313      	str	r3, [r2, #48]	; 0x30
 80073ea:	4b0e      	ldr	r3, [pc, #56]	; (8007424 <HAL_CAN_MspInit+0x88>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073fc:	2302      	movs	r3, #2
 80073fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007404:	2303      	movs	r3, #3
 8007406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007408:	2309      	movs	r3, #9
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800740c:	f107 0314 	add.w	r3, r7, #20
 8007410:	4619      	mov	r1, r3
 8007412:	4805      	ldr	r0, [pc, #20]	; (8007428 <HAL_CAN_MspInit+0x8c>)
 8007414:	f7fa f8b4 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007418:	bf00      	nop
 800741a:	3728      	adds	r7, #40	; 0x28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40006400 	.word	0x40006400
 8007424:	40023800 	.word	0x40023800
 8007428:	40020000 	.word	0x40020000

0800742c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007434:	f107 0314 	add.w	r3, r7, #20
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a64      	ldr	r2, [pc, #400]	; (80075dc <HAL_SD_MspInit+0x1b0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	f040 80c1 	bne.w	80075d2 <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007450:	2300      	movs	r3, #0
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	4b62      	ldr	r3, [pc, #392]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 8007456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007458:	4a61      	ldr	r2, [pc, #388]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 800745a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800745e:	6453      	str	r3, [r2, #68]	; 0x44
 8007460:	4b5f      	ldr	r3, [pc, #380]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 8007462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007468:	613b      	str	r3, [r7, #16]
 800746a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	4b5b      	ldr	r3, [pc, #364]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	4a5a      	ldr	r2, [pc, #360]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 8007476:	f043 0304 	orr.w	r3, r3, #4
 800747a:	6313      	str	r3, [r2, #48]	; 0x30
 800747c:	4b58      	ldr	r3, [pc, #352]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]
 800748c:	4b54      	ldr	r3, [pc, #336]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	4a53      	ldr	r2, [pc, #332]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 8007492:	f043 0308 	orr.w	r3, r3, #8
 8007496:	6313      	str	r3, [r2, #48]	; 0x30
 8007498:	4b51      	ldr	r3, [pc, #324]	; (80075e0 <HAL_SD_MspInit+0x1b4>)
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration    
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80074a4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80074a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074aa:	2302      	movs	r3, #2
 80074ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b2:	2303      	movs	r3, #3
 80074b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80074b6:	230c      	movs	r3, #12
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074ba:	f107 0314 	add.w	r3, r7, #20
 80074be:	4619      	mov	r1, r3
 80074c0:	4848      	ldr	r0, [pc, #288]	; (80075e4 <HAL_SD_MspInit+0x1b8>)
 80074c2:	f7fa f85d 	bl	8001580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80074c6:	2304      	movs	r3, #4
 80074c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ca:	2302      	movs	r3, #2
 80074cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d2:	2303      	movs	r3, #3
 80074d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80074d6:	230c      	movs	r3, #12
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074da:	f107 0314 	add.w	r3, r7, #20
 80074de:	4619      	mov	r1, r3
 80074e0:	4841      	ldr	r0, [pc, #260]	; (80075e8 <HAL_SD_MspInit+0x1bc>)
 80074e2:	f7fa f84d 	bl	8001580 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80074e6:	4b41      	ldr	r3, [pc, #260]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 80074e8:	4a41      	ldr	r2, [pc, #260]	; (80075f0 <HAL_SD_MspInit+0x1c4>)
 80074ea:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80074ec:	4b3f      	ldr	r3, [pc, #252]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 80074ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074f2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074f4:	4b3d      	ldr	r3, [pc, #244]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074fa:	4b3c      	ldr	r3, [pc, #240]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007500:	4b3a      	ldr	r3, [pc, #232]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007506:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007508:	4b38      	ldr	r3, [pc, #224]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 800750a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800750e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007510:	4b36      	ldr	r3, [pc, #216]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007516:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007518:	4b34      	ldr	r3, [pc, #208]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 800751a:	2220      	movs	r2, #32
 800751c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800751e:	4b33      	ldr	r3, [pc, #204]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007520:	2200      	movs	r2, #0
 8007522:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007524:	4b31      	ldr	r3, [pc, #196]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007526:	2204      	movs	r2, #4
 8007528:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800752a:	4b30      	ldr	r3, [pc, #192]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 800752c:	2203      	movs	r2, #3
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007530:	4b2e      	ldr	r3, [pc, #184]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007532:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007538:	4b2c      	ldr	r3, [pc, #176]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 800753a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007540:	482a      	ldr	r0, [pc, #168]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007542:	f7f9 fd13 	bl	8000f6c <HAL_DMA_Init>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800754c:	f7ff fe12 	bl	8007174 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a26      	ldr	r2, [pc, #152]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007554:	63da      	str	r2, [r3, #60]	; 0x3c
 8007556:	4a25      	ldr	r2, [pc, #148]	; (80075ec <HAL_SD_MspInit+0x1c0>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800755c:	4b25      	ldr	r3, [pc, #148]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 800755e:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <HAL_SD_MspInit+0x1cc>)
 8007560:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 8007564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007568:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800756a:	4b22      	ldr	r3, [pc, #136]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 800756c:	2240      	movs	r2, #64	; 0x40
 800756e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007570:	4b20      	ldr	r3, [pc, #128]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 8007572:	2200      	movs	r2, #0
 8007574:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007576:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 8007578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800757c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800757e:	4b1d      	ldr	r3, [pc, #116]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 8007580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007584:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007586:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 8007588:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800758c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800758e:	4b19      	ldr	r3, [pc, #100]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 8007590:	2220      	movs	r2, #32
 8007592:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007594:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 8007596:	2200      	movs	r2, #0
 8007598:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800759a:	4b16      	ldr	r3, [pc, #88]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 800759c:	2204      	movs	r2, #4
 800759e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80075a0:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 80075a2:	2203      	movs	r2, #3
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80075a6:	4b13      	ldr	r3, [pc, #76]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 80075a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80075ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80075ae:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 80075b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80075b6:	480f      	ldr	r0, [pc, #60]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 80075b8:	f7f9 fcd8 	bl	8000f6c <HAL_DMA_Init>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80075c2:	f7ff fdd7 	bl	8007174 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a0a      	ldr	r2, [pc, #40]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40
 80075cc:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <HAL_SD_MspInit+0x1c8>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80075d2:	bf00      	nop
 80075d4:	3728      	adds	r7, #40	; 0x28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40023800 	.word	0x40023800
 80075e4:	40020800 	.word	0x40020800
 80075e8:	40020c00 	.word	0x40020c00
 80075ec:	200132e4 	.word	0x200132e4
 80075f0:	40026458 	.word	0x40026458
 80075f4:	20013394 	.word	0x20013394
 80075f8:	400264a0 	.word	0x400264a0

080075fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	; 0x28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a19      	ldr	r2, [pc, #100]	; (8007680 <HAL_UART_MspInit+0x84>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d12c      	bne.n	8007678 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	4b18      	ldr	r3, [pc, #96]	; (8007684 <HAL_UART_MspInit+0x88>)
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	4a17      	ldr	r2, [pc, #92]	; (8007684 <HAL_UART_MspInit+0x88>)
 8007628:	f043 0310 	orr.w	r3, r3, #16
 800762c:	6453      	str	r3, [r2, #68]	; 0x44
 800762e:	4b15      	ldr	r3, [pc, #84]	; (8007684 <HAL_UART_MspInit+0x88>)
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	4b11      	ldr	r3, [pc, #68]	; (8007684 <HAL_UART_MspInit+0x88>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	4a10      	ldr	r2, [pc, #64]	; (8007684 <HAL_UART_MspInit+0x88>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6313      	str	r3, [r2, #48]	; 0x30
 800764a:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <HAL_UART_MspInit+0x88>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007656:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800765a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765c:	2302      	movs	r3, #2
 800765e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007660:	2301      	movs	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007664:	2303      	movs	r3, #3
 8007666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007668:	2307      	movs	r3, #7
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4619      	mov	r1, r3
 8007672:	4805      	ldr	r0, [pc, #20]	; (8007688 <HAL_UART_MspInit+0x8c>)
 8007674:	f7f9 ff84 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007678:	bf00      	nop
 800767a:	3728      	adds	r7, #40	; 0x28
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40011000 	.word	0x40011000
 8007684:	40023800 	.word	0x40023800
 8007688:	40020000 	.word	0x40020000

0800768c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800769a:	b480      	push	{r7}
 800769c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800769e:	e7fe      	b.n	800769e <HardFault_Handler+0x4>

080076a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076a4:	e7fe      	b.n	80076a4 <MemManage_Handler+0x4>

080076a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076a6:	b480      	push	{r7}
 80076a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076aa:	e7fe      	b.n	80076aa <BusFault_Handler+0x4>

080076ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076b0:	e7fe      	b.n	80076b0 <UsageFault_Handler+0x4>

080076b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076b2:	b480      	push	{r7}
 80076b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076b6:	bf00      	nop
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80076c4:	4802      	ldr	r0, [pc, #8]	; (80076d0 <USART1_IRQHandler+0x10>)
 80076c6:	f7fb fdaf 	bl	8003228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20013348 	.word	0x20013348

080076d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80076d8:	4802      	ldr	r0, [pc, #8]	; (80076e4 <DMA2_Stream3_IRQHandler+0x10>)
 80076da:	f7f9 fd17 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200132e4 	.word	0x200132e4

080076e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80076ec:	4802      	ldr	r0, [pc, #8]	; (80076f8 <DMA2_Stream6_IRQHandler+0x10>)
 80076ee:	f7f9 fd0d 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80076f2:	bf00      	nop
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20013394 	.word	0x20013394

080076fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007704:	4b11      	ldr	r3, [pc, #68]	; (800774c <_sbrk+0x50>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <_sbrk+0x16>
		heap_end = &end;
 800770c:	4b0f      	ldr	r3, [pc, #60]	; (800774c <_sbrk+0x50>)
 800770e:	4a10      	ldr	r2, [pc, #64]	; (8007750 <_sbrk+0x54>)
 8007710:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <_sbrk+0x50>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <_sbrk+0x50>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	466a      	mov	r2, sp
 8007722:	4293      	cmp	r3, r2
 8007724:	d907      	bls.n	8007736 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007726:	f000 f875 	bl	8007814 <__errno>
 800772a:	4602      	mov	r2, r0
 800772c:	230c      	movs	r3, #12
 800772e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007734:	e006      	b.n	8007744 <_sbrk+0x48>
	}

	heap_end += incr;
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <_sbrk+0x50>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4413      	add	r3, r2
 800773e:	4a03      	ldr	r2, [pc, #12]	; (800774c <_sbrk+0x50>)
 8007740:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007742:	68fb      	ldr	r3, [r7, #12]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20012e04 	.word	0x20012e04
 8007750:	200134c8 	.word	0x200134c8

08007754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007758:	4b16      	ldr	r3, [pc, #88]	; (80077b4 <SystemInit+0x60>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <SystemInit+0x60>)
 8007760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007768:	4b13      	ldr	r3, [pc, #76]	; (80077b8 <SystemInit+0x64>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a12      	ldr	r2, [pc, #72]	; (80077b8 <SystemInit+0x64>)
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <SystemInit+0x64>)
 8007776:	2200      	movs	r2, #0
 8007778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <SystemInit+0x64>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a0e      	ldr	r2, [pc, #56]	; (80077b8 <SystemInit+0x64>)
 8007780:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007788:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <SystemInit+0x64>)
 800778c:	4a0b      	ldr	r2, [pc, #44]	; (80077bc <SystemInit+0x68>)
 800778e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <SystemInit+0x64>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <SystemInit+0x64>)
 8007796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <SystemInit+0x64>)
 800779e:	2200      	movs	r2, #0
 80077a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80077a2:	4b04      	ldr	r3, [pc, #16]	; (80077b4 <SystemInit+0x60>)
 80077a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077a8:	609a      	str	r2, [r3, #8]
#endif
}
 80077aa:	bf00      	nop
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	e000ed00 	.word	0xe000ed00
 80077b8:	40023800 	.word	0x40023800
 80077bc:	24003010 	.word	0x24003010

080077c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80077c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077f8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80077c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80077c6:	e003      	b.n	80077d0 <LoopCopyDataInit>

080077c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80077c8:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80077ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80077cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80077ce:	3104      	adds	r1, #4

080077d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80077d0:	480b      	ldr	r0, [pc, #44]	; (8007800 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80077d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80077d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80077d8:	d3f6      	bcc.n	80077c8 <CopyDataInit>
  ldr  r2, =_sbss
 80077da:	4a0b      	ldr	r2, [pc, #44]	; (8007808 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80077dc:	e002      	b.n	80077e4 <LoopFillZerobss>

080077de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80077de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80077e0:	f842 3b04 	str.w	r3, [r2], #4

080077e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80077e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80077e8:	d3f9      	bcc.n	80077de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80077ea:	f7ff ffb3 	bl	8007754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80077ee:	f000 f817 	bl	8007820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80077f2:	f7ff fb97 	bl	8006f24 <main>
  bx  lr    
 80077f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80077f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80077fc:	08008194 	.word	0x08008194
  ldr  r0, =_sdata
 8007800:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007804:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8007808:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800780c:	200134c8 	.word	0x200134c8

08007810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007810:	e7fe      	b.n	8007810 <ADC_IRQHandler>
	...

08007814 <__errno>:
 8007814:	4b01      	ldr	r3, [pc, #4]	; (800781c <__errno+0x8>)
 8007816:	6818      	ldr	r0, [r3, #0]
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	20000018 	.word	0x20000018

08007820 <__libc_init_array>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4e0d      	ldr	r6, [pc, #52]	; (8007858 <__libc_init_array+0x38>)
 8007824:	4c0d      	ldr	r4, [pc, #52]	; (800785c <__libc_init_array+0x3c>)
 8007826:	1ba4      	subs	r4, r4, r6
 8007828:	10a4      	asrs	r4, r4, #2
 800782a:	2500      	movs	r5, #0
 800782c:	42a5      	cmp	r5, r4
 800782e:	d109      	bne.n	8007844 <__libc_init_array+0x24>
 8007830:	4e0b      	ldr	r6, [pc, #44]	; (8007860 <__libc_init_array+0x40>)
 8007832:	4c0c      	ldr	r4, [pc, #48]	; (8007864 <__libc_init_array+0x44>)
 8007834:	f000 fc28 	bl	8008088 <_init>
 8007838:	1ba4      	subs	r4, r4, r6
 800783a:	10a4      	asrs	r4, r4, #2
 800783c:	2500      	movs	r5, #0
 800783e:	42a5      	cmp	r5, r4
 8007840:	d105      	bne.n	800784e <__libc_init_array+0x2e>
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007848:	4798      	blx	r3
 800784a:	3501      	adds	r5, #1
 800784c:	e7ee      	b.n	800782c <__libc_init_array+0xc>
 800784e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007852:	4798      	blx	r3
 8007854:	3501      	adds	r5, #1
 8007856:	e7f2      	b.n	800783e <__libc_init_array+0x1e>
 8007858:	0800818c 	.word	0x0800818c
 800785c:	0800818c 	.word	0x0800818c
 8007860:	0800818c 	.word	0x0800818c
 8007864:	08008190 	.word	0x08008190

08007868 <memcpy>:
 8007868:	b510      	push	{r4, lr}
 800786a:	1e43      	subs	r3, r0, #1
 800786c:	440a      	add	r2, r1
 800786e:	4291      	cmp	r1, r2
 8007870:	d100      	bne.n	8007874 <memcpy+0xc>
 8007872:	bd10      	pop	{r4, pc}
 8007874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787c:	e7f7      	b.n	800786e <memcpy+0x6>

0800787e <memset>:
 800787e:	4402      	add	r2, r0
 8007880:	4603      	mov	r3, r0
 8007882:	4293      	cmp	r3, r2
 8007884:	d100      	bne.n	8007888 <memset+0xa>
 8007886:	4770      	bx	lr
 8007888:	f803 1b01 	strb.w	r1, [r3], #1
 800788c:	e7f9      	b.n	8007882 <memset+0x4>
	...

08007890 <siprintf>:
 8007890:	b40e      	push	{r1, r2, r3}
 8007892:	b500      	push	{lr}
 8007894:	b09c      	sub	sp, #112	; 0x70
 8007896:	ab1d      	add	r3, sp, #116	; 0x74
 8007898:	9002      	str	r0, [sp, #8]
 800789a:	9006      	str	r0, [sp, #24]
 800789c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078a0:	4809      	ldr	r0, [pc, #36]	; (80078c8 <siprintf+0x38>)
 80078a2:	9107      	str	r1, [sp, #28]
 80078a4:	9104      	str	r1, [sp, #16]
 80078a6:	4909      	ldr	r1, [pc, #36]	; (80078cc <siprintf+0x3c>)
 80078a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ac:	9105      	str	r1, [sp, #20]
 80078ae:	6800      	ldr	r0, [r0, #0]
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	a902      	add	r1, sp, #8
 80078b4:	f000 f866 	bl	8007984 <_svfiprintf_r>
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	b01c      	add	sp, #112	; 0x70
 80078c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c4:	b003      	add	sp, #12
 80078c6:	4770      	bx	lr
 80078c8:	20000018 	.word	0x20000018
 80078cc:	ffff0208 	.word	0xffff0208

080078d0 <__ssputs_r>:
 80078d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	688e      	ldr	r6, [r1, #8]
 80078d6:	429e      	cmp	r6, r3
 80078d8:	4682      	mov	sl, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	4690      	mov	r8, r2
 80078de:	4699      	mov	r9, r3
 80078e0:	d837      	bhi.n	8007952 <__ssputs_r+0x82>
 80078e2:	898a      	ldrh	r2, [r1, #12]
 80078e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078e8:	d031      	beq.n	800794e <__ssputs_r+0x7e>
 80078ea:	6825      	ldr	r5, [r4, #0]
 80078ec:	6909      	ldr	r1, [r1, #16]
 80078ee:	1a6f      	subs	r7, r5, r1
 80078f0:	6965      	ldr	r5, [r4, #20]
 80078f2:	2302      	movs	r3, #2
 80078f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80078fc:	f109 0301 	add.w	r3, r9, #1
 8007900:	443b      	add	r3, r7
 8007902:	429d      	cmp	r5, r3
 8007904:	bf38      	it	cc
 8007906:	461d      	movcc	r5, r3
 8007908:	0553      	lsls	r3, r2, #21
 800790a:	d530      	bpl.n	800796e <__ssputs_r+0x9e>
 800790c:	4629      	mov	r1, r5
 800790e:	f000 fb21 	bl	8007f54 <_malloc_r>
 8007912:	4606      	mov	r6, r0
 8007914:	b950      	cbnz	r0, 800792c <__ssputs_r+0x5c>
 8007916:	230c      	movs	r3, #12
 8007918:	f8ca 3000 	str.w	r3, [sl]
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	463a      	mov	r2, r7
 800792e:	6921      	ldr	r1, [r4, #16]
 8007930:	f7ff ff9a 	bl	8007868 <memcpy>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800793a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	6126      	str	r6, [r4, #16]
 8007942:	6165      	str	r5, [r4, #20]
 8007944:	443e      	add	r6, r7
 8007946:	1bed      	subs	r5, r5, r7
 8007948:	6026      	str	r6, [r4, #0]
 800794a:	60a5      	str	r5, [r4, #8]
 800794c:	464e      	mov	r6, r9
 800794e:	454e      	cmp	r6, r9
 8007950:	d900      	bls.n	8007954 <__ssputs_r+0x84>
 8007952:	464e      	mov	r6, r9
 8007954:	4632      	mov	r2, r6
 8007956:	4641      	mov	r1, r8
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	f000 fa93 	bl	8007e84 <memmove>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	1b9b      	subs	r3, r3, r6
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	441e      	add	r6, r3
 8007968:	6026      	str	r6, [r4, #0]
 800796a:	2000      	movs	r0, #0
 800796c:	e7dc      	b.n	8007928 <__ssputs_r+0x58>
 800796e:	462a      	mov	r2, r5
 8007970:	f000 fb4a 	bl	8008008 <_realloc_r>
 8007974:	4606      	mov	r6, r0
 8007976:	2800      	cmp	r0, #0
 8007978:	d1e2      	bne.n	8007940 <__ssputs_r+0x70>
 800797a:	6921      	ldr	r1, [r4, #16]
 800797c:	4650      	mov	r0, sl
 800797e:	f000 fa9b 	bl	8007eb8 <_free_r>
 8007982:	e7c8      	b.n	8007916 <__ssputs_r+0x46>

08007984 <_svfiprintf_r>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	461d      	mov	r5, r3
 800798a:	898b      	ldrh	r3, [r1, #12]
 800798c:	061f      	lsls	r7, r3, #24
 800798e:	b09d      	sub	sp, #116	; 0x74
 8007990:	4680      	mov	r8, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4616      	mov	r6, r2
 8007996:	d50f      	bpl.n	80079b8 <_svfiprintf_r+0x34>
 8007998:	690b      	ldr	r3, [r1, #16]
 800799a:	b96b      	cbnz	r3, 80079b8 <_svfiprintf_r+0x34>
 800799c:	2140      	movs	r1, #64	; 0x40
 800799e:	f000 fad9 	bl	8007f54 <_malloc_r>
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	6120      	str	r0, [r4, #16]
 80079a6:	b928      	cbnz	r0, 80079b4 <_svfiprintf_r+0x30>
 80079a8:	230c      	movs	r3, #12
 80079aa:	f8c8 3000 	str.w	r3, [r8]
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079b2:	e0c8      	b.n	8007b46 <_svfiprintf_r+0x1c2>
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	6163      	str	r3, [r4, #20]
 80079b8:	2300      	movs	r3, #0
 80079ba:	9309      	str	r3, [sp, #36]	; 0x24
 80079bc:	2320      	movs	r3, #32
 80079be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c2:	2330      	movs	r3, #48	; 0x30
 80079c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079c8:	9503      	str	r5, [sp, #12]
 80079ca:	f04f 0b01 	mov.w	fp, #1
 80079ce:	4637      	mov	r7, r6
 80079d0:	463d      	mov	r5, r7
 80079d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079d6:	b10b      	cbz	r3, 80079dc <_svfiprintf_r+0x58>
 80079d8:	2b25      	cmp	r3, #37	; 0x25
 80079da:	d13e      	bne.n	8007a5a <_svfiprintf_r+0xd6>
 80079dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80079e0:	d00b      	beq.n	80079fa <_svfiprintf_r+0x76>
 80079e2:	4653      	mov	r3, sl
 80079e4:	4632      	mov	r2, r6
 80079e6:	4621      	mov	r1, r4
 80079e8:	4640      	mov	r0, r8
 80079ea:	f7ff ff71 	bl	80078d0 <__ssputs_r>
 80079ee:	3001      	adds	r0, #1
 80079f0:	f000 80a4 	beq.w	8007b3c <_svfiprintf_r+0x1b8>
 80079f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f6:	4453      	add	r3, sl
 80079f8:	9309      	str	r3, [sp, #36]	; 0x24
 80079fa:	783b      	ldrb	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 809d 	beq.w	8007b3c <_svfiprintf_r+0x1b8>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	9307      	str	r3, [sp, #28]
 8007a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a14:	931a      	str	r3, [sp, #104]	; 0x68
 8007a16:	462f      	mov	r7, r5
 8007a18:	2205      	movs	r2, #5
 8007a1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a1e:	4850      	ldr	r0, [pc, #320]	; (8007b60 <_svfiprintf_r+0x1dc>)
 8007a20:	f7f8 fbe6 	bl	80001f0 <memchr>
 8007a24:	9b04      	ldr	r3, [sp, #16]
 8007a26:	b9d0      	cbnz	r0, 8007a5e <_svfiprintf_r+0xda>
 8007a28:	06d9      	lsls	r1, r3, #27
 8007a2a:	bf44      	itt	mi
 8007a2c:	2220      	movmi	r2, #32
 8007a2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a32:	071a      	lsls	r2, r3, #28
 8007a34:	bf44      	itt	mi
 8007a36:	222b      	movmi	r2, #43	; 0x2b
 8007a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a3c:	782a      	ldrb	r2, [r5, #0]
 8007a3e:	2a2a      	cmp	r2, #42	; 0x2a
 8007a40:	d015      	beq.n	8007a6e <_svfiprintf_r+0xea>
 8007a42:	9a07      	ldr	r2, [sp, #28]
 8007a44:	462f      	mov	r7, r5
 8007a46:	2000      	movs	r0, #0
 8007a48:	250a      	movs	r5, #10
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a50:	3b30      	subs	r3, #48	; 0x30
 8007a52:	2b09      	cmp	r3, #9
 8007a54:	d94d      	bls.n	8007af2 <_svfiprintf_r+0x16e>
 8007a56:	b1b8      	cbz	r0, 8007a88 <_svfiprintf_r+0x104>
 8007a58:	e00f      	b.n	8007a7a <_svfiprintf_r+0xf6>
 8007a5a:	462f      	mov	r7, r5
 8007a5c:	e7b8      	b.n	80079d0 <_svfiprintf_r+0x4c>
 8007a5e:	4a40      	ldr	r2, [pc, #256]	; (8007b60 <_svfiprintf_r+0x1dc>)
 8007a60:	1a80      	subs	r0, r0, r2
 8007a62:	fa0b f000 	lsl.w	r0, fp, r0
 8007a66:	4318      	orrs	r0, r3
 8007a68:	9004      	str	r0, [sp, #16]
 8007a6a:	463d      	mov	r5, r7
 8007a6c:	e7d3      	b.n	8007a16 <_svfiprintf_r+0x92>
 8007a6e:	9a03      	ldr	r2, [sp, #12]
 8007a70:	1d11      	adds	r1, r2, #4
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	9103      	str	r1, [sp, #12]
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	db01      	blt.n	8007a7e <_svfiprintf_r+0xfa>
 8007a7a:	9207      	str	r2, [sp, #28]
 8007a7c:	e004      	b.n	8007a88 <_svfiprintf_r+0x104>
 8007a7e:	4252      	negs	r2, r2
 8007a80:	f043 0302 	orr.w	r3, r3, #2
 8007a84:	9207      	str	r2, [sp, #28]
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	783b      	ldrb	r3, [r7, #0]
 8007a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a8c:	d10c      	bne.n	8007aa8 <_svfiprintf_r+0x124>
 8007a8e:	787b      	ldrb	r3, [r7, #1]
 8007a90:	2b2a      	cmp	r3, #42	; 0x2a
 8007a92:	d133      	bne.n	8007afc <_svfiprintf_r+0x178>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	1d1a      	adds	r2, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	9203      	str	r2, [sp, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bfb8      	it	lt
 8007aa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007aa4:	3702      	adds	r7, #2
 8007aa6:	9305      	str	r3, [sp, #20]
 8007aa8:	4d2e      	ldr	r5, [pc, #184]	; (8007b64 <_svfiprintf_r+0x1e0>)
 8007aaa:	7839      	ldrb	r1, [r7, #0]
 8007aac:	2203      	movs	r2, #3
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7f8 fb9e 	bl	80001f0 <memchr>
 8007ab4:	b138      	cbz	r0, 8007ac6 <_svfiprintf_r+0x142>
 8007ab6:	2340      	movs	r3, #64	; 0x40
 8007ab8:	1b40      	subs	r0, r0, r5
 8007aba:	fa03 f000 	lsl.w	r0, r3, r0
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	4303      	orrs	r3, r0
 8007ac2:	3701      	adds	r7, #1
 8007ac4:	9304      	str	r3, [sp, #16]
 8007ac6:	7839      	ldrb	r1, [r7, #0]
 8007ac8:	4827      	ldr	r0, [pc, #156]	; (8007b68 <_svfiprintf_r+0x1e4>)
 8007aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ace:	2206      	movs	r2, #6
 8007ad0:	1c7e      	adds	r6, r7, #1
 8007ad2:	f7f8 fb8d 	bl	80001f0 <memchr>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d038      	beq.n	8007b4c <_svfiprintf_r+0x1c8>
 8007ada:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <_svfiprintf_r+0x1e8>)
 8007adc:	bb13      	cbnz	r3, 8007b24 <_svfiprintf_r+0x1a0>
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	3307      	adds	r3, #7
 8007ae2:	f023 0307 	bic.w	r3, r3, #7
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	9303      	str	r3, [sp, #12]
 8007aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aec:	444b      	add	r3, r9
 8007aee:	9309      	str	r3, [sp, #36]	; 0x24
 8007af0:	e76d      	b.n	80079ce <_svfiprintf_r+0x4a>
 8007af2:	fb05 3202 	mla	r2, r5, r2, r3
 8007af6:	2001      	movs	r0, #1
 8007af8:	460f      	mov	r7, r1
 8007afa:	e7a6      	b.n	8007a4a <_svfiprintf_r+0xc6>
 8007afc:	2300      	movs	r3, #0
 8007afe:	3701      	adds	r7, #1
 8007b00:	9305      	str	r3, [sp, #20]
 8007b02:	4619      	mov	r1, r3
 8007b04:	250a      	movs	r5, #10
 8007b06:	4638      	mov	r0, r7
 8007b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b0c:	3a30      	subs	r2, #48	; 0x30
 8007b0e:	2a09      	cmp	r2, #9
 8007b10:	d903      	bls.n	8007b1a <_svfiprintf_r+0x196>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0c8      	beq.n	8007aa8 <_svfiprintf_r+0x124>
 8007b16:	9105      	str	r1, [sp, #20]
 8007b18:	e7c6      	b.n	8007aa8 <_svfiprintf_r+0x124>
 8007b1a:	fb05 2101 	mla	r1, r5, r1, r2
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4607      	mov	r7, r0
 8007b22:	e7f0      	b.n	8007b06 <_svfiprintf_r+0x182>
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <_svfiprintf_r+0x1ec>)
 8007b2c:	a904      	add	r1, sp, #16
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f3af 8000 	nop.w
 8007b34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007b38:	4681      	mov	r9, r0
 8007b3a:	d1d6      	bne.n	8007aea <_svfiprintf_r+0x166>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	065b      	lsls	r3, r3, #25
 8007b40:	f53f af35 	bmi.w	80079ae <_svfiprintf_r+0x2a>
 8007b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b46:	b01d      	add	sp, #116	; 0x74
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4c:	ab03      	add	r3, sp, #12
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	4622      	mov	r2, r4
 8007b52:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <_svfiprintf_r+0x1ec>)
 8007b54:	a904      	add	r1, sp, #16
 8007b56:	4640      	mov	r0, r8
 8007b58:	f000 f882 	bl	8007c60 <_printf_i>
 8007b5c:	e7ea      	b.n	8007b34 <_svfiprintf_r+0x1b0>
 8007b5e:	bf00      	nop
 8007b60:	08008150 	.word	0x08008150
 8007b64:	08008156 	.word	0x08008156
 8007b68:	0800815a 	.word	0x0800815a
 8007b6c:	00000000 	.word	0x00000000
 8007b70:	080078d1 	.word	0x080078d1

08007b74 <_printf_common>:
 8007b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	4691      	mov	r9, r2
 8007b7a:	461f      	mov	r7, r3
 8007b7c:	688a      	ldr	r2, [r1, #8]
 8007b7e:	690b      	ldr	r3, [r1, #16]
 8007b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	bfb8      	it	lt
 8007b88:	4613      	movlt	r3, r2
 8007b8a:	f8c9 3000 	str.w	r3, [r9]
 8007b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b92:	4606      	mov	r6, r0
 8007b94:	460c      	mov	r4, r1
 8007b96:	b112      	cbz	r2, 8007b9e <_printf_common+0x2a>
 8007b98:	3301      	adds	r3, #1
 8007b9a:	f8c9 3000 	str.w	r3, [r9]
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	0699      	lsls	r1, r3, #26
 8007ba2:	bf42      	ittt	mi
 8007ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ba8:	3302      	addmi	r3, #2
 8007baa:	f8c9 3000 	strmi.w	r3, [r9]
 8007bae:	6825      	ldr	r5, [r4, #0]
 8007bb0:	f015 0506 	ands.w	r5, r5, #6
 8007bb4:	d107      	bne.n	8007bc6 <_printf_common+0x52>
 8007bb6:	f104 0a19 	add.w	sl, r4, #25
 8007bba:	68e3      	ldr	r3, [r4, #12]
 8007bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	42ab      	cmp	r3, r5
 8007bc4:	dc28      	bgt.n	8007c18 <_printf_common+0xa4>
 8007bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007bca:	6822      	ldr	r2, [r4, #0]
 8007bcc:	3300      	adds	r3, #0
 8007bce:	bf18      	it	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	0692      	lsls	r2, r2, #26
 8007bd4:	d42d      	bmi.n	8007c32 <_printf_common+0xbe>
 8007bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bda:	4639      	mov	r1, r7
 8007bdc:	4630      	mov	r0, r6
 8007bde:	47c0      	blx	r8
 8007be0:	3001      	adds	r0, #1
 8007be2:	d020      	beq.n	8007c26 <_printf_common+0xb2>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	68e5      	ldr	r5, [r4, #12]
 8007be8:	f8d9 2000 	ldr.w	r2, [r9]
 8007bec:	f003 0306 	and.w	r3, r3, #6
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	bf08      	it	eq
 8007bf4:	1aad      	subeq	r5, r5, r2
 8007bf6:	68a3      	ldr	r3, [r4, #8]
 8007bf8:	6922      	ldr	r2, [r4, #16]
 8007bfa:	bf0c      	ite	eq
 8007bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c00:	2500      	movne	r5, #0
 8007c02:	4293      	cmp	r3, r2
 8007c04:	bfc4      	itt	gt
 8007c06:	1a9b      	subgt	r3, r3, r2
 8007c08:	18ed      	addgt	r5, r5, r3
 8007c0a:	f04f 0900 	mov.w	r9, #0
 8007c0e:	341a      	adds	r4, #26
 8007c10:	454d      	cmp	r5, r9
 8007c12:	d11a      	bne.n	8007c4a <_printf_common+0xd6>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e008      	b.n	8007c2a <_printf_common+0xb6>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4652      	mov	r2, sl
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	4630      	mov	r0, r6
 8007c20:	47c0      	blx	r8
 8007c22:	3001      	adds	r0, #1
 8007c24:	d103      	bne.n	8007c2e <_printf_common+0xba>
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2e:	3501      	adds	r5, #1
 8007c30:	e7c3      	b.n	8007bba <_printf_common+0x46>
 8007c32:	18e1      	adds	r1, r4, r3
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	2030      	movs	r0, #48	; 0x30
 8007c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c3c:	4422      	add	r2, r4
 8007c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c46:	3302      	adds	r3, #2
 8007c48:	e7c5      	b.n	8007bd6 <_printf_common+0x62>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4630      	mov	r0, r6
 8007c52:	47c0      	blx	r8
 8007c54:	3001      	adds	r0, #1
 8007c56:	d0e6      	beq.n	8007c26 <_printf_common+0xb2>
 8007c58:	f109 0901 	add.w	r9, r9, #1
 8007c5c:	e7d8      	b.n	8007c10 <_printf_common+0x9c>
	...

08007c60 <_printf_i>:
 8007c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c68:	460c      	mov	r4, r1
 8007c6a:	7e09      	ldrb	r1, [r1, #24]
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	296e      	cmp	r1, #110	; 0x6e
 8007c70:	4617      	mov	r7, r2
 8007c72:	4606      	mov	r6, r0
 8007c74:	4698      	mov	r8, r3
 8007c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c78:	f000 80b3 	beq.w	8007de2 <_printf_i+0x182>
 8007c7c:	d822      	bhi.n	8007cc4 <_printf_i+0x64>
 8007c7e:	2963      	cmp	r1, #99	; 0x63
 8007c80:	d036      	beq.n	8007cf0 <_printf_i+0x90>
 8007c82:	d80a      	bhi.n	8007c9a <_printf_i+0x3a>
 8007c84:	2900      	cmp	r1, #0
 8007c86:	f000 80b9 	beq.w	8007dfc <_printf_i+0x19c>
 8007c8a:	2958      	cmp	r1, #88	; 0x58
 8007c8c:	f000 8083 	beq.w	8007d96 <_printf_i+0x136>
 8007c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c98:	e032      	b.n	8007d00 <_printf_i+0xa0>
 8007c9a:	2964      	cmp	r1, #100	; 0x64
 8007c9c:	d001      	beq.n	8007ca2 <_printf_i+0x42>
 8007c9e:	2969      	cmp	r1, #105	; 0x69
 8007ca0:	d1f6      	bne.n	8007c90 <_printf_i+0x30>
 8007ca2:	6820      	ldr	r0, [r4, #0]
 8007ca4:	6813      	ldr	r3, [r2, #0]
 8007ca6:	0605      	lsls	r5, r0, #24
 8007ca8:	f103 0104 	add.w	r1, r3, #4
 8007cac:	d52a      	bpl.n	8007d04 <_printf_i+0xa4>
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6011      	str	r1, [r2, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da03      	bge.n	8007cbe <_printf_i+0x5e>
 8007cb6:	222d      	movs	r2, #45	; 0x2d
 8007cb8:	425b      	negs	r3, r3
 8007cba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007cbe:	486f      	ldr	r0, [pc, #444]	; (8007e7c <_printf_i+0x21c>)
 8007cc0:	220a      	movs	r2, #10
 8007cc2:	e039      	b.n	8007d38 <_printf_i+0xd8>
 8007cc4:	2973      	cmp	r1, #115	; 0x73
 8007cc6:	f000 809d 	beq.w	8007e04 <_printf_i+0x1a4>
 8007cca:	d808      	bhi.n	8007cde <_printf_i+0x7e>
 8007ccc:	296f      	cmp	r1, #111	; 0x6f
 8007cce:	d020      	beq.n	8007d12 <_printf_i+0xb2>
 8007cd0:	2970      	cmp	r1, #112	; 0x70
 8007cd2:	d1dd      	bne.n	8007c90 <_printf_i+0x30>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	f043 0320 	orr.w	r3, r3, #32
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	e003      	b.n	8007ce6 <_printf_i+0x86>
 8007cde:	2975      	cmp	r1, #117	; 0x75
 8007ce0:	d017      	beq.n	8007d12 <_printf_i+0xb2>
 8007ce2:	2978      	cmp	r1, #120	; 0x78
 8007ce4:	d1d4      	bne.n	8007c90 <_printf_i+0x30>
 8007ce6:	2378      	movs	r3, #120	; 0x78
 8007ce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cec:	4864      	ldr	r0, [pc, #400]	; (8007e80 <_printf_i+0x220>)
 8007cee:	e055      	b.n	8007d9c <_printf_i+0x13c>
 8007cf0:	6813      	ldr	r3, [r2, #0]
 8007cf2:	1d19      	adds	r1, r3, #4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6011      	str	r1, [r2, #0]
 8007cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d00:	2301      	movs	r3, #1
 8007d02:	e08c      	b.n	8007e1e <_printf_i+0x1be>
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6011      	str	r1, [r2, #0]
 8007d08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d0c:	bf18      	it	ne
 8007d0e:	b21b      	sxthne	r3, r3
 8007d10:	e7cf      	b.n	8007cb2 <_printf_i+0x52>
 8007d12:	6813      	ldr	r3, [r2, #0]
 8007d14:	6825      	ldr	r5, [r4, #0]
 8007d16:	1d18      	adds	r0, r3, #4
 8007d18:	6010      	str	r0, [r2, #0]
 8007d1a:	0628      	lsls	r0, r5, #24
 8007d1c:	d501      	bpl.n	8007d22 <_printf_i+0xc2>
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	e002      	b.n	8007d28 <_printf_i+0xc8>
 8007d22:	0668      	lsls	r0, r5, #25
 8007d24:	d5fb      	bpl.n	8007d1e <_printf_i+0xbe>
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	4854      	ldr	r0, [pc, #336]	; (8007e7c <_printf_i+0x21c>)
 8007d2a:	296f      	cmp	r1, #111	; 0x6f
 8007d2c:	bf14      	ite	ne
 8007d2e:	220a      	movne	r2, #10
 8007d30:	2208      	moveq	r2, #8
 8007d32:	2100      	movs	r1, #0
 8007d34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d38:	6865      	ldr	r5, [r4, #4]
 8007d3a:	60a5      	str	r5, [r4, #8]
 8007d3c:	2d00      	cmp	r5, #0
 8007d3e:	f2c0 8095 	blt.w	8007e6c <_printf_i+0x20c>
 8007d42:	6821      	ldr	r1, [r4, #0]
 8007d44:	f021 0104 	bic.w	r1, r1, #4
 8007d48:	6021      	str	r1, [r4, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d13d      	bne.n	8007dca <_printf_i+0x16a>
 8007d4e:	2d00      	cmp	r5, #0
 8007d50:	f040 808e 	bne.w	8007e70 <_printf_i+0x210>
 8007d54:	4665      	mov	r5, ip
 8007d56:	2a08      	cmp	r2, #8
 8007d58:	d10b      	bne.n	8007d72 <_printf_i+0x112>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	07db      	lsls	r3, r3, #31
 8007d5e:	d508      	bpl.n	8007d72 <_printf_i+0x112>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	6862      	ldr	r2, [r4, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	bfde      	ittt	le
 8007d68:	2330      	movle	r3, #48	; 0x30
 8007d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d6e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d72:	ebac 0305 	sub.w	r3, ip, r5
 8007d76:	6123      	str	r3, [r4, #16]
 8007d78:	f8cd 8000 	str.w	r8, [sp]
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	aa03      	add	r2, sp, #12
 8007d80:	4621      	mov	r1, r4
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff fef6 	bl	8007b74 <_printf_common>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d14d      	bne.n	8007e28 <_printf_i+0x1c8>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d90:	b005      	add	sp, #20
 8007d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d96:	4839      	ldr	r0, [pc, #228]	; (8007e7c <_printf_i+0x21c>)
 8007d98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d9c:	6813      	ldr	r3, [r2, #0]
 8007d9e:	6821      	ldr	r1, [r4, #0]
 8007da0:	1d1d      	adds	r5, r3, #4
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6015      	str	r5, [r2, #0]
 8007da6:	060a      	lsls	r2, r1, #24
 8007da8:	d50b      	bpl.n	8007dc2 <_printf_i+0x162>
 8007daa:	07ca      	lsls	r2, r1, #31
 8007dac:	bf44      	itt	mi
 8007dae:	f041 0120 	orrmi.w	r1, r1, #32
 8007db2:	6021      	strmi	r1, [r4, #0]
 8007db4:	b91b      	cbnz	r3, 8007dbe <_printf_i+0x15e>
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	f022 0220 	bic.w	r2, r2, #32
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	2210      	movs	r2, #16
 8007dc0:	e7b7      	b.n	8007d32 <_printf_i+0xd2>
 8007dc2:	064d      	lsls	r5, r1, #25
 8007dc4:	bf48      	it	mi
 8007dc6:	b29b      	uxthmi	r3, r3
 8007dc8:	e7ef      	b.n	8007daa <_printf_i+0x14a>
 8007dca:	4665      	mov	r5, ip
 8007dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8007dd4:	5cc3      	ldrb	r3, [r0, r3]
 8007dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007dda:	460b      	mov	r3, r1
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	d1f5      	bne.n	8007dcc <_printf_i+0x16c>
 8007de0:	e7b9      	b.n	8007d56 <_printf_i+0xf6>
 8007de2:	6813      	ldr	r3, [r2, #0]
 8007de4:	6825      	ldr	r5, [r4, #0]
 8007de6:	6961      	ldr	r1, [r4, #20]
 8007de8:	1d18      	adds	r0, r3, #4
 8007dea:	6010      	str	r0, [r2, #0]
 8007dec:	0628      	lsls	r0, r5, #24
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	d501      	bpl.n	8007df6 <_printf_i+0x196>
 8007df2:	6019      	str	r1, [r3, #0]
 8007df4:	e002      	b.n	8007dfc <_printf_i+0x19c>
 8007df6:	066a      	lsls	r2, r5, #25
 8007df8:	d5fb      	bpl.n	8007df2 <_printf_i+0x192>
 8007dfa:	8019      	strh	r1, [r3, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	4665      	mov	r5, ip
 8007e02:	e7b9      	b.n	8007d78 <_printf_i+0x118>
 8007e04:	6813      	ldr	r3, [r2, #0]
 8007e06:	1d19      	adds	r1, r3, #4
 8007e08:	6011      	str	r1, [r2, #0]
 8007e0a:	681d      	ldr	r5, [r3, #0]
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4628      	mov	r0, r5
 8007e12:	f7f8 f9ed 	bl	80001f0 <memchr>
 8007e16:	b108      	cbz	r0, 8007e1c <_printf_i+0x1bc>
 8007e18:	1b40      	subs	r0, r0, r5
 8007e1a:	6060      	str	r0, [r4, #4]
 8007e1c:	6863      	ldr	r3, [r4, #4]
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	2300      	movs	r3, #0
 8007e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e26:	e7a7      	b.n	8007d78 <_printf_i+0x118>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	4630      	mov	r0, r6
 8007e30:	47c0      	blx	r8
 8007e32:	3001      	adds	r0, #1
 8007e34:	d0aa      	beq.n	8007d8c <_printf_i+0x12c>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	079b      	lsls	r3, r3, #30
 8007e3a:	d413      	bmi.n	8007e64 <_printf_i+0x204>
 8007e3c:	68e0      	ldr	r0, [r4, #12]
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	4298      	cmp	r0, r3
 8007e42:	bfb8      	it	lt
 8007e44:	4618      	movlt	r0, r3
 8007e46:	e7a3      	b.n	8007d90 <_printf_i+0x130>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	464a      	mov	r2, r9
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4630      	mov	r0, r6
 8007e50:	47c0      	blx	r8
 8007e52:	3001      	adds	r0, #1
 8007e54:	d09a      	beq.n	8007d8c <_printf_i+0x12c>
 8007e56:	3501      	adds	r5, #1
 8007e58:	68e3      	ldr	r3, [r4, #12]
 8007e5a:	9a03      	ldr	r2, [sp, #12]
 8007e5c:	1a9b      	subs	r3, r3, r2
 8007e5e:	42ab      	cmp	r3, r5
 8007e60:	dcf2      	bgt.n	8007e48 <_printf_i+0x1e8>
 8007e62:	e7eb      	b.n	8007e3c <_printf_i+0x1dc>
 8007e64:	2500      	movs	r5, #0
 8007e66:	f104 0919 	add.w	r9, r4, #25
 8007e6a:	e7f5      	b.n	8007e58 <_printf_i+0x1f8>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1ac      	bne.n	8007dca <_printf_i+0x16a>
 8007e70:	7803      	ldrb	r3, [r0, #0]
 8007e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e7a:	e76c      	b.n	8007d56 <_printf_i+0xf6>
 8007e7c:	08008161 	.word	0x08008161
 8007e80:	08008172 	.word	0x08008172

08007e84 <memmove>:
 8007e84:	4288      	cmp	r0, r1
 8007e86:	b510      	push	{r4, lr}
 8007e88:	eb01 0302 	add.w	r3, r1, r2
 8007e8c:	d807      	bhi.n	8007e9e <memmove+0x1a>
 8007e8e:	1e42      	subs	r2, r0, #1
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d00a      	beq.n	8007eaa <memmove+0x26>
 8007e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e9c:	e7f8      	b.n	8007e90 <memmove+0xc>
 8007e9e:	4283      	cmp	r3, r0
 8007ea0:	d9f5      	bls.n	8007e8e <memmove+0xa>
 8007ea2:	1881      	adds	r1, r0, r2
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	42d3      	cmn	r3, r2
 8007ea8:	d100      	bne.n	8007eac <memmove+0x28>
 8007eaa:	bd10      	pop	{r4, pc}
 8007eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007eb4:	e7f7      	b.n	8007ea6 <memmove+0x22>
	...

08007eb8 <_free_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4605      	mov	r5, r0
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d045      	beq.n	8007f4c <_free_r+0x94>
 8007ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec4:	1f0c      	subs	r4, r1, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfb8      	it	lt
 8007eca:	18e4      	addlt	r4, r4, r3
 8007ecc:	f000 f8d2 	bl	8008074 <__malloc_lock>
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <_free_r+0x98>)
 8007ed2:	6813      	ldr	r3, [r2, #0]
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	b933      	cbnz	r3, 8007ee6 <_free_r+0x2e>
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	6014      	str	r4, [r2, #0]
 8007edc:	4628      	mov	r0, r5
 8007ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ee2:	f000 b8c8 	b.w	8008076 <__malloc_unlock>
 8007ee6:	42a3      	cmp	r3, r4
 8007ee8:	d90c      	bls.n	8007f04 <_free_r+0x4c>
 8007eea:	6821      	ldr	r1, [r4, #0]
 8007eec:	1862      	adds	r2, r4, r1
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	bf04      	itt	eq
 8007ef2:	681a      	ldreq	r2, [r3, #0]
 8007ef4:	685b      	ldreq	r3, [r3, #4]
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	bf04      	itt	eq
 8007efa:	1852      	addeq	r2, r2, r1
 8007efc:	6022      	streq	r2, [r4, #0]
 8007efe:	6004      	str	r4, [r0, #0]
 8007f00:	e7ec      	b.n	8007edc <_free_r+0x24>
 8007f02:	4613      	mov	r3, r2
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	b10a      	cbz	r2, 8007f0c <_free_r+0x54>
 8007f08:	42a2      	cmp	r2, r4
 8007f0a:	d9fa      	bls.n	8007f02 <_free_r+0x4a>
 8007f0c:	6819      	ldr	r1, [r3, #0]
 8007f0e:	1858      	adds	r0, r3, r1
 8007f10:	42a0      	cmp	r0, r4
 8007f12:	d10b      	bne.n	8007f2c <_free_r+0x74>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	4401      	add	r1, r0
 8007f18:	1858      	adds	r0, r3, r1
 8007f1a:	4282      	cmp	r2, r0
 8007f1c:	6019      	str	r1, [r3, #0]
 8007f1e:	d1dd      	bne.n	8007edc <_free_r+0x24>
 8007f20:	6810      	ldr	r0, [r2, #0]
 8007f22:	6852      	ldr	r2, [r2, #4]
 8007f24:	605a      	str	r2, [r3, #4]
 8007f26:	4401      	add	r1, r0
 8007f28:	6019      	str	r1, [r3, #0]
 8007f2a:	e7d7      	b.n	8007edc <_free_r+0x24>
 8007f2c:	d902      	bls.n	8007f34 <_free_r+0x7c>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	e7d3      	b.n	8007edc <_free_r+0x24>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	1821      	adds	r1, r4, r0
 8007f38:	428a      	cmp	r2, r1
 8007f3a:	bf04      	itt	eq
 8007f3c:	6811      	ldreq	r1, [r2, #0]
 8007f3e:	6852      	ldreq	r2, [r2, #4]
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	bf04      	itt	eq
 8007f44:	1809      	addeq	r1, r1, r0
 8007f46:	6021      	streq	r1, [r4, #0]
 8007f48:	605c      	str	r4, [r3, #4]
 8007f4a:	e7c7      	b.n	8007edc <_free_r+0x24>
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	20012e08 	.word	0x20012e08

08007f54 <_malloc_r>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	1ccd      	adds	r5, r1, #3
 8007f58:	f025 0503 	bic.w	r5, r5, #3
 8007f5c:	3508      	adds	r5, #8
 8007f5e:	2d0c      	cmp	r5, #12
 8007f60:	bf38      	it	cc
 8007f62:	250c      	movcc	r5, #12
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	4606      	mov	r6, r0
 8007f68:	db01      	blt.n	8007f6e <_malloc_r+0x1a>
 8007f6a:	42a9      	cmp	r1, r5
 8007f6c:	d903      	bls.n	8007f76 <_malloc_r+0x22>
 8007f6e:	230c      	movs	r3, #12
 8007f70:	6033      	str	r3, [r6, #0]
 8007f72:	2000      	movs	r0, #0
 8007f74:	bd70      	pop	{r4, r5, r6, pc}
 8007f76:	f000 f87d 	bl	8008074 <__malloc_lock>
 8007f7a:	4a21      	ldr	r2, [pc, #132]	; (8008000 <_malloc_r+0xac>)
 8007f7c:	6814      	ldr	r4, [r2, #0]
 8007f7e:	4621      	mov	r1, r4
 8007f80:	b991      	cbnz	r1, 8007fa8 <_malloc_r+0x54>
 8007f82:	4c20      	ldr	r4, [pc, #128]	; (8008004 <_malloc_r+0xb0>)
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	b91b      	cbnz	r3, 8007f90 <_malloc_r+0x3c>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f000 f863 	bl	8008054 <_sbrk_r>
 8007f8e:	6020      	str	r0, [r4, #0]
 8007f90:	4629      	mov	r1, r5
 8007f92:	4630      	mov	r0, r6
 8007f94:	f000 f85e 	bl	8008054 <_sbrk_r>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d124      	bne.n	8007fe6 <_malloc_r+0x92>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	6033      	str	r3, [r6, #0]
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f868 	bl	8008076 <__malloc_unlock>
 8007fa6:	e7e4      	b.n	8007f72 <_malloc_r+0x1e>
 8007fa8:	680b      	ldr	r3, [r1, #0]
 8007faa:	1b5b      	subs	r3, r3, r5
 8007fac:	d418      	bmi.n	8007fe0 <_malloc_r+0x8c>
 8007fae:	2b0b      	cmp	r3, #11
 8007fb0:	d90f      	bls.n	8007fd2 <_malloc_r+0x7e>
 8007fb2:	600b      	str	r3, [r1, #0]
 8007fb4:	50cd      	str	r5, [r1, r3]
 8007fb6:	18cc      	adds	r4, r1, r3
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f000 f85c 	bl	8008076 <__malloc_unlock>
 8007fbe:	f104 000b 	add.w	r0, r4, #11
 8007fc2:	1d23      	adds	r3, r4, #4
 8007fc4:	f020 0007 	bic.w	r0, r0, #7
 8007fc8:	1ac3      	subs	r3, r0, r3
 8007fca:	d0d3      	beq.n	8007f74 <_malloc_r+0x20>
 8007fcc:	425a      	negs	r2, r3
 8007fce:	50e2      	str	r2, [r4, r3]
 8007fd0:	e7d0      	b.n	8007f74 <_malloc_r+0x20>
 8007fd2:	428c      	cmp	r4, r1
 8007fd4:	684b      	ldr	r3, [r1, #4]
 8007fd6:	bf16      	itet	ne
 8007fd8:	6063      	strne	r3, [r4, #4]
 8007fda:	6013      	streq	r3, [r2, #0]
 8007fdc:	460c      	movne	r4, r1
 8007fde:	e7eb      	b.n	8007fb8 <_malloc_r+0x64>
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	6849      	ldr	r1, [r1, #4]
 8007fe4:	e7cc      	b.n	8007f80 <_malloc_r+0x2c>
 8007fe6:	1cc4      	adds	r4, r0, #3
 8007fe8:	f024 0403 	bic.w	r4, r4, #3
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d005      	beq.n	8007ffc <_malloc_r+0xa8>
 8007ff0:	1a21      	subs	r1, r4, r0
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f000 f82e 	bl	8008054 <_sbrk_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d0cf      	beq.n	8007f9c <_malloc_r+0x48>
 8007ffc:	6025      	str	r5, [r4, #0]
 8007ffe:	e7db      	b.n	8007fb8 <_malloc_r+0x64>
 8008000:	20012e08 	.word	0x20012e08
 8008004:	20012e0c 	.word	0x20012e0c

08008008 <_realloc_r>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	4607      	mov	r7, r0
 800800c:	4614      	mov	r4, r2
 800800e:	460e      	mov	r6, r1
 8008010:	b921      	cbnz	r1, 800801c <_realloc_r+0x14>
 8008012:	4611      	mov	r1, r2
 8008014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008018:	f7ff bf9c 	b.w	8007f54 <_malloc_r>
 800801c:	b922      	cbnz	r2, 8008028 <_realloc_r+0x20>
 800801e:	f7ff ff4b 	bl	8007eb8 <_free_r>
 8008022:	4625      	mov	r5, r4
 8008024:	4628      	mov	r0, r5
 8008026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008028:	f000 f826 	bl	8008078 <_malloc_usable_size_r>
 800802c:	42a0      	cmp	r0, r4
 800802e:	d20f      	bcs.n	8008050 <_realloc_r+0x48>
 8008030:	4621      	mov	r1, r4
 8008032:	4638      	mov	r0, r7
 8008034:	f7ff ff8e 	bl	8007f54 <_malloc_r>
 8008038:	4605      	mov	r5, r0
 800803a:	2800      	cmp	r0, #0
 800803c:	d0f2      	beq.n	8008024 <_realloc_r+0x1c>
 800803e:	4631      	mov	r1, r6
 8008040:	4622      	mov	r2, r4
 8008042:	f7ff fc11 	bl	8007868 <memcpy>
 8008046:	4631      	mov	r1, r6
 8008048:	4638      	mov	r0, r7
 800804a:	f7ff ff35 	bl	8007eb8 <_free_r>
 800804e:	e7e9      	b.n	8008024 <_realloc_r+0x1c>
 8008050:	4635      	mov	r5, r6
 8008052:	e7e7      	b.n	8008024 <_realloc_r+0x1c>

08008054 <_sbrk_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4c06      	ldr	r4, [pc, #24]	; (8008070 <_sbrk_r+0x1c>)
 8008058:	2300      	movs	r3, #0
 800805a:	4605      	mov	r5, r0
 800805c:	4608      	mov	r0, r1
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	f7ff fb4c 	bl	80076fc <_sbrk>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_sbrk_r+0x1a>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	b103      	cbz	r3, 800806e <_sbrk_r+0x1a>
 800806c:	602b      	str	r3, [r5, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	200134c4 	.word	0x200134c4

08008074 <__malloc_lock>:
 8008074:	4770      	bx	lr

08008076 <__malloc_unlock>:
 8008076:	4770      	bx	lr

08008078 <_malloc_usable_size_r>:
 8008078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807c:	1f18      	subs	r0, r3, #4
 800807e:	2b00      	cmp	r3, #0
 8008080:	bfbc      	itt	lt
 8008082:	580b      	ldrlt	r3, [r1, r0]
 8008084:	18c0      	addlt	r0, r0, r3
 8008086:	4770      	bx	lr

08008088 <_init>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	bf00      	nop
 800808c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808e:	bc08      	pop	{r3}
 8008090:	469e      	mov	lr, r3
 8008092:	4770      	bx	lr

08008094 <_fini>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	bf00      	nop
 8008098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809a:	bc08      	pop	{r3}
 800809c:	469e      	mov	lr, r3
 800809e:	4770      	bx	lr
