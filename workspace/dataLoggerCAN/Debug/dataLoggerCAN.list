
dataLoggerCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a720  0800a720  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a720  0800a720  0001a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a728  0800a728  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013474  20000078  0800a7a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200134ec  0800a7a8  000234ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1e6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dc8  00000000  00000000  0003d28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001738  00000000  00000000  00041058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  00042790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026cef  00000000  00000000  00043cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131e4  00000000  00000000  0006a9df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7345  00000000  00000000  0007dbc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164f08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006350  00000000  00000000  00164f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a554 	.word	0x0800a554

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800a554 	.word	0x0800a554

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fc56 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f009 fa72 	bl	8009aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f009 f908 	bl	80097d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20012e34 	.word	0x20012e34

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20012e34 	.word	0x20012e34

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800062c:	d005      	beq.n	800063a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_Delay+0x40>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800063a:	bf00      	nop
 800063c:	f7ff ffde 	bl	80005fc <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	d8f7      	bhi.n	800063c <HAL_Delay+0x28>
  {
  }
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e0ed      	b.n	8000846 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d102      	bne.n	800067c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f009 f8d6 	bl	8009828 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f022 0202 	bic.w	r2, r2, #2
 800068a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800068c:	f7ff ffb6 	bl	80005fc <HAL_GetTick>
 8000690:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000692:	e012      	b.n	80006ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000694:	f7ff ffb2 	bl	80005fc <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	2b0a      	cmp	r3, #10
 80006a0:	d90b      	bls.n	80006ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2205      	movs	r2, #5
 80006b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e0c5      	b.n	8000846 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1e5      	bne.n	8000694 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0201 	orr.w	r2, r2, #1
 80006d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006d8:	f7ff ff90 	bl	80005fc <HAL_GetTick>
 80006dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006de:	e012      	b.n	8000706 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006e0:	f7ff ff8c 	bl	80005fc <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	d90b      	bls.n	8000706 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2205      	movs	r2, #5
 80006fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e09f      	b.n	8000846 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0e5      	beq.n	80006e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7e1b      	ldrb	r3, [r3, #24]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d108      	bne.n	800072e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e007      	b.n	800073e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800073c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7e5b      	ldrb	r3, [r3, #25]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d108      	bne.n	8000758 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e007      	b.n	8000768 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000766:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7e9b      	ldrb	r3, [r3, #26]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d108      	bne.n	8000782 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 0220 	orr.w	r2, r2, #32
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e007      	b.n	8000792 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f022 0220 	bic.w	r2, r2, #32
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7edb      	ldrb	r3, [r3, #27]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d108      	bne.n	80007ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f022 0210 	bic.w	r2, r2, #16
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	e007      	b.n	80007bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0210 	orr.w	r2, r2, #16
 80007ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7f1b      	ldrb	r3, [r3, #28]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d108      	bne.n	80007d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f042 0208 	orr.w	r2, r2, #8
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e007      	b.n	80007e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f022 0208 	bic.w	r2, r2, #8
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7f5b      	ldrb	r3, [r3, #29]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d108      	bne.n	8000800 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f042 0204 	orr.w	r2, r2, #4
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e007      	b.n	8000810 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f022 0204 	bic.w	r2, r2, #4
 800080e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	431a      	orrs	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	431a      	orrs	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	ea42 0103 	orr.w	r1, r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	430a      	orrs	r2, r1
 8000834:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2201      	movs	r2, #1
 8000840:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000866:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d003      	beq.n	8000876 <HAL_CAN_ConfigFilter+0x26>
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	2b02      	cmp	r3, #2
 8000872:	f040 80be 	bne.w	80009f2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000876:	4b65      	ldr	r3, [pc, #404]	; (8000a0c <HAL_CAN_ConfigFilter+0x1bc>)
 8000878:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000880:	f043 0201 	orr.w	r2, r3, #1
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000890:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	431a      	orrs	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	2201      	movs	r2, #1
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	43db      	mvns	r3, r3
 80008c8:	401a      	ands	r2, r3
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d123      	bne.n	8000920 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3248      	adds	r2, #72	; 0x48
 8000900:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000914:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	3348      	adds	r3, #72	; 0x48
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d122      	bne.n	800096e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	431a      	orrs	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000948:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3248      	adds	r2, #72	; 0x48
 800094e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000962:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000964:	6979      	ldr	r1, [r7, #20]
 8000966:	3348      	adds	r3, #72	; 0x48
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	440b      	add	r3, r1
 800096c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d109      	bne.n	800098a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	43db      	mvns	r3, r3
 8000980:	401a      	ands	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000988:	e007      	b.n	800099a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	431a      	orrs	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d109      	bne.n	80009b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	401a      	ands	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009b4:	e007      	b.n	80009c6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	431a      	orrs	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	6a1b      	ldr	r3, [r3, #32]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d107      	bne.n	80009de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	431a      	orrs	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009e4:	f023 0201 	bic.w	r2, r3, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e006      	b.n	8000a00 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
  }
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	371c      	adds	r7, #28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40006400 	.word	0x40006400

08000a10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d12e      	bne.n	8000a82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2202      	movs	r2, #2
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0201 	bic.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a3c:	f7ff fdde 	bl	80005fc <HAL_GetTick>
 8000a40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a42:	e012      	b.n	8000a6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a44:	f7ff fdda 	bl	80005fc <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d90b      	bls.n	8000a6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2205      	movs	r2, #5
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e012      	b.n	8000a90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e5      	bne.n	8000a44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e006      	b.n	8000a90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
  }
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d003      	beq.n	8000abc <HAL_CAN_GetRxMessage+0x24>
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	f040 80f4 	bne.w	8000ca4 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10e      	bne.n	8000ae0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d116      	bne.n	8000afe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e0e8      	b.n	8000cb2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d107      	bne.n	8000afe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e0d9      	b.n	8000cb2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	331b      	adds	r3, #27
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	4413      	add	r3, r2
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0204 	and.w	r2, r3, #4
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10c      	bne.n	8000b36 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	331b      	adds	r3, #27
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	4413      	add	r3, r2
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	0d5b      	lsrs	r3, r3, #21
 8000b2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	e00b      	b.n	8000b4e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	331b      	adds	r3, #27
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	4413      	add	r3, r2
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	331b      	adds	r3, #27
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	4413      	add	r3, r2
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	f003 0201 	and.w	r2, r3, #1
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	331b      	adds	r3, #27
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	4413      	add	r3, r2
 8000b72:	3304      	adds	r3, #4
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 020f 	and.w	r2, r3, #15
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	331b      	adds	r3, #27
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	4413      	add	r3, r2
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	331b      	adds	r3, #27
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	0c1b      	lsrs	r3, r3, #16
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	4413      	add	r3, r2
 8000bce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	0a1a      	lsrs	r2, r3, #8
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	4413      	add	r3, r2
 8000be8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	0c1a      	lsrs	r2, r3, #16
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	4413      	add	r3, r2
 8000c02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	0e1a      	lsrs	r2, r3, #24
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	4413      	add	r3, r2
 8000c1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3304      	adds	r3, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	4413      	add	r3, r2
 8000c34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	0a1a      	lsrs	r2, r3, #8
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	3305      	adds	r3, #5
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	011b      	lsls	r3, r3, #4
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	0c1a      	lsrs	r2, r3, #16
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	3306      	adds	r3, #6
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	4413      	add	r3, r2
 8000c68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	0e1a      	lsrs	r2, r3, #24
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3307      	adds	r3, #7
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d108      	bne.n	8000c90 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 0220 	orr.w	r2, r2, #32
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	e007      	b.n	8000ca0 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0220 	orr.w	r2, r2, #32
 8000c9e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e006      	b.n	8000cb2 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
  }
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	371c      	adds	r7, #28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d002      	beq.n	8000ce0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d10f      	bne.n	8000d00 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d106      	bne.n	8000cf4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e005      	b.n	8000d00 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff fb8c 	bl	80005fc <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e099      	b.n	8001024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2202      	movs	r2, #2
 8000efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f10:	e00f      	b.n	8000f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f12:	f7ff fb73 	bl	80005fc <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d908      	bls.n	8000f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e078      	b.n	8001024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e8      	bne.n	8000f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <HAL_DMA_Init+0x158>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d107      	bne.n	8000f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4313      	orrs	r3, r2
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f023 0307 	bic.w	r3, r3, #7
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d117      	bne.n	8000ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00e      	beq.n	8000ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f9e9 	bl	80013b0 <DMA_CheckFifoParam>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2240      	movs	r2, #64	; 0x40
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e016      	b.n	8001024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f9a0 	bl	8001344 <DMA_CalcBaseAndBitshift>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100c:	223f      	movs	r2, #63	; 0x3f
 800100e:	409a      	lsls	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	f010803f 	.word	0xf010803f

08001030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800103c:	4b92      	ldr	r3, [pc, #584]	; (8001288 <HAL_DMA_IRQHandler+0x258>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a92      	ldr	r2, [pc, #584]	; (800128c <HAL_DMA_IRQHandler+0x25c>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0a9b      	lsrs	r3, r3, #10
 8001048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105a:	2208      	movs	r2, #8
 800105c:	409a      	lsls	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d01a      	beq.n	800109c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0204 	bic.w	r2, r2, #4
 8001082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	2208      	movs	r2, #8
 800108a:	409a      	lsls	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	2201      	movs	r2, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	2201      	movs	r2, #1
 80010c0:	409a      	lsls	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ca:	f043 0202 	orr.w	r2, r3, #2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d6:	2204      	movs	r2, #4
 80010d8:	409a      	lsls	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d012      	beq.n	8001108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	2204      	movs	r2, #4
 80010f6:	409a      	lsls	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001100:	f043 0204 	orr.w	r2, r3, #4
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110c:	2210      	movs	r2, #16
 800110e:	409a      	lsls	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d043      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d03c      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112a:	2210      	movs	r2, #16
 800112c:	409a      	lsls	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d018      	beq.n	8001172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d108      	bne.n	8001160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d024      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	4798      	blx	r3
 800115e:	e01f      	b.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01b      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
 8001170:	e016      	b.n	80011a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0208 	bic.w	r2, r2, #8
 800118e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	2220      	movs	r2, #32
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 808e 	beq.w	80012ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 8086 	beq.w	80012ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c6:	2220      	movs	r2, #32
 80011c8:	409a      	lsls	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d136      	bne.n	8001248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0216 	bic.w	r2, r2, #22
 80011e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695a      	ldr	r2, [r3, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <HAL_DMA_IRQHandler+0x1da>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0208 	bic.w	r2, r2, #8
 8001218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	223f      	movs	r2, #63	; 0x3f
 8001220:	409a      	lsls	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123a:	2b00      	cmp	r3, #0
 800123c:	d07d      	beq.n	800133a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
        }
        return;
 8001246:	e078      	b.n	800133a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d01c      	beq.n	8001290 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d108      	bne.n	8001276 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	2b00      	cmp	r3, #0
 800126a:	d030      	beq.n	80012ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	4798      	blx	r3
 8001274:	e02b      	b.n	80012ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	2b00      	cmp	r3, #0
 800127c:	d027      	beq.n	80012ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	4798      	blx	r3
 8001286:	e022      	b.n	80012ce <HAL_DMA_IRQHandler+0x29e>
 8001288:	20000010 	.word	0x20000010
 800128c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0210 	bic.w	r2, r2, #16
 80012ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d032      	beq.n	800133c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d022      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0201 	bic.w	r2, r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	429a      	cmp	r2, r3
 8001304:	d307      	bcc.n	8001316 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f2      	bne.n	80012fa <HAL_DMA_IRQHandler+0x2ca>
 8001314:	e000      	b.n	8001318 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001316:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
 8001338:	e000      	b.n	800133c <HAL_DMA_IRQHandler+0x30c>
        return;
 800133a:	bf00      	nop
    }
  }
}
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop

08001344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3b10      	subs	r3, #16
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <DMA_CalcBaseAndBitshift+0x68>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d909      	bls.n	8001386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	1d1a      	adds	r2, r3, #4
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
 8001384:	e007      	b.n	8001396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800138e:	f023 0303 	bic.w	r3, r3, #3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	aaaaaaab 	.word	0xaaaaaaab
 80013ac:	0800a638 	.word	0x0800a638

080013b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11f      	bne.n	800140a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d855      	bhi.n	800147c <DMA_CheckFifoParam+0xcc>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <DMA_CheckFifoParam+0x28>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	080013fb 	.word	0x080013fb
 80013e0:	080013e9 	.word	0x080013e9
 80013e4:	0800147d 	.word	0x0800147d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d045      	beq.n	8001480 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013f8:	e042      	b.n	8001480 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001402:	d13f      	bne.n	8001484 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001408:	e03c      	b.n	8001484 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001412:	d121      	bne.n	8001458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d836      	bhi.n	8001488 <DMA_CheckFifoParam+0xd8>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <DMA_CheckFifoParam+0x70>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001431 	.word	0x08001431
 8001424:	08001437 	.word	0x08001437
 8001428:	08001431 	.word	0x08001431
 800142c:	08001449 	.word	0x08001449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
      break;
 8001434:	e02f      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d024      	beq.n	800148c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001446:	e021      	b.n	800148c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001450:	d11e      	bne.n	8001490 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001456:	e01b      	b.n	8001490 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d902      	bls.n	8001464 <DMA_CheckFifoParam+0xb4>
 800145e:	2b03      	cmp	r3, #3
 8001460:	d003      	beq.n	800146a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001462:	e018      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
      break;
 8001468:	e015      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00e      	beq.n	8001494 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
      break;
 800147a:	e00b      	b.n	8001494 <DMA_CheckFifoParam+0xe4>
      break;
 800147c:	bf00      	nop
 800147e:	e00a      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      break;
 8001480:	bf00      	nop
 8001482:	e008      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      break;
 8001484:	bf00      	nop
 8001486:	e006      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      break;
 8001488:	bf00      	nop
 800148a:	e004      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      break;
 800148c:	bf00      	nop
 800148e:	e002      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      break;   
 8001490:	bf00      	nop
 8001492:	e000      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      break;
 8001494:	bf00      	nop
    }
  } 
  
  return status; 
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e177      	b.n	80017b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 8166 	bne.w	80017aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x4a>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d123      	bne.n	8001536 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	69b9      	ldr	r1, [r7, #24]
 8001532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0203 	and.w	r2, r3, #3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d00b      	beq.n	800158a <HAL_GPIO_Init+0xe6>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800157e:	2b11      	cmp	r3, #17
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b12      	cmp	r3, #18
 8001588:	d130      	bne.n	80015ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0201 	and.w	r2, r3, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80c0 	beq.w	80017aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <HAL_GPIO_Init+0x320>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a64      	ldr	r2, [pc, #400]	; (80017c4 <HAL_GPIO_Init+0x320>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_GPIO_Init+0x320>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a60      	ldr	r2, [pc, #384]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_GPIO_Init+0x328>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d037      	beq.n	80016e2 <HAL_GPIO_Init+0x23e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a56      	ldr	r2, [pc, #344]	; (80017d0 <HAL_GPIO_Init+0x32c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d031      	beq.n	80016de <HAL_GPIO_Init+0x23a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a55      	ldr	r2, [pc, #340]	; (80017d4 <HAL_GPIO_Init+0x330>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d02b      	beq.n	80016da <HAL_GPIO_Init+0x236>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a54      	ldr	r2, [pc, #336]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d025      	beq.n	80016d6 <HAL_GPIO_Init+0x232>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a53      	ldr	r2, [pc, #332]	; (80017dc <HAL_GPIO_Init+0x338>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01f      	beq.n	80016d2 <HAL_GPIO_Init+0x22e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_GPIO_Init+0x33c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d019      	beq.n	80016ce <HAL_GPIO_Init+0x22a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a51      	ldr	r2, [pc, #324]	; (80017e4 <HAL_GPIO_Init+0x340>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <HAL_GPIO_Init+0x344>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00d      	beq.n	80016c6 <HAL_GPIO_Init+0x222>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_GPIO_Init+0x348>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0x21e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	; (80017f0 <HAL_GPIO_Init+0x34c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_GPIO_Init+0x21a>
 80016ba:	2309      	movs	r3, #9
 80016bc:	e012      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016be:	230a      	movs	r3, #10
 80016c0:	e010      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016c2:	2308      	movs	r3, #8
 80016c4:	e00e      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016c6:	2307      	movs	r3, #7
 80016c8:	e00c      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016ca:	2306      	movs	r3, #6
 80016cc:	e00a      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016ce:	2305      	movs	r3, #5
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x240>
 80016e2:	2300      	movs	r3, #0
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f4:	4934      	ldr	r1, [pc, #208]	; (80017c8 <HAL_GPIO_Init+0x324>)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001702:	4b3c      	ldr	r3, [pc, #240]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001726:	4a33      	ldr	r2, [pc, #204]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <HAL_GPIO_Init+0x350>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001750:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_GPIO_Init+0x350>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_GPIO_Init+0x350>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	f67f ae84 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b8:	bf00      	nop
 80017ba:	3724      	adds	r7, #36	; 0x24
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40021c00 	.word	0x40021c00
 80017ec:	40022000 	.word	0x40022000
 80017f0:	40022400 	.word	0x40022400
 80017f4:	40013c00 	.word	0x40013c00

080017f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	401a      	ands	r2, r3
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	429a      	cmp	r2, r3
 8001872:	d104      	bne.n	800187e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	041a      	lsls	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800187c:	e002      	b.n	8001884 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e22d      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d075      	beq.n	800199a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ae:	4ba3      	ldr	r3, [pc, #652]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d00c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ba:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d112      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d2:	d10b      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d05b      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d157      	bne.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e208      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0x74>
 80018f6:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a83      	ldr	r2, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a80      	ldr	r2, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7fe fe58 	bl	80005fc <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7fe fe54 	bl	80005fc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1cd      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xc0>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe fe44 	bl	80005fc <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7fe fe40 	bl	80005fc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1b9      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e18d      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4952      	ldr	r1, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7fe fdf9 	bl	80005fc <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7fe fdf5 	bl	80005fc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e16e      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4940      	ldr	r1, [pc, #256]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7fe fdd8 	bl	80005fc <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7fe fdd4 	bl	80005fc <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e14d      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d030      	beq.n	8001adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d016      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7fe fdb8 	bl	80005fc <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7fe fdb4 	bl	80005fc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e12d      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x200>
 8001aae:	e015      	b.n	8001adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe fda1 	bl	80005fc <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7fe fd9d 	bl	80005fc <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e116      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a0 	beq.w	8001c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d121      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7fe fd63 	bl	80005fc <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e011      	b.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
 8001b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7fe fd56 	bl	80005fc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0cf      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x478>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
 8001b72:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7e:	e01c      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b60      	ldr	r3, [pc, #384]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a5c      	ldr	r2, [pc, #368]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a59      	ldr	r2, [pc, #356]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a56      	ldr	r2, [pc, #344]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7fe fd1b 	bl	80005fc <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe fd17 	bl	80005fc <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e08e      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ee      	beq.n	8001bca <HAL_RCC_OscConfig+0x33a>
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7fe fd05 	bl	80005fc <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7fe fd01 	bl	80005fc <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e078      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a3a      	ldr	r2, [pc, #232]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d064      	beq.n	8001cfc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d05c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d141      	bne.n	8001cca <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x480>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe fcd6 	bl	80005fc <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe fcd2 	bl	80005fc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e04b      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	491d      	ldr	r1, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_RCC_OscConfig+0x480>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fcab 	bl	80005fc <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fca7 	bl	80005fc <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e020      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x41a>
 8001cc8:	e018      	b.n	8001cfc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_RCC_OscConfig+0x480>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fc94 	bl	80005fc <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe fc90 	bl	80005fc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_RCC_OscConfig+0x47c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x448>
 8001cf6:	e001      	b.n	8001cfc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	42470060 	.word	0x42470060

08001d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0ca      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d90c      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0b6      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d020      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d80:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	494c      	ldr	r1, [pc, #304]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d044      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07d      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06d      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e065      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 0203 	bic.w	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4933      	ldr	r1, [pc, #204]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e04:	f7fe fbfa 	bl	80005fc <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f7fe fbf6 	bl	80005fc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e04d      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 020c 	and.w	r2, r3, #12
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1eb      	bne.n	8001e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d20c      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e030      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4915      	ldr	r1, [pc, #84]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	490d      	ldr	r1, [pc, #52]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e9a:	f000 f81d 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1b8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f007 fdf6 	bl	8009aa8 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023c00 	.word	0x40023c00
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	0800a6d4 	.word	0x0800a6d4
 8001ed4:	20000010 	.word	0x20000010

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d007      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x32>
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d008      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x38>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 80b4 	bne.w	800206c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4b5e      	ldr	r3, [pc, #376]	; (8002080 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f06:	60bb      	str	r3, [r7, #8]
       break;
 8001f08:	e0b3      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0a:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f0c:	60bb      	str	r3, [r7, #8]
      break;
 8001f0e:	e0b0      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f10:	4b5a      	ldr	r3, [pc, #360]	; (800207c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f1a:	4b58      	ldr	r3, [pc, #352]	; (800207c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d04a      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b55      	ldr	r3, [pc, #340]	; (800207c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	f04f 0400 	mov.w	r4, #0
 8001f30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	ea03 0501 	and.w	r5, r3, r1
 8001f3c:	ea04 0602 	and.w	r6, r4, r2
 8001f40:	4629      	mov	r1, r5
 8001f42:	4632      	mov	r2, r6
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	f04f 0400 	mov.w	r4, #0
 8001f4c:	0154      	lsls	r4, r2, #5
 8001f4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f52:	014b      	lsls	r3, r1, #5
 8001f54:	4619      	mov	r1, r3
 8001f56:	4622      	mov	r2, r4
 8001f58:	1b49      	subs	r1, r1, r5
 8001f5a:	eb62 0206 	sbc.w	r2, r2, r6
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	f04f 0400 	mov.w	r4, #0
 8001f66:	0194      	lsls	r4, r2, #6
 8001f68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f6c:	018b      	lsls	r3, r1, #6
 8001f6e:	1a5b      	subs	r3, r3, r1
 8001f70:	eb64 0402 	sbc.w	r4, r4, r2
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	00e2      	lsls	r2, r4, #3
 8001f7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f82:	00d9      	lsls	r1, r3, #3
 8001f84:	460b      	mov	r3, r1
 8001f86:	4614      	mov	r4, r2
 8001f88:	195b      	adds	r3, r3, r5
 8001f8a:	eb44 0406 	adc.w	r4, r4, r6
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	0262      	lsls	r2, r4, #9
 8001f98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f9c:	0259      	lsls	r1, r3, #9
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f04f 0400 	mov.w	r4, #0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4623      	mov	r3, r4
 8001fb0:	f7fe f96e 	bl	8000290 <__aeabi_uldivmod>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e049      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	f04f 0400 	mov.w	r4, #0
 8001fc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	ea03 0501 	and.w	r5, r3, r1
 8001fd2:	ea04 0602 	and.w	r6, r4, r2
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	4632      	mov	r2, r6
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	f04f 0400 	mov.w	r4, #0
 8001fe2:	0154      	lsls	r4, r2, #5
 8001fe4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fe8:	014b      	lsls	r3, r1, #5
 8001fea:	4619      	mov	r1, r3
 8001fec:	4622      	mov	r2, r4
 8001fee:	1b49      	subs	r1, r1, r5
 8001ff0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	f04f 0400 	mov.w	r4, #0
 8001ffc:	0194      	lsls	r4, r2, #6
 8001ffe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002002:	018b      	lsls	r3, r1, #6
 8002004:	1a5b      	subs	r3, r3, r1
 8002006:	eb64 0402 	sbc.w	r4, r4, r2
 800200a:	f04f 0100 	mov.w	r1, #0
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	00e2      	lsls	r2, r4, #3
 8002014:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002018:	00d9      	lsls	r1, r3, #3
 800201a:	460b      	mov	r3, r1
 800201c:	4614      	mov	r4, r2
 800201e:	195b      	adds	r3, r3, r5
 8002020:	eb44 0406 	adc.w	r4, r4, r6
 8002024:	f04f 0100 	mov.w	r1, #0
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	02a2      	lsls	r2, r4, #10
 800202e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002032:	0299      	lsls	r1, r3, #10
 8002034:	460b      	mov	r3, r1
 8002036:	4614      	mov	r4, r2
 8002038:	4618      	mov	r0, r3
 800203a:	4621      	mov	r1, r4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f04f 0400 	mov.w	r4, #0
 8002042:	461a      	mov	r2, r3
 8002044:	4623      	mov	r3, r4
 8002046:	f7fe f923 	bl	8000290 <__aeabi_uldivmod>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	60bb      	str	r3, [r7, #8]
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800206e:	60bb      	str	r3, [r7, #8]
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	68bb      	ldr	r3, [r7, #8]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000010 	.word	0x20000010

080020a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4601      	mov	r1, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0b5b      	lsrs	r3, r3, #13
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	0800a6e4 	.word	0x0800a6e4

080020c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	220f      	movs	r2, #15
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_RCC_GetClockConfig+0x60>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 020f 	and.w	r2, r3, #15
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e01d      	b.n	800217a <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f007 fbb1 	bl	80098b8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2203      	movs	r2, #3
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f810 	bl	8002184 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af04      	add	r7, sp, #16
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80021a4:	2376      	movs	r3, #118	; 0x76
 80021a6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681d      	ldr	r5, [r3, #0]
 80021ac:	466c      	mov	r4, sp
 80021ae:	f107 0318 	add.w	r3, r7, #24
 80021b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c0:	4628      	mov	r0, r5
 80021c2:	f001 f98d 	bl	80034e0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_SD_InitCard+0xb4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 f9ce 	bl	8003572 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_SD_InitCard+0xb4>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 80021dc:	2002      	movs	r0, #2
 80021de:	f7fe fa19 	bl	8000614 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fe6c 	bl	8002ec0 <SD_PowerON>
 80021e8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e013      	b.n	8002230 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fd90 	bl	8002d2e <SD_InitCard>
 800220e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bdb0      	pop	{r4, r5, r7, pc}
 8002238:	422580a0 	.word	0x422580a0

0800223c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b08f      	sub	sp, #60	; 0x3c
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800224e:	f7fe f9d5 	bl	80005fc <HAL_GetTick>
 8002252:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e177      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	f040 816a 	bne.w	8002554 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	441a      	add	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	429a      	cmp	r2, r3
 8002292:	d907      	bls.n	80022a4 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e15e      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2203      	movs	r2, #3
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2200      	movs	r2, #0
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d002      	beq.n	80022c2 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 f9e5 	bl	800369a <SDMMC_CmdBlockLength>
 80022d0:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80022d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d010      	beq.n	80022fa <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e8:	431a      	orrs	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e133      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fe:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002306:	2390      	movs	r3, #144	; 0x90
 8002308:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002312:	2301      	movs	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f107 0210 	add.w	r2, r7, #16
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f98e 	bl	8003642 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d90a      	bls.n	8002342 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2202      	movs	r2, #2
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f001 f9f6 	bl	800372a <SDMMC_CmdReadMultiBlock>
 800233e:	6378      	str	r0, [r7, #52]	; 0x34
 8002340:	e009      	b.n	8002356 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f001 f9c7 	bl	80036e2 <SDMMC_CmdReadSingleBlock>
 8002354:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002358:	2b00      	cmp	r3, #0
 800235a:	d04a      	beq.n	80023f2 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002364:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236c:	431a      	orrs	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0f1      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d016      	beq.n	80023ba <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
 8002390:	e00d      	b.n	80023ae <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239c:	18d4      	adds	r4, r2, r3
 800239e:	4608      	mov	r0, r1
 80023a0:	f001 f8c9 	bl	8003536 <SDIO_ReadFIFO>
 80023a4:	4603      	mov	r3, r0
 80023a6:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	3301      	adds	r3, #1
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	d9ee      	bls.n	8002392 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	3320      	adds	r3, #32
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_SD_ReadBlocks+0x194>
 80023c0:	f7fe f91c 	bl	80005fc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d810      	bhi.n	80023f2 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0b7      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f8:	f240 332a 	movw	r3, #810	; 0x32a
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0bd      	beq.n	800237e <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_SD_ReadBlocks+0x216>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d91d      	bls.n	8002452 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	2b03      	cmp	r3, #3
 800241c:	d019      	beq.n	8002452 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f9ee 	bl	8003804 <SDMMC_CmdStopTransfer>
 8002428:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242c:	2b00      	cmp	r3, #0
 800242e:	d010      	beq.n	8002452 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800243e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e087      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d010      	beq.n	8002482 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	f043 0208 	orr.w	r2, r3, #8
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06f      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	f043 0202 	orr.w	r2, r3, #2
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e057      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d037      	beq.n	8002530 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e03f      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f825 	bl	8003536 <SDIO_ReadFIFO>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	3304      	adds	r3, #4
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80024f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_SD_ReadBlocks+0x2d2>
 80024fe:	f7fe f87d 	bl	80005fc <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800250a:	429a      	cmp	r2, r3
 800250c:	d810      	bhi.n	8002530 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e018      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1d1      	bne.n	80024e2 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e006      	b.n	8002562 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	373c      	adds	r7, #60	; 0x3c
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}

0800256a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b08e      	sub	sp, #56	; 0x38
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7fe f83e 	bl	80005fc <HAL_GetTick>
 8002580:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e148      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f040 813b 	bne.w	8002824 <HAL_SD_WriteBlocks+0x2ba>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	441a      	add	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	429a      	cmp	r2, r3
 80025c0:	d907      	bls.n	80025d2 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e12f      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2203      	movs	r2, #3
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d002      	beq.n	80025f0 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	025b      	lsls	r3, r3, #9
 80025ee:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 f84e 	bl	800369a <SDMMC_CmdBlockLength>
 80025fe:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	431a      	orrs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e104      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d90a      	bls.n	8002644 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	f001 f8bd 	bl	80037ba <SDMMC_CmdWriteMultiBlock>
 8002640:	6378      	str	r0, [r7, #52]	; 0x34
 8002642:	e009      	b.n	8002658 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2210      	movs	r2, #16
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f88e 	bl	8003772 <SDMMC_CmdWriteSingleBlock>
 8002656:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265a:	2b00      	cmp	r3, #0
 800265c:	d010      	beq.n	8002680 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	431a      	orrs	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0d8      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002684:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	025b      	lsls	r3, r3, #9
 800268a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800268c:	2390      	movs	r3, #144	; 0x90
 800268e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002698:	2301      	movs	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f107 0210 	add.w	r2, r7, #16
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 ffcb 	bl	8003642 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80026ac:	e037      	b.n	800271e <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d014      	beq.n	80026e6 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80026bc:	2300      	movs	r3, #0
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
 80026c0:	e00b      	b.n	80026da <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026cc:	4413      	add	r3, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f000 ff3e 	bl	8003550 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	3301      	adds	r3, #1
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	2b07      	cmp	r3, #7
 80026de:	d9f0      	bls.n	80026c2 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	3320      	adds	r3, #32
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80026e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_SD_WriteBlocks+0x192>
 80026ec:	f7fd ff86 	bl	80005fc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d810      	bhi.n	800271e <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e089      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002724:	f240 331a 	movw	r3, #794	; 0x31a
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0bf      	beq.n	80026ae <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_SD_WriteBlocks+0x214>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d91d      	bls.n	800277e <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	2b03      	cmp	r3, #3
 8002748:	d019      	beq.n	800277e <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f001 f858 	bl	8003804 <SDMMC_CmdStopTransfer>
 8002754:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	2b00      	cmp	r3, #0
 800275a:	d010      	beq.n	800277e <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e059      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	f043 0208 	orr.w	r2, r3, #8
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e041      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	f043 0202 	orr.w	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e029      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d010      	beq.n	800280e <HAL_SD_WriteBlocks+0x2a4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	f043 0210 	orr.w	r2, r3, #16
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e011      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e006      	b.n	8002832 <HAL_SD_WriteBlocks+0x2c8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	3738      	adds	r7, #56	; 0x38
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284c:	0e1b      	lsrs	r3, r3, #24
 800284e:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	b2da      	uxtb	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	b2da      	uxtb	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002882:	0c1b      	lsrs	r3, r3, #16
 8002884:	b2db      	uxtb	r3, r3
 8002886:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	b2db      	uxtb	r3, r3
 8002898:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b6:	0e1b      	lsrs	r3, r3, #24
 80028b8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ca:	0c1b      	lsrs	r3, r3, #16
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	88db      	ldrh	r3, [r3, #6]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	09db      	lsrs	r3, r3, #7
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	b2da      	uxtb	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	b2da      	uxtb	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 8087 	bne.w	8002a60 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	029b      	lsls	r3, r3, #10
 8002956:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002962:	b2db      	uxtb	r3, r3
 8002964:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	431a      	orrs	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002978:	0e1b      	lsrs	r3, r3, #24
 800297a:	b2db      	uxtb	r3, r3
 800297c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	431a      	orrs	r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	08db      	lsrs	r3, r3, #3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	b2da      	uxtb	r2, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f003 0306 	and.w	r3, r3, #6
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	7e1b      	ldrb	r3, [r3, #24]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	09db      	lsrs	r3, r3, #7
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4313      	orrs	r3, r2
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3302      	adds	r3, #2
 8002a20:	2201      	movs	r2, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a2a:	fb02 f203 	mul.w	r2, r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7a1b      	ldrb	r3, [r3, #8]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	fa03 f202 	lsl.w	r2, r3, r2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a4c:	0a52      	lsrs	r2, r2, #9
 8002a4e:	fb02 f203 	mul.w	r2, r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5c:	661a      	str	r2, [r3, #96]	; 0x60
 8002a5e:	e04d      	b.n	8002afc <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d138      	bne.n	8002ada <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a80:	0e1b      	lsrs	r3, r3, #24
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	029a      	lsls	r2, r3, #10
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
 8002ad8:	e010      	b.n	8002afc <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0c1      	b.n	8002c80 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	7e9b      	ldrb	r3, [r3, #26]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	09db      	lsrs	r3, r3, #7
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	0e1b      	lsrs	r3, r3, #24
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	09db      	lsrs	r3, r3, #7
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	0c1b      	lsrs	r3, r3, #16
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	7fdb      	ldrb	r3, [r3, #31]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	09db      	lsrs	r3, r3, #7
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8002cec:	2304      	movs	r3, #4
 8002cee:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f986 	bl	8003010 <SD_SendStatus>
 8002d04:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	0a5b      	lsrs	r3, r3, #9
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d2e:	b5b0      	push	{r4, r5, r7, lr}
 8002d30:	b094      	sub	sp, #80	; 0x50
 8002d32:	af04      	add	r7, sp, #16
 8002d34:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fc23 	bl	800358e <SDIO_GetPowerState>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d52:	e0b1      	b.n	8002eb8 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d02f      	beq.n	8002dbc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fe22 	bl	80039aa <SDMMC_CmdSendCID>
 8002d66:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <SD_InitCard+0x44>
    {
      return errorstate;
 8002d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d70:	e0a2      	b.n	8002eb8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fc4d 	bl	8003618 <SDIO_GetResponse>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2104      	movs	r1, #4
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fc44 	bl	8003618 <SDIO_GetResponse>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fc3b 	bl	8003618 <SDIO_GetResponse>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	210c      	movs	r1, #12
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fc32 	bl	8003618 <SDIO_GetResponse>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d00d      	beq.n	8002de0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f107 020e 	add.w	r2, r7, #14
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fe2c 	bl	8003a2c <SDMMC_CmdSetRelAdd>
 8002dd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SD_InitCard+0xb2>
    {
      return errorstate;
 8002ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dde:	e06b      	b.n	8002eb8 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d036      	beq.n	8002e56 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002de8:	89fb      	ldrh	r3, [r7, #14]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 fdf4 	bl	80039ea <SDMMC_CmdSendCSD>
 8002e02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <SD_InitCard+0xe0>
    {
      return errorstate;
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0c:	e054      	b.n	8002eb8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fbff 	bl	8003618 <SDIO_GetResponse>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2104      	movs	r1, #4
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fbf6 	bl	8003618 <SDIO_GetResponse>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2108      	movs	r1, #8
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fbed 	bl	8003618 <SDIO_GetResponse>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	210c      	movs	r1, #12
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fbe4 	bl	8003618 <SDIO_GetResponse>
 8002e50:	4602      	mov	r2, r0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2104      	movs	r1, #4
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fbdb 	bl	8003618 <SDIO_GetResponse>
 8002e62:	4603      	mov	r3, r0
 8002e64:	0d1a      	lsrs	r2, r3, #20
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff fce2 	bl	800283a <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	f04f 0400 	mov.w	r4, #0
 8002e84:	461a      	mov	r2, r3
 8002e86:	4623      	mov	r3, r4
 8002e88:	4608      	mov	r0, r1
 8002e8a:	f000 fcdf 	bl	800384c <SDMMC_CmdSelDesel>
 8002e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <SD_InitCard+0x16c>
  {
    return errorstate;
 8002e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e98:	e00e      	b.n	8002eb8 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681d      	ldr	r5, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	466c      	mov	r4, sp
 8002ea2:	f103 0210 	add.w	r2, r3, #16
 8002ea6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002eac:	3304      	adds	r3, #4
 8002eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 fb15 	bl	80034e0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3740      	adds	r7, #64	; 0x40
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bdb0      	pop	{r4, r5, r7, pc}

08002ec0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fcda 	bl	8003896 <SDMMC_CmdGoIdleState>
 8002ee2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SD_PowerON+0x2e>
  {
    return errorstate;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	e08c      	b.n	8003008 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fcef 	bl	80038d6 <SDMMC_CmdOperCond>
 8002ef8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d03d      	beq.n	8002f7c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002f06:	e032      	b.n	8002f6e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	60ba      	str	r2, [r7, #8]
 8002f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d102      	bne.n	8002f1c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f1a:	e075      	b.n	8003008 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fcf8 	bl	8003918 <SDMMC_CmdAppCommand>
 8002f28:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f34:	e068      	b.n	8003008 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fd0f 	bl	8003960 <SDMMC_CmdAppOperCommand>
 8002f42:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f4e:	e05b      	b.n	8003008 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fb5e 	bl	8003618 <SDIO_GetResponse>
 8002f5c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	0fdb      	lsrs	r3, r3, #31
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <SD_PowerON+0xaa>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <SD_PowerON+0xac>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0c9      	beq.n	8002f08 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
 8002f7a:	e044      	b.n	8003006 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002f82:	e031      	b.n	8002fe8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	60ba      	str	r2, [r7, #8]
 8002f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d102      	bne.n	8002f98 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f96:	e037      	b.n	8003008 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fcba 	bl	8003918 <SDMMC_CmdAppCommand>
 8002fa4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <SD_PowerON+0xf0>
      {
        return errorstate;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	e02b      	b.n	8003008 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fcd1 	bl	8003960 <SDMMC_CmdAppOperCommand>
 8002fbe:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <SD_PowerON+0x10a>
      {
        return errorstate;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	e01e      	b.n	8003008 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fb21 	bl	8003618 <SDIO_GetResponse>
 8002fd6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	0fdb      	lsrs	r3, r3, #31
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <SD_PowerON+0x124>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <SD_PowerON+0x126>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ca      	beq.n	8002f84 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44
 8002ffe:	e002      	b.n	8003006 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003028:	e018      	b.n	800305c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fd1b 	bl	8003a72 <SDMMC_CmdSendStatus>
 800303c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	e009      	b.n	800305c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fae2 	bl	8003618 <SDIO_GetResponse>
 8003054:	4602      	mov	r2, r0
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e01d      	b.n	80030b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f815 	bl	80030ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 f968 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d007      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d122      	bne.n	8003172 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d11b      	bne.n	8003172 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0202 	mvn.w	r2, #2
 8003142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f8ee 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 800315e:	e005      	b.n	800316c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f8e0 	bl	8003326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8f1 	bl	800334e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b04      	cmp	r3, #4
 800317e:	d122      	bne.n	80031c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d11b      	bne.n	80031c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 0204 	mvn.w	r2, #4
 8003196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8c4 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 80031b2:	e005      	b.n	80031c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8b6 	bl	8003326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8c7 	bl	800334e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d122      	bne.n	800321a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11b      	bne.n	800321a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f06f 0208 	mvn.w	r2, #8
 80031ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2204      	movs	r2, #4
 80031f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f89a 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 8003206:	e005      	b.n	8003214 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f88c 	bl	8003326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f89d 	bl	800334e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b10      	cmp	r3, #16
 8003226:	d122      	bne.n	800326e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b10      	cmp	r3, #16
 8003234:	d11b      	bne.n	800326e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f06f 0210 	mvn.w	r2, #16
 800323e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2208      	movs	r2, #8
 8003244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f870 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 800325a:	e005      	b.n	8003268 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f862 	bl	8003326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f873 	bl	800334e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10e      	bne.n	800329a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f06f 0201 	mvn.w	r2, #1
 8003292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f006 f9a1 	bl	80095dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a4:	2b80      	cmp	r3, #128	; 0x80
 80032a6:	d10e      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b80      	cmp	r3, #128	; 0x80
 80032b4:	d107      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f903 	bl	80034cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d10e      	bne.n	80032f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d107      	bne.n	80032f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f838 	bl	8003362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d10e      	bne.n	800331e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d107      	bne.n	800331e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f06f 0220 	mvn.w	r2, #32
 8003316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8cd 	bl	80034b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a40      	ldr	r2, [pc, #256]	; (800348c <TIM_Base_SetConfig+0x114>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d00f      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3d      	ldr	r2, [pc, #244]	; (8003490 <TIM_Base_SetConfig+0x118>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00b      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3c      	ldr	r2, [pc, #240]	; (8003494 <TIM_Base_SetConfig+0x11c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <TIM_Base_SetConfig+0x120>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3a      	ldr	r2, [pc, #232]	; (800349c <TIM_Base_SetConfig+0x124>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d108      	bne.n	80033ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2f      	ldr	r2, [pc, #188]	; (800348c <TIM_Base_SetConfig+0x114>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d027      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <TIM_Base_SetConfig+0x118>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d023      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <TIM_Base_SetConfig+0x11c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <TIM_Base_SetConfig+0x120>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a29      	ldr	r2, [pc, #164]	; (800349c <TIM_Base_SetConfig+0x124>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d017      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <TIM_Base_SetConfig+0x128>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <TIM_Base_SetConfig+0x12c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00f      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <TIM_Base_SetConfig+0x130>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <TIM_Base_SetConfig+0x134>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <TIM_Base_SetConfig+0x138>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a23      	ldr	r2, [pc, #140]	; (80034b4 <TIM_Base_SetConfig+0x13c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <TIM_Base_SetConfig+0x114>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_Base_SetConfig+0xf8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0c      	ldr	r2, [pc, #48]	; (800349c <TIM_Base_SetConfig+0x124>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40010400 	.word	0x40010400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	40001800 	.word	0x40001800
 80034b0:	40001c00 	.word	0x40001c00
 80034b4:	40002000 	.word	0x40002000

080034b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	f107 001c 	add.w	r0, r7, #28
 80034ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80034f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80034f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80034fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80034fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003502:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003506:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800350a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800351a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	b004      	add	sp, #16
 8003534:	4770      	bx	lr

08003536 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0303 	and.w	r3, r3, #3
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035c8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80035ce:	431a      	orrs	r2, r3
                       Command->CPSM);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80035d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80035e4:	f023 030f 	bic.w	r3, r3, #15
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	b2db      	uxtb	r3, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3314      	adds	r3, #20
 800362a:	461a      	mov	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
}  
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003668:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800366e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003674:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800368c:	2300      	movs	r3, #0

}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b088      	sub	sp, #32
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80036ac:	2310      	movs	r3, #16
 80036ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036b0:	2340      	movs	r3, #64	; 0x40
 80036b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036bc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff70 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	2110      	movs	r1, #16
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fa1d 	bl	8003b10 <SDMMC_GetCmdResp1>
 80036d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036d8:	69fb      	ldr	r3, [r7, #28]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b088      	sub	sp, #32
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80036f4:	2311      	movs	r3, #17
 80036f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036f8:	2340      	movs	r3, #64	; 0x40
 80036fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003704:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff4c 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	2111      	movs	r1, #17
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f9f9 	bl	8003b10 <SDMMC_GetCmdResp1>
 800371e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003720:	69fb      	ldr	r3, [r7, #28]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b088      	sub	sp, #32
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800373c:	2312      	movs	r3, #18
 800373e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003740:	2340      	movs	r3, #64	; 0x40
 8003742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800374c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff28 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	2112      	movs	r1, #18
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f9d5 	bl	8003b10 <SDMMC_GetCmdResp1>
 8003766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003768:	69fb      	ldr	r3, [r7, #28]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b088      	sub	sp, #32
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003784:	2318      	movs	r3, #24
 8003786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003788:	2340      	movs	r3, #64	; 0x40
 800378a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003794:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff04 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	2118      	movs	r1, #24
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f9b1 	bl	8003b10 <SDMMC_GetCmdResp1>
 80037ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037b0:	69fb      	ldr	r3, [r7, #28]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b088      	sub	sp, #32
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80037cc:	2319      	movs	r3, #25
 80037ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037d0:	2340      	movs	r3, #64	; 0x40
 80037d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037dc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037de:	f107 0308 	add.w	r3, r7, #8
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fee0 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	2119      	movs	r1, #25
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f98d 	bl	8003b10 <SDMMC_GetCmdResp1>
 80037f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037f8:	69fb      	ldr	r3, [r7, #28]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003814:	230c      	movs	r3, #12
 8003816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003818:	2340      	movs	r3, #64	; 0x40
 800381a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003824:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003826:	f107 0308 	add.w	r3, r7, #8
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff febc 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003832:	4a05      	ldr	r2, [pc, #20]	; (8003848 <SDMMC_CmdStopTransfer+0x44>)
 8003834:	210c      	movs	r1, #12
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f96a 	bl	8003b10 <SDMMC_GetCmdResp1>
 800383c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800383e:	69fb      	ldr	r3, [r7, #28]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	05f5e100 	.word	0x05f5e100

0800384c <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003860:	2307      	movs	r3, #7
 8003862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003864:	2340      	movs	r3, #64	; 0x40
 8003866:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800386c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003870:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003872:	f107 0310 	add.w	r3, r7, #16
 8003876:	4619      	mov	r1, r3
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff fe96 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	2107      	movs	r1, #7
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f943 	bl	8003b10 <SDMMC_GetCmdResp1>
 800388a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800388e:	4618      	mov	r0, r3
 8003890:	3728      	adds	r7, #40	; 0x28
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b088      	sub	sp, #32
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038b8:	f107 0308 	add.w	r3, r7, #8
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fe73 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8f9 	bl	8003abc <SDMMC_GetCmdError>
 80038ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038cc:	69fb      	ldr	r3, [r7, #28]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b088      	sub	sp, #32
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80038e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80038e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80038e8:	2308      	movs	r3, #8
 80038ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038ec:	2340      	movs	r3, #64	; 0x40
 80038ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe52 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 faca 	bl	8003ea0 <SDMMC_GetCmdResp7>
 800390c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800390e:	69fb      	ldr	r3, [r7, #28]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800392a:	2337      	movs	r3, #55	; 0x37
 800392c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800392e:	2340      	movs	r3, #64	; 0x40
 8003930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800393a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800393c:	f107 0308 	add.w	r3, r7, #8
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fe31 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	2137      	movs	r1, #55	; 0x37
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8de 	bl	8003b10 <SDMMC_GetCmdResp1>
 8003954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003956:	69fb      	ldr	r3, [r7, #28]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800397a:	2329      	movs	r3, #41	; 0x29
 800397c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800397e:	2340      	movs	r3, #64	; 0x40
 8003980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800398c:	f107 0308 	add.w	r3, r7, #8
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fe09 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f9df 	bl	8003d5c <SDMMC_GetCmdResp3>
 800399e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039a0:	69fb      	ldr	r3, [r7, #28]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b088      	sub	sp, #32
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80039ba:	2302      	movs	r3, #2
 80039bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80039be:	23c0      	movs	r3, #192	; 0xc0
 80039c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ca:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039cc:	f107 0308 	add.w	r3, r7, #8
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fde9 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f97f 	bl	8003cdc <SDMMC_GetCmdResp2>
 80039de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039e0:	69fb      	ldr	r3, [r7, #28]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b088      	sub	sp, #32
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80039fc:	2309      	movs	r3, #9
 80039fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a00:	23c0      	movs	r3, #192	; 0xc0
 8003a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a0c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fdc8 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f95e 	bl	8003cdc <SDMMC_GetCmdResp2>
 8003a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a22:	69fb      	ldr	r3, [r7, #28]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a42:	2340      	movs	r3, #64	; 0x40
 8003a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a4e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a50:	f107 0308 	add.w	r3, r7, #8
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fda7 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	2103      	movs	r1, #3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f9af 	bl	8003dc4 <SDMMC_GetCmdResp6>
 8003a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a68:	69fb      	ldr	r3, [r7, #28]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b088      	sub	sp, #32
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003a84:	230d      	movs	r3, #13
 8003a86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a88:	2340      	movs	r3, #64	; 0x40
 8003a8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a94:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fd84 	bl	80035aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	210d      	movs	r1, #13
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f831 	bl	8003b10 <SDMMC_GetCmdResp1>
 8003aae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003abc:	b490      	push	{r4, r7}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <SDMMC_GetCmdError+0x4c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <SDMMC_GetCmdError+0x50>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003ad8:	4623      	mov	r3, r4
 8003ada:	1e5c      	subs	r4, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ae0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ae4:	e00a      	b.n	8003afc <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f2      	beq.n	8003ad8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc90      	pop	{r4, r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000010 	.word	0x20000010
 8003b0c:	10624dd3 	.word	0x10624dd3

08003b10 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b1e:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <SDMMC_GetCmdResp1+0x1c0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6c      	ldr	r2, [pc, #432]	; (8003cd4 <SDMMC_GetCmdResp1+0x1c4>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0a5b      	lsrs	r3, r3, #9
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b30:	4623      	mov	r3, r4
 8003b32:	1e5c      	subs	r4, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b3c:	e0c3      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f2      	beq.n	8003b30 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e0b2      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0a7      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff fd41 	bl	80035fe <SDIO_GetCommandResponse>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d001      	beq.n	8003b8a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e09d      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003b92:	2100      	movs	r1, #0
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff fd3f 	bl	8003618 <SDIO_GetResponse>
 8003b9a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <SDMMC_GetCmdResp1+0x1c8>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e08d      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	da02      	bge.n	8003bb6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb4:	e087      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003bc0:	2340      	movs	r3, #64	; 0x40
 8003bc2:	e080      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	e079      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be0:	e071      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf0:	e069      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c00:	e061      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c10:	e059      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c20:	e051      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c30:	e049      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c40:	e041      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8003c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c50:	e039      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c60:	e031      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003c6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c70:	e029      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003c7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c80:	e021      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003c8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c90:	e019      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003c9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ca0:	e011      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003cac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cb0:	e009      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003cbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003cc0:	e001      	b.n	8003cc6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd90      	pop	{r4, r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	10624dd3 	.word	0x10624dd3
 8003cd8:	fdffe008 	.word	0xfdffe008

08003cdc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003cdc:	b490      	push	{r4, r7}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <SDMMC_GetCmdResp2+0x78>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <SDMMC_GetCmdResp2+0x7c>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0a5b      	lsrs	r3, r3, #9
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	1e5c      	subs	r4, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d04:	e020      	b.n	8003d48 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f2      	beq.n	8003cf8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2204      	movs	r2, #4
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d24:	2304      	movs	r3, #4
 8003d26:	e00f      	b.n	8003d48 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e004      	b.n	8003d48 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc90      	pop	{r4, r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000010 	.word	0x20000010
 8003d58:	10624dd3 	.word	0x10624dd3

08003d5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003d5c:	b490      	push	{r4, r7}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <SDMMC_GetCmdResp3+0x60>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <SDMMC_GetCmdResp3+0x64>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	0a5b      	lsrs	r3, r3, #9
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003d78:	4623      	mov	r3, r4
 8003d7a:	1e5c      	subs	r4, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d84:	e015      	b.n	8003db2 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f2      	beq.n	8003d78 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2204      	movs	r2, #4
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003da4:	2304      	movs	r3, #4
 8003da6:	e004      	b.n	8003db2 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc90      	pop	{r4, r7}
 8003dba:	4770      	bx	lr
 8003dbc:	20000010 	.word	0x20000010
 8003dc0:	10624dd3 	.word	0x10624dd3

08003dc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <SDMMC_GetCmdResp6+0xd4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <SDMMC_GetCmdResp6+0xd8>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	0a5b      	lsrs	r3, r3, #9
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003de6:	4623      	mov	r3, r4
 8003de8:	1e5c      	subs	r4, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003df2:	e04c      	b.n	8003e8e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f2      	beq.n	8003de6 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e12:	2304      	movs	r3, #4
 8003e14:	e03b      	b.n	8003e8e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e030      	b.n	8003e8e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fbe6 	bl	80035fe <SDIO_GetCommandResponse>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	7afb      	ldrb	r3, [r7, #11]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d001      	beq.n	8003e40 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e026      	b.n	8003e8e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003e48:	2100      	movs	r1, #0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff fbe4 	bl	8003618 <SDIO_GetResponse>
 8003e50:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e011      	b.n	8003e8e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e78:	e009      	b.n	8003e8e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e88:	e001      	b.n	8003e8e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd90      	pop	{r4, r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000010 	.word	0x20000010
 8003e9c:	10624dd3 	.word	0x10624dd3

08003ea0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003ea0:	b490      	push	{r4, r7}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <SDMMC_GetCmdResp7+0x6c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <SDMMC_GetCmdResp7+0x70>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a5b      	lsrs	r3, r3, #9
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	1e5c      	subs	r4, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ec8:	e01a      	b.n	8003f00 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f2      	beq.n	8003ebc <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2240      	movs	r2, #64	; 0x40
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ee8:	2304      	movs	r3, #4
 8003eea:	e009      	b.n	8003f00 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003efe:	2300      	movs	r3, #0
  
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc90      	pop	{r4, r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000010 	.word	0x20000010
 8003f10:	10624dd3 	.word	0x10624dd3

08003f14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <disk_status+0x30>)
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	79fa      	ldrb	r2, [r7, #7]
 8003f2c:	4905      	ldr	r1, [pc, #20]	; (8003f44 <disk_status+0x30>)
 8003f2e:	440a      	add	r2, r1
 8003f30:	7a12      	ldrb	r2, [r2, #8]
 8003f32:	4610      	mov	r0, r2
 8003f34:	4798      	blx	r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200000bc 	.word	0x200000bc

08003f48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <disk_initialize+0x48>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d111      	bne.n	8003f84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <disk_initialize+0x48>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <disk_initialize+0x48>)
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	79fa      	ldrb	r2, [r7, #7]
 8003f76:	4906      	ldr	r1, [pc, #24]	; (8003f90 <disk_initialize+0x48>)
 8003f78:	440a      	add	r2, r1
 8003f7a:	7a12      	ldrb	r2, [r2, #8]
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4798      	blx	r3
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200000bc 	.word	0x200000bc

08003f94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <disk_read+0x3c>)
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	689c      	ldr	r4, [r3, #8]
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <disk_read+0x3c>)
 8003fb4:	4413      	add	r3, r2
 8003fb6:	7a18      	ldrb	r0, [r3, #8]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	47a0      	blx	r4
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd90      	pop	{r4, r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200000bc 	.word	0x200000bc

08003fd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <disk_write+0x3c>)
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	68dc      	ldr	r4, [r3, #12]
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	4a07      	ldr	r2, [pc, #28]	; (8004010 <disk_write+0x3c>)
 8003ff4:	4413      	add	r3, r2
 8003ff6:	7a18      	ldrb	r0, [r3, #8]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	47a0      	blx	r4
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]
  return res;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	bf00      	nop
 8004010:	200000bc 	.word	0x200000bc

08004014 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	603a      	str	r2, [r7, #0]
 800401e:	71fb      	strb	r3, [r7, #7]
 8004020:	460b      	mov	r3, r1
 8004022:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	4a09      	ldr	r2, [pc, #36]	; (800404c <disk_ioctl+0x38>)
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	79fa      	ldrb	r2, [r7, #7]
 8004032:	4906      	ldr	r1, [pc, #24]	; (800404c <disk_ioctl+0x38>)
 8004034:	440a      	add	r2, r1
 8004036:	7a10      	ldrb	r0, [r2, #8]
 8004038:	79b9      	ldrb	r1, [r7, #6]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	4798      	blx	r3
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]
  return res;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	200000bc 	.word	0x200000bc

08004050 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004060:	89fb      	ldrh	r3, [r7, #14]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	b21a      	sxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	b21b      	sxth	r3, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	b21b      	sxth	r3, r3
 8004070:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004072:	89fb      	ldrh	r3, [r7, #14]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3303      	adds	r3, #3
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	3202      	adds	r2, #2
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	3201      	adds	r2, #1
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	887a      	ldrh	r2, [r7, #2]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	887b      	ldrh	r3, [r7, #2]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	1c53      	adds	r3, r2, #1
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1c59      	adds	r1, r3, #1
 8004178:	6179      	str	r1, [r7, #20]
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3b01      	subs	r3, #1
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f1      	bne.n	800416e <mem_cpy+0x1a>
	}
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004196:	b480      	push	{r7}
 8004198:	b087      	sub	sp, #28
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	617a      	str	r2, [r7, #20]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f3      	bne.n	80041a6 <mem_set+0x10>
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80041ca:	b480      	push	{r7}
 80041cc:	b089      	sub	sp, #36	; 0x24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	61fa      	str	r2, [r7, #28]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	61ba      	str	r2, [r7, #24]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	1acb      	subs	r3, r1, r3
 80041f6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <mem_cmp+0x40>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0eb      	beq.n	80041e2 <mem_cmp+0x18>

	return r;
 800420a:	697b      	ldr	r3, [r7, #20]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3724      	adds	r7, #36	; 0x24
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004222:	e002      	b.n	800422a <chk_chr+0x12>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3301      	adds	r3, #1
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <chk_chr+0x26>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4293      	cmp	r3, r2
 800423c:	d1f2      	bne.n	8004224 <chk_chr+0xc>
	return *str;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	781b      	ldrb	r3, [r3, #0]
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e029      	b.n	80042b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <chk_lock+0xb4>)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4413      	add	r3, r2
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01d      	beq.n	80042ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004272:	4a24      	ldr	r2, [pc, #144]	; (8004304 <chk_lock+0xb4>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d116      	bne.n	80042b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004284:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <chk_lock+0xb4>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004294:	429a      	cmp	r2, r3
 8004296:	d10c      	bne.n	80042b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004298:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <chk_lock+0xb4>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	4413      	add	r3, r2
 80042a0:	3308      	adds	r3, #8
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d102      	bne.n	80042b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80042ac:	e007      	b.n	80042be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80042ae:	2301      	movs	r3, #1
 80042b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d9d2      	bls.n	8004264 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d109      	bne.n	80042d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <chk_lock+0x80>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d101      	bne.n	80042d4 <chk_lock+0x84>
 80042d0:	2300      	movs	r3, #0
 80042d2:	e010      	b.n	80042f6 <chk_lock+0xa6>
 80042d4:	2312      	movs	r3, #18
 80042d6:	e00e      	b.n	80042f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <chk_lock+0xa0>
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <chk_lock+0xb4>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	330c      	adds	r3, #12
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ee:	d101      	bne.n	80042f4 <chk_lock+0xa4>
 80042f0:	2310      	movs	r3, #16
 80042f2:	e000      	b.n	80042f6 <chk_lock+0xa6>
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000009c 	.word	0x2000009c

08004308 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	e002      	b.n	800431a <enq_lock+0x12>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d806      	bhi.n	800432e <enq_lock+0x26>
 8004320:	4a09      	ldr	r2, [pc, #36]	; (8004348 <enq_lock+0x40>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	4413      	add	r3, r2
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f2      	bne.n	8004314 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b02      	cmp	r3, #2
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	2000009c 	.word	0x2000009c

0800434c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e01f      	b.n	800439c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800435c:	4a41      	ldr	r2, [pc, #260]	; (8004464 <inc_lock+0x118>)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4413      	add	r3, r2
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d113      	bne.n	8004396 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800436e:	4a3d      	ldr	r2, [pc, #244]	; (8004464 <inc_lock+0x118>)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	4413      	add	r3, r2
 8004376:	3304      	adds	r3, #4
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800437e:	429a      	cmp	r2, r3
 8004380:	d109      	bne.n	8004396 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004382:	4a38      	ldr	r2, [pc, #224]	; (8004464 <inc_lock+0x118>)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	4413      	add	r3, r2
 800438a:	3308      	adds	r3, #8
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004392:	429a      	cmp	r2, r3
 8004394:	d006      	beq.n	80043a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d9dc      	bls.n	800435c <inc_lock+0x10>
 80043a2:	e000      	b.n	80043a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80043a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d132      	bne.n	8004412 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e002      	b.n	80043b8 <inc_lock+0x6c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d806      	bhi.n	80043cc <inc_lock+0x80>
 80043be:	4a29      	ldr	r2, [pc, #164]	; (8004464 <inc_lock+0x118>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f2      	bne.n	80043b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d101      	bne.n	80043d6 <inc_lock+0x8a>
 80043d2:	2300      	movs	r3, #0
 80043d4:	e040      	b.n	8004458 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4922      	ldr	r1, [pc, #136]	; (8004464 <inc_lock+0x118>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	440b      	add	r3, r1
 80043e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	491e      	ldr	r1, [pc, #120]	; (8004464 <inc_lock+0x118>)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	440b      	add	r3, r1
 80043f0:	3304      	adds	r3, #4
 80043f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	491a      	ldr	r1, [pc, #104]	; (8004464 <inc_lock+0x118>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	440b      	add	r3, r1
 8004400:	3308      	adds	r3, #8
 8004402:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004404:	4a17      	ldr	r2, [pc, #92]	; (8004464 <inc_lock+0x118>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	4413      	add	r3, r2
 800440c:	330c      	adds	r3, #12
 800440e:	2200      	movs	r2, #0
 8004410:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <inc_lock+0xe0>
 8004418:	4a12      	ldr	r2, [pc, #72]	; (8004464 <inc_lock+0x118>)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	4413      	add	r3, r2
 8004420:	330c      	adds	r3, #12
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <inc_lock+0xe0>
 8004428:	2300      	movs	r3, #0
 800442a:	e015      	b.n	8004458 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d108      	bne.n	8004444 <inc_lock+0xf8>
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <inc_lock+0x118>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	4413      	add	r3, r2
 800443a:	330c      	adds	r3, #12
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	e001      	b.n	8004448 <inc_lock+0xfc>
 8004444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004448:	4906      	ldr	r1, [pc, #24]	; (8004464 <inc_lock+0x118>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	440b      	add	r3, r1
 8004450:	330c      	adds	r3, #12
 8004452:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3301      	adds	r3, #1
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	2000009c 	.word	0x2000009c

08004468 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d825      	bhi.n	80044c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <dec_lock+0x74>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	4413      	add	r3, r2
 8004484:	330c      	adds	r3, #12
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800448a:	89fb      	ldrh	r3, [r7, #14]
 800448c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004490:	d101      	bne.n	8004496 <dec_lock+0x2e>
 8004492:	2300      	movs	r3, #0
 8004494:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004496:	89fb      	ldrh	r3, [r7, #14]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <dec_lock+0x3a>
 800449c:	89fb      	ldrh	r3, [r7, #14]
 800449e:	3b01      	subs	r3, #1
 80044a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <dec_lock+0x74>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	4413      	add	r3, r2
 80044aa:	330c      	adds	r3, #12
 80044ac:	89fa      	ldrh	r2, [r7, #14]
 80044ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80044b0:	89fb      	ldrh	r3, [r7, #14]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d105      	bne.n	80044c2 <dec_lock+0x5a>
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <dec_lock+0x74>)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	4413      	add	r3, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	737b      	strb	r3, [r7, #13]
 80044c6:	e001      	b.n	80044cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80044c8:	2302      	movs	r3, #2
 80044ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80044cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000009c 	.word	0x2000009c

080044e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e010      	b.n	8004510 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80044ee:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <clear_lock+0x44>)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4413      	add	r3, r2
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d105      	bne.n	800450a <clear_lock+0x2a>
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <clear_lock+0x44>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3301      	adds	r3, #1
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d9eb      	bls.n	80044ee <clear_lock+0xe>
	}
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	2000009c 	.word	0x2000009c

08004528 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	78db      	ldrb	r3, [r3, #3]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d034      	beq.n	80045a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	7858      	ldrb	r0, [r3, #1]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800454c:	2301      	movs	r3, #1
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	f7ff fd40 	bl	8003fd4 <disk_write>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <sync_window+0x38>
			res = FR_DISK_ERR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e022      	b.n	80045a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	1ad2      	subs	r2, r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	429a      	cmp	r2, r3
 8004574:	d217      	bcs.n	80045a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	789b      	ldrb	r3, [r3, #2]
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e010      	b.n	80045a0 <sync_window+0x78>
					wsect += fs->fsize;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4413      	add	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7858      	ldrb	r0, [r3, #1]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004592:	2301      	movs	r3, #1
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	f7ff fd1d 	bl	8003fd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3b01      	subs	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d8eb      	bhi.n	800457e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d01b      	beq.n	8004600 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ffad 	bl	8004528 <sync_window>
 80045ce:	4603      	mov	r3, r0
 80045d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d113      	bne.n	8004600 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	7858      	ldrb	r0, [r3, #1]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80045e2:	2301      	movs	r3, #1
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	f7ff fcd5 	bl	8003f94 <disk_read>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff87 	bl	8004528 <sync_window>
 800461a:	4603      	mov	r3, r0
 800461c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d158      	bne.n	80046d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d148      	bne.n	80046be <sync_fs+0xb2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d144      	bne.n	80046be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3330      	adds	r3, #48	; 0x30
 8004638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fda9 	bl	8004196 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3330      	adds	r3, #48	; 0x30
 8004648:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800464c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fd38 	bl	80040c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3330      	adds	r3, #48	; 0x30
 800465a:	4921      	ldr	r1, [pc, #132]	; (80046e0 <sync_fs+0xd4>)
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fd4d 	bl	80040fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3330      	adds	r3, #48	; 0x30
 8004666:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800466a:	491e      	ldr	r1, [pc, #120]	; (80046e4 <sync_fs+0xd8>)
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fd45 	bl	80040fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3330      	adds	r3, #48	; 0x30
 8004676:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7ff fd3b 	bl	80040fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3330      	adds	r3, #48	; 0x30
 800468a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f7ff fd31 	bl	80040fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7858      	ldrb	r0, [r3, #1]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b2:	2301      	movs	r3, #1
 80046b4:	f7ff fc8e 	bl	8003fd4 <disk_write>
			fs->fsi_flag = 0;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2200      	movs	r2, #0
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fca4 	bl	8004014 <disk_ioctl>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <sync_fs+0xca>
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	41615252 	.word	0x41615252
 80046e4:	61417272 	.word	0x61417272

080046e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3b02      	subs	r3, #2
 80046f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	3b02      	subs	r3, #2
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d301      	bcc.n	8004708 <clust2sect+0x20>
 8004704:	2300      	movs	r3, #0
 8004706:	e008      	b.n	800471a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	895b      	ldrh	r3, [r3, #10]
 800470c:	461a      	mov	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	fb03 f202 	mul.w	r2, r3, r2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	4413      	add	r3, r2
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d904      	bls.n	8004746 <get_fat+0x20>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004746:	2301      	movs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e08c      	b.n	8004866 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800474c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004750:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d045      	beq.n	80047e6 <get_fat+0xc0>
 800475a:	2b03      	cmp	r3, #3
 800475c:	d05d      	beq.n	800481a <get_fat+0xf4>
 800475e:	2b01      	cmp	r3, #1
 8004760:	d177      	bne.n	8004852 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	0a5b      	lsrs	r3, r3, #9
 8004778:	4413      	add	r3, r2
 800477a:	4619      	mov	r1, r3
 800477c:	6938      	ldr	r0, [r7, #16]
 800477e:	f7ff ff17 	bl	80045b0 <move_window>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d167      	bne.n	8004858 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	60fa      	str	r2, [r7, #12]
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4413      	add	r3, r2
 8004796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800479a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	0a5b      	lsrs	r3, r3, #9
 80047a4:	4413      	add	r3, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	6938      	ldr	r0, [r7, #16]
 80047aa:	f7ff ff01 	bl	80045b0 <move_window>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d153      	bne.n	800485c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4413      	add	r3, r2
 80047be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <get_fat+0xb6>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	e002      	b.n	80047e2 <get_fat+0xbc>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	617b      	str	r3, [r7, #20]
			break;
 80047e4:	e03f      	b.n	8004866 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	4413      	add	r3, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	6938      	ldr	r0, [r7, #16]
 80047f4:	f7ff fedc 	bl	80045b0 <move_window>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d130      	bne.n	8004860 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800480c:	4413      	add	r3, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fc1e 	bl	8004050 <ld_word>
 8004814:	4603      	mov	r3, r0
 8004816:	617b      	str	r3, [r7, #20]
			break;
 8004818:	e025      	b.n	8004866 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	09db      	lsrs	r3, r3, #7
 8004822:	4413      	add	r3, r2
 8004824:	4619      	mov	r1, r3
 8004826:	6938      	ldr	r0, [r7, #16]
 8004828:	f7ff fec2 	bl	80045b0 <move_window>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d118      	bne.n	8004864 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004840:	4413      	add	r3, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fc1c 	bl	8004080 <ld_dword>
 8004848:	4603      	mov	r3, r0
 800484a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800484e:	617b      	str	r3, [r7, #20]
			break;
 8004850:	e009      	b.n	8004866 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004852:	2301      	movs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e006      	b.n	8004866 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004858:	bf00      	nop
 800485a:	e004      	b.n	8004866 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800485c:	bf00      	nop
 800485e:	e002      	b.n	8004866 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004864:	bf00      	nop
		}
	}

	return val;
 8004866:	697b      	ldr	r3, [r7, #20]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800487c:	2302      	movs	r3, #2
 800487e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b01      	cmp	r3, #1
 8004884:	f240 80d6 	bls.w	8004a34 <put_fat+0x1c4>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	f080 80d0 	bcs.w	8004a34 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d073      	beq.n	8004984 <put_fat+0x114>
 800489c:	2b03      	cmp	r3, #3
 800489e:	f000 8091 	beq.w	80049c4 <put_fat+0x154>
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	f040 80c6 	bne.w	8004a34 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1a      	ldr	r2, [r3, #32]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	0a5b      	lsrs	r3, r3, #9
 80048be:	4413      	add	r3, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fe74 	bl	80045b0 <move_window>
 80048c8:	4603      	mov	r3, r0
 80048ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 80a9 	bne.w	8004a26 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	61b9      	str	r1, [r7, #24]
 80048e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e4:	4413      	add	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <put_fat+0x9e>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	b25a      	sxtb	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	b25b      	sxtb	r3, r3
 8004906:	4313      	orrs	r3, r2
 8004908:	b25b      	sxtb	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e001      	b.n	8004912 <put_fat+0xa2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	0a5b      	lsrs	r3, r3, #9
 8004924:	4413      	add	r3, r2
 8004926:	4619      	mov	r1, r3
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff fe41 	bl	80045b0 <move_window>
 800492e:	4603      	mov	r3, r0
 8004930:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d178      	bne.n	8004a2a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	4413      	add	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <put_fat+0xea>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e00e      	b.n	8004978 <put_fat+0x108>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b25b      	sxtb	r3, r3
 8004960:	f023 030f 	bic.w	r3, r3, #15
 8004964:	b25a      	sxtb	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	b25b      	sxtb	r3, r3
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	b25b      	sxtb	r3, r3
 8004972:	4313      	orrs	r3, r2
 8004974:	b25b      	sxtb	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	70da      	strb	r2, [r3, #3]
			break;
 8004982:	e057      	b.n	8004a34 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	4413      	add	r3, r2
 800498e:	4619      	mov	r1, r3
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7ff fe0d 	bl	80045b0 <move_window>
 8004996:	4603      	mov	r3, r0
 8004998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800499a:	7ffb      	ldrb	r3, [r7, #31]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d146      	bne.n	8004a2e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80049ae:	4413      	add	r3, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	b292      	uxth	r2, r2
 80049b4:	4611      	mov	r1, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fb85 	bl	80040c6 <st_word>
			fs->wflag = 1;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	70da      	strb	r2, [r3, #3]
			break;
 80049c2:	e037      	b.n	8004a34 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	4413      	add	r3, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff fded 	bl	80045b0 <move_window>
 80049d6:	4603      	mov	r3, r0
 80049d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049da:	7ffb      	ldrb	r3, [r7, #31]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d128      	bne.n	8004a32 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80049f4:	4413      	add	r3, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fb42 	bl	8004080 <ld_dword>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a02:	4323      	orrs	r3, r4
 8004a04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004a14:	4413      	add	r3, r2
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fb6f 	bl	80040fc <st_dword>
			fs->wflag = 1;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	70da      	strb	r2, [r3, #3]
			break;
 8004a24:	e006      	b.n	8004a34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004a26:	bf00      	nop
 8004a28:	e004      	b.n	8004a34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004a2a:	bf00      	nop
 8004a2c:	e002      	b.n	8004a34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004a32:	bf00      	nop
		}
	}
	return res;
 8004a34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3724      	adds	r7, #36	; 0x24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d904      	bls.n	8004a64 <remove_chain+0x26>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d301      	bcc.n	8004a68 <remove_chain+0x2a>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e04b      	b.n	8004b00 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	69b8      	ldr	r0, [r7, #24]
 8004a76:	f7ff fefb 	bl	8004870 <put_fat>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a7e:	7ffb      	ldrb	r3, [r7, #31]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <remove_chain+0x4a>
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
 8004a86:	e03b      	b.n	8004b00 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fe4b 	bl	8004726 <get_fat>
 8004a90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d031      	beq.n	8004afc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <remove_chain+0x64>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e02e      	b.n	8004b00 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa8:	d101      	bne.n	8004aae <remove_chain+0x70>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e028      	b.n	8004b00 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004aae:	2200      	movs	r2, #0
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	69b8      	ldr	r0, [r7, #24]
 8004ab4:	f7ff fedc 	bl	8004870 <put_fat>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004abc:	7ffb      	ldrb	r3, [r7, #31]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <remove_chain+0x88>
 8004ac2:	7ffb      	ldrb	r3, [r7, #31]
 8004ac4:	e01c      	b.n	8004b00 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	3b02      	subs	r3, #2
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d20b      	bcs.n	8004aec <remove_chain+0xae>
			fs->free_clst++;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	791b      	ldrb	r3, [r3, #4]
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d3c6      	bcc.n	8004a88 <remove_chain+0x4a>
 8004afa:	e000      	b.n	8004afe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004afc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10d      	bne.n	8004b3a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <create_chain+0x2c>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d31b      	bcc.n	8004b6c <create_chain+0x64>
 8004b34:	2301      	movs	r3, #1
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e018      	b.n	8004b6c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fdf2 	bl	8004726 <get_fat>
 8004b42:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d801      	bhi.n	8004b4e <create_chain+0x46>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e070      	b.n	8004c30 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b54:	d101      	bne.n	8004b5a <create_chain+0x52>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	e06a      	b.n	8004c30 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d201      	bcs.n	8004b68 <create_chain+0x60>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	e063      	b.n	8004c30 <create_chain+0x128>
		scl = clst;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	3301      	adds	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d307      	bcc.n	8004b90 <create_chain+0x88>
				ncl = 2;
 8004b80:	2302      	movs	r3, #2
 8004b82:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d901      	bls.n	8004b90 <create_chain+0x88>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e04f      	b.n	8004c30 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fdc7 	bl	8004726 <get_fat>
 8004b98:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d003      	beq.n	8004bae <create_chain+0xa6>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bac:	d101      	bne.n	8004bb2 <create_chain+0xaa>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	e03e      	b.n	8004c30 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d1da      	bne.n	8004b70 <create_chain+0x68>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e038      	b.n	8004c30 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004bbe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	6938      	ldr	r0, [r7, #16]
 8004bc8:	f7ff fe52 	bl	8004870 <put_fat>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <create_chain+0xe2>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	6938      	ldr	r0, [r7, #16]
 8004be2:	f7ff fe45 	bl	8004870 <put_fat>
 8004be6:	4603      	mov	r3, r0
 8004be8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <create_chain+0x116>
		fs->last_clst = ncl;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	3b02      	subs	r3, #2
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d804      	bhi.n	8004c0e <create_chain+0x106>
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	791b      	ldrb	r3, [r3, #4]
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	711a      	strb	r2, [r3, #4]
 8004c1c:	e007      	b.n	8004c2e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <create_chain+0x122>
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c28:	e000      	b.n	8004c2c <create_chain+0x124>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c2e:	69fb      	ldr	r3, [r7, #28]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	0a5b      	lsrs	r3, r3, #9
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	8952      	ldrh	r2, [r2, #10]
 8004c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1d1a      	adds	r2, r3, #4
 8004c62:	613a      	str	r2, [r7, #16]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <clmt_clust+0x3a>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e010      	b.n	8004c94 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d307      	bcc.n	8004c8a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3304      	adds	r3, #4
 8004c86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c88:	e7e9      	b.n	8004c5e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004c8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4413      	add	r3, r2
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cb6:	d204      	bcs.n	8004cc2 <dir_sdi+0x22>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e063      	b.n	8004d8e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <dir_sdi+0x46>
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d902      	bls.n	8004ce6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10c      	bne.n	8004d06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	8912      	ldrh	r2, [r2, #8]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d301      	bcc.n	8004cfc <dir_sdi+0x5c>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e048      	b.n	8004d8e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	61da      	str	r2, [r3, #28]
 8004d04:	e029      	b.n	8004d5a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	895b      	ldrh	r3, [r3, #10]
 8004d0a:	025b      	lsls	r3, r3, #9
 8004d0c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d0e:	e019      	b.n	8004d44 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fd06 	bl	8004726 <get_fat>
 8004d1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d22:	d101      	bne.n	8004d28 <dir_sdi+0x88>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e032      	b.n	8004d8e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d904      	bls.n	8004d38 <dir_sdi+0x98>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d301      	bcc.n	8004d3c <dir_sdi+0x9c>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e028      	b.n	8004d8e <dir_sdi+0xee>
			ofs -= csz;
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d2e1      	bcs.n	8004d10 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004d4c:	6979      	ldr	r1, [r7, #20]
 8004d4e:	6938      	ldr	r0, [r7, #16]
 8004d50:	f7ff fcca 	bl	80046e8 <clust2sect>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <dir_sdi+0xcc>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e010      	b.n	8004d8e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	0a5b      	lsrs	r3, r3, #9
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d86:	441a      	add	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	3320      	adds	r3, #32
 8004dac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <dir_next+0x28>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dbc:	d301      	bcc.n	8004dc2 <dir_next+0x2c>
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	e0aa      	b.n	8004f18 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 8098 	bne.w	8004efe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	8912      	ldrh	r2, [r2, #8]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f0c0 8088 	bcc.w	8004efe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	61da      	str	r2, [r3, #28]
 8004df4:	2304      	movs	r3, #4
 8004df6:	e08f      	b.n	8004f18 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	0a5b      	lsrs	r3, r3, #9
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	8952      	ldrh	r2, [r2, #10]
 8004e00:	3a01      	subs	r2, #1
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d17a      	bne.n	8004efe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7ff fc88 	bl	8004726 <get_fat>
 8004e16:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d801      	bhi.n	8004e22 <dir_next+0x8c>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e07a      	b.n	8004f18 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e28:	d101      	bne.n	8004e2e <dir_next+0x98>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e074      	b.n	8004f18 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d358      	bcc.n	8004eea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	61da      	str	r2, [r3, #28]
 8004e44:	2304      	movs	r3, #4
 8004e46:	e067      	b.n	8004f18 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7ff fe59 	bl	8004b08 <create_chain>
 8004e56:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <dir_next+0xcc>
 8004e5e:	2307      	movs	r3, #7
 8004e60:	e05a      	b.n	8004f18 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <dir_next+0xd6>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e055      	b.n	8004f18 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e72:	d101      	bne.n	8004e78 <dir_next+0xe2>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e04f      	b.n	8004f18 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff fb55 	bl	8004528 <sync_window>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <dir_next+0xf2>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e047      	b.n	8004f18 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3330      	adds	r3, #48	; 0x30
 8004e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff f97f 	bl	8004196 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	6979      	ldr	r1, [r7, #20]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff fc22 	bl	80046e8 <clust2sect>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eaa:	e012      	b.n	8004ed2 <dir_next+0x13c>
						fs->wflag = 1;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7ff fb38 	bl	8004528 <sync_window>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <dir_next+0x12c>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e02a      	b.n	8004f18 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	895b      	ldrh	r3, [r3, #10]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d3e6      	bcc.n	8004eac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad2      	subs	r2, r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004ef0:	6979      	ldr	r1, [r7, #20]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff fbf8 	bl	80046e8 <clust2sect>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f10:	441a      	add	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f30:	2100      	movs	r1, #0
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff feb4 	bl	8004ca0 <dir_sdi>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d12b      	bne.n	8004f9a <dir_alloc+0x7a>
		n = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fb2f 	bl	80045b0 <move_window>
 8004f52:	4603      	mov	r3, r0
 8004f54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d11d      	bne.n	8004f98 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2be5      	cmp	r3, #229	; 0xe5
 8004f64:	d004      	beq.n	8004f70 <dir_alloc+0x50>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d107      	bne.n	8004f80 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3301      	adds	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d102      	bne.n	8004f84 <dir_alloc+0x64>
 8004f7e:	e00c      	b.n	8004f9a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f84:	2101      	movs	r1, #1
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ff05 	bl	8004d96 <dir_next>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0d7      	beq.n	8004f46 <dir_alloc+0x26>
 8004f96:	e000      	b.n	8004f9a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004f98:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d101      	bne.n	8004fa4 <dir_alloc+0x84>
 8004fa0:	2307      	movs	r3, #7
 8004fa2:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	331a      	adds	r3, #26
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff f847 	bl	8004050 <ld_word>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d109      	bne.n	8004fe2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff f83c 	bl	8004050 <ld_word>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	331a      	adds	r3, #26
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	b292      	uxth	r2, r2
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff f85f 	bl	80040c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d109      	bne.n	8005024 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f103 0214 	add.w	r2, r3, #20
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	b29b      	uxth	r3, r3
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7ff f851 	bl	80040c6 <st_word>
	}
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800503a:	2100      	movs	r1, #0
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff fe2f 	bl	8004ca0 <dir_sdi>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <dir_find+0x24>
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	e03e      	b.n	80050ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	4619      	mov	r1, r3
 8005056:	6938      	ldr	r0, [r7, #16]
 8005058:	f7ff faaa 	bl	80045b0 <move_window>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d12f      	bne.n	80050c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <dir_find+0x4e>
 8005074:	2304      	movs	r3, #4
 8005076:	75fb      	strb	r3, [r7, #23]
 8005078:	e028      	b.n	80050cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	330b      	adds	r3, #11
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	330b      	adds	r3, #11
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <dir_find+0x86>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a18      	ldr	r0, [r3, #32]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3324      	adds	r3, #36	; 0x24
 80050a4:	220b      	movs	r2, #11
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7ff f88f 	bl	80041ca <mem_cmp>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80050b2:	2100      	movs	r1, #0
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff fe6e 	bl	8004d96 <dir_next>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0c5      	beq.n	8005050 <dir_find+0x24>
 80050c4:	e002      	b.n	80050cc <dir_find+0xa0>
		if (res != FR_OK) break;
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80050ca:	bf00      	nop

	return res;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80050e4:	2101      	movs	r1, #1
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff ff1a 	bl	8004f20 <dir_alloc>
 80050ec:	4603      	mov	r3, r0
 80050ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d11c      	bne.n	8005130 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	4619      	mov	r1, r3
 80050fc:	68b8      	ldr	r0, [r7, #8]
 80050fe:	f7ff fa57 	bl	80045b0 <move_window>
 8005102:	4603      	mov	r3, r0
 8005104:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d111      	bne.n	8005130 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	2220      	movs	r2, #32
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff f83e 	bl	8004196 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a18      	ldr	r0, [r3, #32]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3324      	adds	r3, #36	; 0x24
 8005122:	220b      	movs	r2, #11
 8005124:	4619      	mov	r1, r3
 8005126:	f7ff f815 	bl	8004154 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2201      	movs	r2, #1
 800512e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005152:	220b      	movs	r2, #11
 8005154:	2120      	movs	r1, #32
 8005156:	68b8      	ldr	r0, [r7, #8]
 8005158:	f7ff f81d 	bl	8004196 <mem_set>
	si = i = 0; ni = 8;
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	2308      	movs	r3, #8
 8005166:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	617a      	str	r2, [r7, #20]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005176:	7ffb      	ldrb	r3, [r7, #31]
 8005178:	2b20      	cmp	r3, #32
 800517a:	d94e      	bls.n	800521a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800517c:	7ffb      	ldrb	r3, [r7, #31]
 800517e:	2b2f      	cmp	r3, #47	; 0x2f
 8005180:	d006      	beq.n	8005190 <create_name+0x54>
 8005182:	7ffb      	ldrb	r3, [r7, #31]
 8005184:	2b5c      	cmp	r3, #92	; 0x5c
 8005186:	d110      	bne.n	80051aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005188:	e002      	b.n	8005190 <create_name+0x54>
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	3301      	adds	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b2f      	cmp	r3, #47	; 0x2f
 800519a:	d0f6      	beq.n	800518a <create_name+0x4e>
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b5c      	cmp	r3, #92	; 0x5c
 80051a6:	d0f0      	beq.n	800518a <create_name+0x4e>
			break;
 80051a8:	e038      	b.n	800521c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
 80051ac:	2b2e      	cmp	r3, #46	; 0x2e
 80051ae:	d003      	beq.n	80051b8 <create_name+0x7c>
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d30c      	bcc.n	80051d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b0b      	cmp	r3, #11
 80051bc:	d002      	beq.n	80051c4 <create_name+0x88>
 80051be:	7ffb      	ldrb	r3, [r7, #31]
 80051c0:	2b2e      	cmp	r3, #46	; 0x2e
 80051c2:	d001      	beq.n	80051c8 <create_name+0x8c>
 80051c4:	2306      	movs	r3, #6
 80051c6:	e044      	b.n	8005252 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80051c8:	2308      	movs	r3, #8
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	230b      	movs	r3, #11
 80051ce:	61bb      	str	r3, [r7, #24]
			continue;
 80051d0:	e022      	b.n	8005218 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80051d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da04      	bge.n	80051e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80051da:	7ffb      	ldrb	r3, [r7, #31]
 80051dc:	3b80      	subs	r3, #128	; 0x80
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <create_name+0x120>)
 80051e0:	5cd3      	ldrb	r3, [r2, r3]
 80051e2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80051e4:	7ffb      	ldrb	r3, [r7, #31]
 80051e6:	4619      	mov	r1, r3
 80051e8:	481d      	ldr	r0, [pc, #116]	; (8005260 <create_name+0x124>)
 80051ea:	f7ff f815 	bl	8004218 <chk_chr>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <create_name+0xbc>
 80051f4:	2306      	movs	r3, #6
 80051f6:	e02c      	b.n	8005252 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80051f8:	7ffb      	ldrb	r3, [r7, #31]
 80051fa:	2b60      	cmp	r3, #96	; 0x60
 80051fc:	d905      	bls.n	800520a <create_name+0xce>
 80051fe:	7ffb      	ldrb	r3, [r7, #31]
 8005200:	2b7a      	cmp	r3, #122	; 0x7a
 8005202:	d802      	bhi.n	800520a <create_name+0xce>
 8005204:	7ffb      	ldrb	r3, [r7, #31]
 8005206:	3b20      	subs	r3, #32
 8005208:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	613a      	str	r2, [r7, #16]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4413      	add	r3, r2
 8005214:	7ffa      	ldrb	r2, [r7, #31]
 8005216:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005218:	e7a6      	b.n	8005168 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800521a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	441a      	add	r2, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <create_name+0xf4>
 800522c:	2306      	movs	r3, #6
 800522e:	e010      	b.n	8005252 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2be5      	cmp	r3, #229	; 0xe5
 8005236:	d102      	bne.n	800523e <create_name+0x102>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2205      	movs	r2, #5
 800523c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800523e:	7ffb      	ldrb	r3, [r7, #31]
 8005240:	2b20      	cmp	r3, #32
 8005242:	d801      	bhi.n	8005248 <create_name+0x10c>
 8005244:	2204      	movs	r2, #4
 8005246:	e000      	b.n	800524a <create_name+0x10e>
 8005248:	2200      	movs	r2, #0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	330b      	adds	r3, #11
 800524e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005250:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	0800a640 	.word	0x0800a640
 8005260:	0800a56c 	.word	0x0800a56c

08005264 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005278:	e002      	b.n	8005280 <follow_path+0x1c>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b2f      	cmp	r3, #47	; 0x2f
 8005286:	d0f8      	beq.n	800527a <follow_path+0x16>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b5c      	cmp	r3, #92	; 0x5c
 800528e:	d0f4      	beq.n	800527a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b1f      	cmp	r3, #31
 800529c:	d80a      	bhi.n	80052b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2280      	movs	r2, #128	; 0x80
 80052a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80052a6:	2100      	movs	r1, #0
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fcf9 	bl	8004ca0 <dir_sdi>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]
 80052b2:	e043      	b.n	800533c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80052b4:	463b      	mov	r3, r7
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff3f 	bl	800513c <create_name>
 80052be:	4603      	mov	r3, r0
 80052c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d134      	bne.n	8005332 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff feaf 	bl	800502c <dir_find>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80052d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d127      	bne.n	8005336 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80052e6:	7afb      	ldrb	r3, [r7, #11]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d122      	bne.n	8005336 <follow_path+0xd2>
 80052f0:	2305      	movs	r3, #5
 80052f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80052f4:	e01f      	b.n	8005336 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80052f6:	7afb      	ldrb	r3, [r7, #11]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11c      	bne.n	800533a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	799b      	ldrb	r3, [r3, #6]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800530c:	2305      	movs	r3, #5
 800530e:	75fb      	strb	r3, [r7, #23]
 8005310:	e014      	b.n	800533c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005320:	4413      	add	r3, r2
 8005322:	4619      	mov	r1, r3
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff fe42 	bl	8004fae <ld_clust>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005330:	e7c0      	b.n	80052b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <follow_path+0xd8>
				break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800533a:	bf00      	nop
			}
		}
	}

	return res;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005352:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d031      	beq.n	80053c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e002      	b.n	800536a <get_ldnumber+0x24>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	3301      	adds	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b20      	cmp	r3, #32
 8005370:	d903      	bls.n	800537a <get_ldnumber+0x34>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b3a      	cmp	r3, #58	; 0x3a
 8005378:	d1f4      	bne.n	8005364 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b3a      	cmp	r3, #58	; 0x3a
 8005380:	d11c      	bne.n	80053bc <get_ldnumber+0x76>
			tp = *path;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	60fa      	str	r2, [r7, #12]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	3b30      	subs	r3, #48	; 0x30
 8005392:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b09      	cmp	r3, #9
 8005398:	d80e      	bhi.n	80053b8 <get_ldnumber+0x72>
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d10a      	bne.n	80053b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <get_ldnumber+0x72>
					vol = (int)i;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	3301      	adds	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	e002      	b.n	80053c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80053c0:	693b      	ldr	r3, [r7, #16]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	70da      	strb	r2, [r3, #3]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff f8e0 	bl	80045b0 <move_window>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <check_fs+0x2a>
 80053f6:	2304      	movs	r3, #4
 80053f8:	e038      	b.n	800546c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3330      	adds	r3, #48	; 0x30
 80053fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fe24 	bl	8004050 <ld_word>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <check_fs+0x48>
 8005414:	2303      	movs	r3, #3
 8005416:	e029      	b.n	800546c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800541e:	2be9      	cmp	r3, #233	; 0xe9
 8005420:	d009      	beq.n	8005436 <check_fs+0x66>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005428:	2beb      	cmp	r3, #235	; 0xeb
 800542a:	d11e      	bne.n	800546a <check_fs+0x9a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005432:	2b90      	cmp	r3, #144	; 0x90
 8005434:	d119      	bne.n	800546a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3330      	adds	r3, #48	; 0x30
 800543a:	3336      	adds	r3, #54	; 0x36
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fe1f 	bl	8004080 <ld_dword>
 8005442:	4603      	mov	r3, r0
 8005444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <check_fs+0xa4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d101      	bne.n	8005452 <check_fs+0x82>
 800544e:	2300      	movs	r3, #0
 8005450:	e00c      	b.n	800546c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3330      	adds	r3, #48	; 0x30
 8005456:	3352      	adds	r3, #82	; 0x52
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fe11 	bl	8004080 <ld_dword>
 800545e:	4602      	mov	r2, r0
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <check_fs+0xa8>)
 8005462:	429a      	cmp	r2, r3
 8005464:	d101      	bne.n	800546a <check_fs+0x9a>
 8005466:	2300      	movs	r3, #0
 8005468:	e000      	b.n	800546c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800546a:	2302      	movs	r3, #2
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	00544146 	.word	0x00544146
 8005478:	33544146 	.word	0x33544146

0800547c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b096      	sub	sp, #88	; 0x58
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ff58 	bl	8005346 <get_ldnumber>
 8005496:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549a:	2b00      	cmp	r3, #0
 800549c:	da01      	bge.n	80054a2 <find_volume+0x26>
 800549e:	230b      	movs	r3, #11
 80054a0:	e22e      	b.n	8005900 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80054a2:	4aa8      	ldr	r2, [pc, #672]	; (8005744 <find_volume+0x2c8>)
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <find_volume+0x3a>
 80054b2:	230c      	movs	r3, #12
 80054b4:	e224      	b.n	8005900 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01a      	beq.n	8005502 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe fd1f 	bl	8003f14 <disk_status>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80054dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10c      	bne.n	8005502 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <find_volume+0x82>
 80054ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80054fa:	230a      	movs	r3, #10
 80054fc:	e200      	b.n	8005900 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80054fe:	2300      	movs	r3, #0
 8005500:	e1fe      	b.n	8005900 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550a:	b2da      	uxtb	r2, r3
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fd17 	bl	8003f48 <disk_initialize>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800552c:	2303      	movs	r3, #3
 800552e:	e1e7      	b.n	8005900 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <find_volume+0xca>
 8005536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005542:	230a      	movs	r3, #10
 8005544:	e1dc      	b.n	8005900 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800554a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800554c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800554e:	f7ff ff3f 	bl	80053d0 <check_fs>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800555c:	2b02      	cmp	r3, #2
 800555e:	d14b      	bne.n	80055f8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005560:	2300      	movs	r3, #0
 8005562:	643b      	str	r3, [r7, #64]	; 0x40
 8005564:	e01f      	b.n	80055a6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800556c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005574:	4413      	add	r3, r2
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	3304      	adds	r3, #4
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d006      	beq.n	8005590 <find_volume+0x114>
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	3308      	adds	r3, #8
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fd7a 	bl	8004080 <ld_dword>
 800558c:	4602      	mov	r2, r0
 800558e:	e000      	b.n	8005592 <find_volume+0x116>
 8005590:	2200      	movs	r2, #0
 8005592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800559a:	440b      	add	r3, r1
 800559c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80055a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a2:	3301      	adds	r3, #1
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
 80055a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d9dc      	bls.n	8005566 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80055ac:	2300      	movs	r3, #0
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80055b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <find_volume+0x140>
 80055b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b8:	3b01      	subs	r3, #1
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80055bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80055c4:	4413      	add	r3, r2
 80055c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80055ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80055cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <find_volume+0x162>
 80055d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055d6:	f7ff fefb 	bl	80053d0 <check_fs>
 80055da:	4603      	mov	r3, r0
 80055dc:	e000      	b.n	80055e0 <find_volume+0x164>
 80055de:	2303      	movs	r3, #3
 80055e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80055e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d905      	bls.n	80055f8 <find_volume+0x17c>
 80055ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ee:	3301      	adds	r3, #1
 80055f0:	643b      	str	r3, [r7, #64]	; 0x40
 80055f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d9e1      	bls.n	80055bc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80055f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d101      	bne.n	8005604 <find_volume+0x188>
 8005600:	2301      	movs	r3, #1
 8005602:	e17d      	b.n	8005900 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005608:	2b01      	cmp	r3, #1
 800560a:	d901      	bls.n	8005610 <find_volume+0x194>
 800560c:	230d      	movs	r3, #13
 800560e:	e177      	b.n	8005900 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	3330      	adds	r3, #48	; 0x30
 8005614:	330b      	adds	r3, #11
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fd1a 	bl	8004050 <ld_word>
 800561c:	4603      	mov	r3, r0
 800561e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005622:	d001      	beq.n	8005628 <find_volume+0x1ac>
 8005624:	230d      	movs	r3, #13
 8005626:	e16b      	b.n	8005900 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	3330      	adds	r3, #48	; 0x30
 800562c:	3316      	adds	r3, #22
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe fd0e 	bl	8004050 <ld_word>
 8005634:	4603      	mov	r3, r0
 8005636:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <find_volume+0x1d0>
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	3330      	adds	r3, #48	; 0x30
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fd1b 	bl	8004080 <ld_dword>
 800564a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005650:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	789b      	ldrb	r3, [r3, #2]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d005      	beq.n	8005670 <find_volume+0x1f4>
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	789b      	ldrb	r3, [r3, #2]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d001      	beq.n	8005670 <find_volume+0x1f4>
 800566c:	230d      	movs	r3, #13
 800566e:	e147      	b.n	8005900 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	789b      	ldrb	r3, [r3, #2]
 8005674:	461a      	mov	r2, r3
 8005676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b29a      	uxth	r2, r3
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	895b      	ldrh	r3, [r3, #10]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <find_volume+0x228>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	895b      	ldrh	r3, [r3, #10]
 8005696:	461a      	mov	r2, r3
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	895b      	ldrh	r3, [r3, #10]
 800569c:	3b01      	subs	r3, #1
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <find_volume+0x22c>
 80056a4:	230d      	movs	r3, #13
 80056a6:	e12b      	b.n	8005900 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	3330      	adds	r3, #48	; 0x30
 80056ac:	3311      	adds	r3, #17
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fcce 	bl	8004050 <ld_word>
 80056b4:	4603      	mov	r3, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	891b      	ldrh	r3, [r3, #8]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <find_volume+0x252>
 80056ca:	230d      	movs	r3, #13
 80056cc:	e118      	b.n	8005900 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	3330      	adds	r3, #48	; 0x30
 80056d2:	3313      	adds	r3, #19
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fcbb 	bl	8004050 <ld_word>
 80056da:	4603      	mov	r3, r0
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <find_volume+0x276>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	3330      	adds	r3, #48	; 0x30
 80056e8:	3320      	adds	r3, #32
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fcc8 	bl	8004080 <ld_dword>
 80056f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	3330      	adds	r3, #48	; 0x30
 80056f6:	330e      	adds	r3, #14
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe fca9 	bl	8004050 <ld_word>
 80056fe:	4603      	mov	r3, r0
 8005700:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <find_volume+0x290>
 8005708:	230d      	movs	r3, #13
 800570a:	e0f9      	b.n	8005900 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800570c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	4413      	add	r3, r2
 8005712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005714:	8912      	ldrh	r2, [r2, #8]
 8005716:	0912      	lsrs	r2, r2, #4
 8005718:	b292      	uxth	r2, r2
 800571a:	4413      	add	r3, r2
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800571e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	429a      	cmp	r2, r3
 8005724:	d201      	bcs.n	800572a <find_volume+0x2ae>
 8005726:	230d      	movs	r3, #13
 8005728:	e0ea      	b.n	8005900 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800572a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005732:	8952      	ldrh	r2, [r2, #10]
 8005734:	fbb3 f3f2 	udiv	r3, r3, r2
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d103      	bne.n	8005748 <find_volume+0x2cc>
 8005740:	230d      	movs	r3, #13
 8005742:	e0dd      	b.n	8005900 <find_volume+0x484>
 8005744:	20000094 	.word	0x20000094
		fmt = FS_FAT32;
 8005748:	2303      	movs	r3, #3
 800574a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005754:	4293      	cmp	r3, r2
 8005756:	d802      	bhi.n	800575e <find_volume+0x2e2>
 8005758:	2302      	movs	r3, #2
 800575a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005764:	4293      	cmp	r3, r2
 8005766:	d802      	bhi.n	800576e <find_volume+0x2f2>
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	1c9a      	adds	r2, r3, #2
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800577a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800577c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800577e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005780:	441a      	add	r2, r3
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005786:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	441a      	add	r2, r3
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005794:	2b03      	cmp	r3, #3
 8005796:	d11e      	bne.n	80057d6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	3330      	adds	r3, #48	; 0x30
 800579c:	332a      	adds	r3, #42	; 0x2a
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fc56 	bl	8004050 <ld_word>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <find_volume+0x332>
 80057aa:	230d      	movs	r3, #13
 80057ac:	e0a8      	b.n	8005900 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	891b      	ldrh	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <find_volume+0x33e>
 80057b6:	230d      	movs	r3, #13
 80057b8:	e0a2      	b.n	8005900 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	3330      	adds	r3, #48	; 0x30
 80057be:	332c      	adds	r3, #44	; 0x2c
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fc5d 	bl	8004080 <ld_dword>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	647b      	str	r3, [r7, #68]	; 0x44
 80057d4:	e01f      	b.n	8005816 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	891b      	ldrh	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <find_volume+0x366>
 80057de:	230d      	movs	r3, #13
 80057e0:	e08e      	b.n	8005900 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	6a1a      	ldr	r2, [r3, #32]
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	441a      	add	r2, r3
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80057ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d103      	bne.n	80057fe <find_volume+0x382>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	e00a      	b.n	8005814 <find_volume+0x398>
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	085a      	lsrs	r2, r3, #1
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005820:	0a5b      	lsrs	r3, r3, #9
 8005822:	429a      	cmp	r2, r3
 8005824:	d201      	bcs.n	800582a <find_volume+0x3ae>
 8005826:	230d      	movs	r3, #13
 8005828:	e06a      	b.n	8005900 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005830:	611a      	str	r2, [r3, #16]
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005844:	2b03      	cmp	r3, #3
 8005846:	d149      	bne.n	80058dc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	3330      	adds	r3, #48	; 0x30
 800584c:	3330      	adds	r3, #48	; 0x30
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fbfe 	bl	8004050 <ld_word>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d140      	bne.n	80058dc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	3301      	adds	r3, #1
 800585e:	4619      	mov	r1, r3
 8005860:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005862:	f7fe fea5 	bl	80045b0 <move_window>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d137      	bne.n	80058dc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	2200      	movs	r2, #0
 8005870:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	3330      	adds	r3, #48	; 0x30
 8005876:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fbe8 	bl	8004050 <ld_word>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005888:	429a      	cmp	r2, r3
 800588a:	d127      	bne.n	80058dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	3330      	adds	r3, #48	; 0x30
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe fbf5 	bl	8004080 <ld_dword>
 8005896:	4602      	mov	r2, r0
 8005898:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <find_volume+0x48c>)
 800589a:	429a      	cmp	r2, r3
 800589c:	d11e      	bne.n	80058dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	3330      	adds	r3, #48	; 0x30
 80058a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fbea 	bl	8004080 <ld_dword>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b17      	ldr	r3, [pc, #92]	; (800590c <find_volume+0x490>)
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d113      	bne.n	80058dc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	3330      	adds	r3, #48	; 0x30
 80058b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe fbdf 	bl	8004080 <ld_dword>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	3330      	adds	r3, #48	; 0x30
 80058cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe fbd5 	bl	8004080 <ld_dword>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80058e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <find_volume+0x494>)
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <find_volume+0x494>)
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <find_volume+0x494>)
 80058f2:	881a      	ldrh	r2, [r3, #0]
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80058f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058fa:	f7fe fdf1 	bl	80044e0 <clear_lock>
#endif
	return FR_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3758      	adds	r7, #88	; 0x58
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	41615252 	.word	0x41615252
 800590c:	61417272 	.word	0x61417272
 8005910:	20000098 	.word	0x20000098

08005914 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800591e:	2309      	movs	r3, #9
 8005920:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <validate+0x4e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d018      	beq.n	8005962 <validate+0x4e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d013      	beq.n	8005962 <validate+0x4e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	889a      	ldrh	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	88db      	ldrh	r3, [r3, #6]
 8005944:	429a      	cmp	r2, r3
 8005946:	d10c      	bne.n	8005962 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fae0 	bl	8003f14 <disk_status>
 8005954:	4603      	mov	r3, r0
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <validate+0x4e>
			res = FR_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <validate+0x5a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	e000      	b.n	8005970 <validate+0x5c>
 800596e:	2300      	movs	r3, #0
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	6013      	str	r3, [r2, #0]
	return res;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005992:	f107 0310 	add.w	r3, r7, #16
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fcd5 	bl	8005346 <get_ldnumber>
 800599c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	da01      	bge.n	80059a8 <f_mount+0x28>
 80059a4:	230b      	movs	r3, #11
 80059a6:	e02b      	b.n	8005a00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80059a8:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <f_mount+0x88>)
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80059b8:	69b8      	ldr	r0, [r7, #24]
 80059ba:	f7fe fd91 	bl	80044e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	490d      	ldr	r1, [pc, #52]	; (8005a08 <f_mount+0x88>)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <f_mount+0x66>
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d001      	beq.n	80059ea <f_mount+0x6a>
 80059e6:	2300      	movs	r3, #0
 80059e8:	e00a      	b.n	8005a00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80059ea:	f107 010c 	add.w	r1, r7, #12
 80059ee:	f107 0308 	add.w	r3, r7, #8
 80059f2:	2200      	movs	r2, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff fd41 	bl	800547c <find_volume>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000094 	.word	0x20000094

08005a0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b098      	sub	sp, #96	; 0x60
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <f_open+0x18>
 8005a20:	2309      	movs	r3, #9
 8005a22:	e1ad      	b.n	8005d80 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005a2c:	79fa      	ldrb	r2, [r7, #7]
 8005a2e:	f107 0110 	add.w	r1, r7, #16
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fd20 	bl	800547c <find_volume>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8191 	bne.w	8005d6e <f_open+0x362>
		dj.obj.fs = fs;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	f107 0314 	add.w	r3, r7, #20
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fc03 	bl	8005264 <follow_path>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005a64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11a      	bne.n	8005aa2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005a6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da03      	bge.n	8005a7e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005a76:	2306      	movs	r3, #6
 8005a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005a7c:	e011      	b.n	8005aa2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fbda 	bl	8004250 <chk_lock>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	f003 031c 	and.w	r3, r3, #28
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d07f      	beq.n	8005bac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d017      	beq.n	8005ae4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005ab4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d10e      	bne.n	8005ada <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005abc:	f7fe fc24 	bl	8004308 <enq_lock>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d006      	beq.n	8005ad4 <f_open+0xc8>
 8005ac6:	f107 0314 	add.w	r3, r7, #20
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fb03 	bl	80050d6 <dir_register>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	e000      	b.n	8005ad6 <f_open+0xca>
 8005ad4:	2312      	movs	r3, #18
 8005ad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	f043 0308 	orr.w	r3, r3, #8
 8005ae0:	71fb      	strb	r3, [r7, #7]
 8005ae2:	e010      	b.n	8005b06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005ae4:	7ebb      	ldrb	r3, [r7, #26]
 8005ae6:	f003 0311 	and.w	r3, r3, #17
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <f_open+0xea>
					res = FR_DENIED;
 8005aee:	2307      	movs	r3, #7
 8005af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005af4:	e007      	b.n	8005b06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <f_open+0xfa>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d168      	bne.n	8005be0 <f_open+0x1d4>
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d063      	beq.n	8005be0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005b18:	f003 f9ca 	bl	8008eb0 <get_fattime>
 8005b1c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	330e      	adds	r3, #14
 8005b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fae9 	bl	80040fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	3316      	adds	r3, #22
 8005b2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fe fae3 	bl	80040fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	330b      	adds	r3, #11
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b42:	4611      	mov	r1, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fa32 	bl	8004fae <ld_clust>
 8005b4a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b50:	2200      	movs	r2, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fa4a 	bl	8004fec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	331c      	adds	r3, #28
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe facc 	bl	80040fc <st_dword>
					fs->wflag = 1;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2201      	movs	r2, #1
 8005b68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d037      	beq.n	8005be0 <f_open+0x1d4>
						dw = fs->winsect;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005b76:	f107 0314 	add.w	r3, r7, #20
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe ff5d 	bl	8004a3e <remove_chain>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d126      	bne.n	8005be0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fd0a 	bl	80045b0 <move_window>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ba6:	3a01      	subs	r2, #1
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	e019      	b.n	8005be0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005bac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d115      	bne.n	8005be0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005bb4:	7ebb      	ldrb	r3, [r7, #26]
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005bc4:	e00c      	b.n	8005be0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <f_open+0x1d4>
 8005bd0:	7ebb      	ldrb	r3, [r7, #26]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <f_open+0x1d4>
						res = FR_DENIED;
 8005bda:	2307      	movs	r3, #7
 8005bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005be0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d128      	bne.n	8005c3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf14      	ite	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	2300      	moveq	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f107 0314 	add.w	r3, r7, #20
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fb93 	bl	800434c <inc_lock>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <f_open+0x22e>
 8005c34:	2302      	movs	r3, #2
 8005c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8095 	bne.w	8005d6e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff f9af 	bl	8004fae <ld_clust>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	331c      	adds	r3, #28
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fa10 	bl	8004080 <ld_dword>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	88da      	ldrh	r2, [r3, #6]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	79fa      	ldrb	r2, [r7, #7]
 8005c7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3330      	adds	r3, #48	; 0x30
 8005c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fa7a 	bl	8004196 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d060      	beq.n	8005d6e <f_open+0x362>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05c      	beq.n	8005d6e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	895b      	ldrh	r3, [r3, #10]
 8005cc0:	025b      	lsls	r3, r3, #9
 8005cc2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd0:	e016      	b.n	8005d00 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fd25 	bl	8004726 <get_fat>
 8005cdc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d802      	bhi.n	8005cea <f_open+0x2de>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf0:	d102      	bne.n	8005cf8 <f_open+0x2ec>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005cf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8005d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <f_open+0x304>
 8005d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d8e0      	bhi.n	8005cd2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005d16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d127      	bne.n	8005d6e <f_open+0x362>
 8005d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d022      	beq.n	8005d6e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fcdb 	bl	80046e8 <clust2sect>
 8005d32:	6478      	str	r0, [r7, #68]	; 0x44
 8005d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d103      	bne.n	8005d42 <f_open+0x336>
						res = FR_INT_ERR;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d40:	e015      	b.n	8005d6e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	0a5a      	lsrs	r2, r3, #9
 8005d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d48:	441a      	add	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	7858      	ldrb	r0, [r3, #1]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f7fe f919 	bl	8003f94 <disk_read>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <f_open+0x362>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <f_open+0x370>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3760      	adds	r7, #96	; 0x60
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08c      	sub	sp, #48	; 0x30
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f107 0210 	add.w	r2, r7, #16
 8005da6:	4611      	mov	r1, r2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fdb3 	bl	8005914 <validate>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <f_write+0x44>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	7d5b      	ldrb	r3, [r3, #21]
 8005dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <f_write+0x4a>
 8005dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dd0:	e14b      	b.n	800606a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	7d1b      	ldrb	r3, [r3, #20]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <f_write+0x5a>
 8005dde:	2307      	movs	r3, #7
 8005de0:	e143      	b.n	800606a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	f080 812d 	bcs.w	800604e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005dfc:	e127      	b.n	800604e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 80e3 	bne.w	8005fd2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	0a5b      	lsrs	r3, r3, #9
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	8952      	ldrh	r2, [r2, #10]
 8005e16:	3a01      	subs	r2, #1
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d143      	bne.n	8005eaa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10c      	bne.n	8005e44 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11a      	bne.n	8005e6c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fe64 	bl	8004b08 <create_chain>
 8005e40:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e42:	e013      	b.n	8005e6c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	4619      	mov	r1, r3
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7fe fef0 	bl	8004c38 <clmt_clust>
 8005e58:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e5a:	e007      	b.n	8005e6c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f7fe fe4f 	bl	8004b08 <create_chain>
 8005e6a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80f2 	beq.w	8006058 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d104      	bne.n	8005e84 <f_write+0xfc>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	755a      	strb	r2, [r3, #21]
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0f2      	b.n	800606a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e8a:	d104      	bne.n	8005e96 <f_write+0x10e>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	755a      	strb	r2, [r3, #21]
 8005e92:	2301      	movs	r3, #1
 8005e94:	e0e9      	b.n	800606a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <f_write+0x122>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	7d1b      	ldrb	r3, [r3, #20]
 8005eae:	b25b      	sxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da18      	bge.n	8005ee6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	7858      	ldrb	r0, [r3, #1]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f7fe f886 	bl	8003fd4 <disk_write>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <f_write+0x150>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	755a      	strb	r2, [r3, #21]
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0c8      	b.n	800606a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	7d1b      	ldrb	r3, [r3, #20]
 8005edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7fe fbfa 	bl	80046e8 <clust2sect>
 8005ef4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <f_write+0x17e>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2202      	movs	r2, #2
 8005f00:	755a      	strb	r2, [r3, #21]
 8005f02:	2302      	movs	r3, #2
 8005f04:	e0b1      	b.n	800606a <f_write+0x2e2>
			sect += csect;
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	0a5b      	lsrs	r3, r3, #9
 8005f12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d03c      	beq.n	8005f94 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	4413      	add	r3, r2
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	8952      	ldrh	r2, [r2, #10]
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d905      	bls.n	8005f34 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	895b      	ldrh	r3, [r3, #10]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	7858      	ldrb	r0, [r3, #1]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	69f9      	ldr	r1, [r7, #28]
 8005f3e:	f7fe f849 	bl	8003fd4 <disk_write>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <f_write+0x1ca>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	755a      	strb	r2, [r3, #21]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e08b      	b.n	800606a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1a      	ldr	r2, [r3, #32]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	6a3a      	ldr	r2, [r7, #32]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d915      	bls.n	8005f8c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	025b      	lsls	r3, r3, #9
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f7fe f8eb 	bl	8004154 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	7d1b      	ldrb	r3, [r3, #20]
 8005f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	025b      	lsls	r3, r3, #9
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005f92:	e03f      	b.n	8006014 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d016      	beq.n	8005fcc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d210      	bcs.n	8005fcc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	7858      	ldrb	r0, [r3, #1]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	f7fd ffec 	bl	8003f94 <disk_read>
 8005fbc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d004      	beq.n	8005fcc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	755a      	strb	r2, [r3, #21]
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e04e      	b.n	800606a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d901      	bls.n	8005fec <f_write+0x264>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	4413      	add	r3, r2
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffe:	69f9      	ldr	r1, [r7, #28]
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe f8a7 	bl	8004154 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	7d1b      	ldrb	r3, [r3, #20]
 800600a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	4413      	add	r3, r2
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	619a      	str	r2, [r3, #24]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	bf38      	it	cc
 8006034:	461a      	movcc	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	441a      	add	r2, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f aed4 	bne.w	8005dfe <f_write+0x76>
 8006056:	e000      	b.n	800605a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006058:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	7d1b      	ldrb	r3, [r3, #20]
 800605e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006062:	b2da      	uxtb	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3730      	adds	r7, #48	; 0x30
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b086      	sub	sp, #24
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f107 0208 	add.w	r2, r7, #8
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fc46 	bl	8005914 <validate>
 8006088:	4603      	mov	r3, r0
 800608a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d168      	bne.n	8006164 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7d1b      	ldrb	r3, [r3, #20]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d062      	beq.n	8006164 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7d1b      	ldrb	r3, [r3, #20]
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da15      	bge.n	80060d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	7858      	ldrb	r0, [r3, #1]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	2301      	movs	r3, #1
 80060b8:	f7fd ff8c 	bl	8003fd4 <disk_write>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <f_sync+0x54>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e04f      	b.n	8006166 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	7d1b      	ldrb	r3, [r3, #20]
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80060d4:	f002 feec 	bl	8008eb0 <get_fattime>
 80060d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7fe fa64 	bl	80045b0 <move_window>
 80060e8:	4603      	mov	r3, r0
 80060ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d138      	bne.n	8006164 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	330b      	adds	r3, #11
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	330b      	adds	r3, #11
 8006102:	f042 0220 	orr.w	r2, r2, #32
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	461a      	mov	r2, r3
 8006114:	68f9      	ldr	r1, [r7, #12]
 8006116:	f7fe ff69 	bl	8004fec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f103 021c 	add.w	r2, r3, #28
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f7fd ffe8 	bl	80040fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3316      	adds	r3, #22
 8006130:	6939      	ldr	r1, [r7, #16]
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd ffe2 	bl	80040fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3312      	adds	r3, #18
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd ffc1 	bl	80040c6 <st_word>
					fs->wflag = 1;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2201      	movs	r2, #1
 8006148:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe fa5d 	bl	800460c <sync_fs>
 8006152:	4603      	mov	r3, r0
 8006154:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	7d1b      	ldrb	r3, [r3, #20]
 800615a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615e:	b2da      	uxtb	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006164:	7dfb      	ldrb	r3, [r7, #23]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff ff7b 	bl	8006072 <f_sync>
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d118      	bne.n	80061b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f107 0208 	add.w	r2, r7, #8
 800618c:	4611      	mov	r1, r2
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fbc0 	bl	8005914 <validate>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10c      	bne.n	80061b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe f960 	bl	8004468 <dec_lock>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b090      	sub	sp, #64	; 0x40
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f107 0208 	add.w	r2, r7, #8
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff fb9d 	bl	8005914 <validate>
 80061da:	4603      	mov	r3, r0
 80061dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80061e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d103      	bne.n	80061f0 <f_lseek+0x2e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7d5b      	ldrb	r3, [r3, #21]
 80061ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80061f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <f_lseek+0x3c>
 80061f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061fc:	e1e6      	b.n	80065cc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80d1 	beq.w	80063aa <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620e:	d15a      	bne.n	80062c6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1d1a      	adds	r2, r3, #4
 800621a:	627a      	str	r2, [r7, #36]	; 0x24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	2302      	movs	r3, #2
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	2b00      	cmp	r3, #0
 800622e:	d03a      	beq.n	80062a6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	2300      	movs	r3, #0
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	3302      	adds	r3, #2
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	3301      	adds	r3, #1
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fa6a 	bl	8004726 <get_fat>
 8006252:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	2b01      	cmp	r3, #1
 8006258:	d804      	bhi.n	8006264 <f_lseek+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	755a      	strb	r2, [r3, #21]
 8006260:	2302      	movs	r3, #2
 8006262:	e1b3      	b.n	80065cc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626a:	d104      	bne.n	8006276 <f_lseek+0xb4>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	755a      	strb	r2, [r3, #21]
 8006272:	2301      	movs	r3, #1
 8006274:	e1aa      	b.n	80065cc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3301      	adds	r3, #1
 800627a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627c:	429a      	cmp	r2, r3
 800627e:	d0de      	beq.n	800623e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	429a      	cmp	r2, r3
 8006286:	d809      	bhi.n	800629c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	627a      	str	r2, [r7, #36]	; 0x24
 800628e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	1d1a      	adds	r2, r3, #4
 8006296:	627a      	str	r2, [r7, #36]	; 0x24
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d3c4      	bcc.n	8006230 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80062ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d803      	bhi.n	80062be <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e184      	b.n	80065c8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80062be:	2311      	movs	r3, #17
 80062c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80062c4:	e180      	b.n	80065c8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d902      	bls.n	80062d6 <f_lseek+0x114>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8172 	beq.w	80065c8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fe fca4 	bl	8004c38 <clmt_clust>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fe f9f2 	bl	80046e8 <clust2sect>
 8006304:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <f_lseek+0x154>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	755a      	strb	r2, [r3, #21]
 8006312:	2302      	movs	r3, #2
 8006314:	e15a      	b.n	80065cc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	3b01      	subs	r3, #1
 800631a:	0a5b      	lsrs	r3, r3, #9
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	8952      	ldrh	r2, [r2, #10]
 8006320:	3a01      	subs	r2, #1
 8006322:	4013      	ands	r3, r2
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4413      	add	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8148 	beq.w	80065c8 <f_lseek+0x406>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	f000 8142 	beq.w	80065c8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	7d1b      	ldrb	r3, [r3, #20]
 8006348:	b25b      	sxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	da18      	bge.n	8006380 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	7858      	ldrb	r0, [r3, #1]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	2301      	movs	r3, #1
 800635e:	f7fd fe39 	bl	8003fd4 <disk_write>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <f_lseek+0x1b0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	755a      	strb	r2, [r3, #21]
 800636e:	2301      	movs	r3, #1
 8006370:	e12c      	b.n	80065cc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	7d1b      	ldrb	r3, [r3, #20]
 8006376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637a:	b2da      	uxtb	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	7858      	ldrb	r0, [r3, #1]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800638a:	2301      	movs	r3, #1
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	f7fd fe01 	bl	8003f94 <disk_read>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <f_lseek+0x1e0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	755a      	strb	r2, [r3, #21]
 800639e:	2301      	movs	r3, #1
 80063a0:	e114      	b.n	80065cc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	621a      	str	r2, [r3, #32]
 80063a8:	e10e      	b.n	80065c8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d908      	bls.n	80063c6 <f_lseek+0x204>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7d1b      	ldrb	r3, [r3, #20]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80a7 	beq.w	800652c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	895b      	ldrh	r3, [r3, #10]
 80063e2:	025b      	lsls	r3, r3, #9
 80063e4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01b      	beq.n	8006424 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	1e5a      	subs	r2, r3, #1
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	1e59      	subs	r1, r3, #1
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006400:	429a      	cmp	r2, r3
 8006402:	d30f      	bcc.n	8006424 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	1e5a      	subs	r2, r3, #1
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	425b      	negs	r3, r3
 800640c:	401a      	ands	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	63bb      	str	r3, [r7, #56]	; 0x38
 8006422:	e022      	b.n	800646a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d119      	bne.n	8006464 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fb67 	bl	8004b08 <create_chain>
 800643a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	2b01      	cmp	r3, #1
 8006440:	d104      	bne.n	800644c <f_lseek+0x28a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	755a      	strb	r2, [r3, #21]
 8006448:	2302      	movs	r3, #2
 800644a:	e0bf      	b.n	80065cc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006452:	d104      	bne.n	800645e <f_lseek+0x29c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	755a      	strb	r2, [r3, #21]
 800645a:	2301      	movs	r3, #1
 800645c:	e0b6      	b.n	80065cc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006462:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006468:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05d      	beq.n	800652c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8006470:	e03a      	b.n	80064e8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	441a      	add	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7d1b      	ldrb	r3, [r3, #20]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fb36 	bl	8004b08 <create_chain>
 800649c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d108      	bne.n	80064b6 <f_lseek+0x2f4>
							ofs = 0; break;
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	e022      	b.n	80064f0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe f939 	bl	8004726 <get_fat>
 80064b4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064bc:	d104      	bne.n	80064c8 <f_lseek+0x306>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	755a      	strb	r2, [r3, #21]
 80064c4:	2301      	movs	r3, #1
 80064c6:	e081      	b.n	80065cc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d904      	bls.n	80064d8 <f_lseek+0x316>
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d304      	bcc.n	80064e2 <f_lseek+0x320>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	755a      	strb	r2, [r3, #21]
 80064de:	2302      	movs	r3, #2
 80064e0:	e074      	b.n	80065cc <f_lseek+0x40a>
					fp->clust = clst;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d8c0      	bhi.n	8006472 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	441a      	add	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006502:	2b00      	cmp	r3, #0
 8006504:	d012      	beq.n	800652c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe f8ec 	bl	80046e8 <clust2sect>
 8006510:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <f_lseek+0x360>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	755a      	strb	r2, [r3, #21]
 800651e:	2302      	movs	r3, #2
 8006520:	e054      	b.n	80065cc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	0a5b      	lsrs	r3, r3, #9
 8006526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006528:	4413      	add	r3, r2
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	429a      	cmp	r2, r3
 8006536:	d90a      	bls.n	800654e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699a      	ldr	r2, [r3, #24]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	7d1b      	ldrb	r3, [r3, #20]
 8006544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006548:	b2da      	uxtb	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	2b00      	cmp	r3, #0
 8006558:	d036      	beq.n	80065c8 <f_lseek+0x406>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006560:	429a      	cmp	r2, r3
 8006562:	d031      	beq.n	80065c8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7d1b      	ldrb	r3, [r3, #20]
 8006568:	b25b      	sxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	da18      	bge.n	80065a0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	7858      	ldrb	r0, [r3, #1]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1a      	ldr	r2, [r3, #32]
 800657c:	2301      	movs	r3, #1
 800657e:	f7fd fd29 	bl	8003fd4 <disk_write>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <f_lseek+0x3d0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	755a      	strb	r2, [r3, #21]
 800658e:	2301      	movs	r3, #1
 8006590:	e01c      	b.n	80065cc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	7d1b      	ldrb	r3, [r3, #20]
 8006596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659a:	b2da      	uxtb	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	7858      	ldrb	r0, [r3, #1]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065aa:	2301      	movs	r3, #1
 80065ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ae:	f7fd fcf1 	bl	8003f94 <disk_read>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <f_lseek+0x400>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	755a      	strb	r2, [r3, #21]
 80065be:	2301      	movs	r3, #1
 80065c0:	e004      	b.n	80065cc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80065c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3740      	adds	r7, #64	; 0x40
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b096      	sub	sp, #88	; 0x58
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80065dc:	f107 0108 	add.w	r1, r7, #8
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	2202      	movs	r2, #2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe ff49 	bl	800547c <find_volume>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80065f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 80ec 	bne.w	80067d6 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe fe2c 	bl	8005264 <follow_path>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8006612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <f_mkdir+0x4c>
 800661a:	2308      	movs	r3, #8
 800661c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8006620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006624:	2b04      	cmp	r3, #4
 8006626:	f040 80d6 	bne.w	80067d6 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800662a:	f107 030c 	add.w	r3, r7, #12
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fa69 	bl	8004b08 <create_chain>
 8006636:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	895b      	ldrh	r3, [r3, #10]
 800663c:	025b      	lsls	r3, r3, #9
 800663e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8006646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <f_mkdir+0x7e>
 800664c:	2307      	movs	r3, #7
 800664e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8006652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006654:	2b01      	cmp	r3, #1
 8006656:	d102      	bne.n	800665e <f_mkdir+0x8a>
 8006658:	2302      	movs	r3, #2
 800665a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800665e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006664:	d102      	bne.n	800666c <f_mkdir+0x98>
 8006666:	2301      	movs	r3, #1
 8006668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800666c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <f_mkdir+0xae>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd ff56 	bl	8004528 <sync_window>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8006682:	f002 fc15 	bl	8008eb0 <get_fattime>
 8006686:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8006688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800668c:	2b00      	cmp	r3, #0
 800668e:	d16a      	bne.n	8006766 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe f827 	bl	80046e8 <clust2sect>
 800669a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	3330      	adds	r3, #48	; 0x30
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80066a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a6:	2100      	movs	r1, #0
 80066a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066aa:	f7fd fd74 	bl	8004196 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80066ae:	220b      	movs	r2, #11
 80066b0:	2120      	movs	r1, #32
 80066b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066b4:	f7fd fd6f 	bl	8004196 <mem_set>
					dir[DIR_Name] = '.';
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	222e      	movs	r2, #46	; 0x2e
 80066bc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80066be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c0:	330b      	adds	r3, #11
 80066c2:	2210      	movs	r2, #16
 80066c4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80066c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c8:	3316      	adds	r3, #22
 80066ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd fd15 	bl	80040fc <st_dword>
					st_clust(fs, dir, dcl);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe fc87 	bl	8004fec <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80066de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e0:	3320      	adds	r3, #32
 80066e2:	2220      	movs	r2, #32
 80066e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fd fd34 	bl	8004154 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80066ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ee:	3321      	adds	r3, #33	; 0x21
 80066f0:	222e      	movs	r2, #46	; 0x2e
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d106      	bne.n	800670e <f_mkdir+0x13a>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006706:	429a      	cmp	r2, r3
 8006708:	d101      	bne.n	800670e <f_mkdir+0x13a>
 800670a:	2300      	movs	r3, #0
 800670c:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006712:	3320      	adds	r3, #32
 8006714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006716:	4619      	mov	r1, r3
 8006718:	f7fe fc68 	bl	8004fec <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	895b      	ldrh	r3, [r3, #10]
 8006720:	653b      	str	r3, [r7, #80]	; 0x50
 8006722:	e01b      	b.n	800675c <f_mkdir+0x188>
					fs->winsect = dsc++;
 8006724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	64fa      	str	r2, [r7, #76]	; 0x4c
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2201      	movs	r2, #1
 8006732:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fd fef6 	bl	8004528 <sync_window>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8006742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10c      	bne.n	8006764 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800674a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674e:	2100      	movs	r1, #0
 8006750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006752:	f7fd fd20 	bl	8004196 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8006756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006758:	3b01      	subs	r3, #1
 800675a:	653b      	str	r3, [r7, #80]	; 0x50
 800675c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e0      	bne.n	8006724 <f_mkdir+0x150>
 8006762:	e000      	b.n	8006766 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8006764:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8006766:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800676e:	f107 030c 	add.w	r3, r7, #12
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fcaf 	bl	80050d6 <dir_register>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800677e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006782:	2b00      	cmp	r3, #0
 8006784:	d120      	bne.n	80067c8 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800678a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678c:	3316      	adds	r3, #22
 800678e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006790:	4618      	mov	r0, r3
 8006792:	f7fd fcb3 	bl	80040fc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800679a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fc25 	bl	8004fec <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80067a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a4:	330b      	adds	r3, #11
 80067a6:	2210      	movs	r2, #16
 80067a8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2201      	movs	r2, #1
 80067ae:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80067b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10e      	bne.n	80067d6 <f_mkdir+0x202>
					res = sync_fs(fs);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fd ff26 	bl	800460c <sync_fs>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80067c6:	e006      	b.n	80067d6 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80067c8:	f107 030c 	add.w	r3, r7, #12
 80067cc:	2200      	movs	r2, #0
 80067ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe f934 	bl	8004a3e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80067d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3758      	adds	r7, #88	; 0x58
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	2b0a      	cmp	r3, #10
 80067f2:	d103      	bne.n	80067fc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80067f4:	210d      	movs	r1, #13
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fff3 	bl	80067e2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	db25      	blt.n	8006854 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	60fa      	str	r2, [r7, #12]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	4413      	add	r3, r2
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b3c      	cmp	r3, #60	; 0x3c
 800681a:	dd12      	ble.n	8006842 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f103 010c 	add.w	r1, r3, #12
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	f107 0308 	add.w	r3, r7, #8
 800682c:	f7ff faac 	bl	8005d88 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	d101      	bne.n	800683c <putc_bfd+0x5a>
 8006838:	2300      	movs	r3, #0
 800683a:	e001      	b.n	8006840 <putc_bfd+0x5e>
 800683c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006840:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	609a      	str	r2, [r3, #8]
 8006852:	e000      	b.n	8006856 <putc_bfd+0x74>
	if (i < 0) return;
 8006854:	bf00      	nop
}
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	db17      	blt.n	800689c <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f103 010c 	add.w	r1, r3, #12
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	461a      	mov	r2, r3
 800687c:	f107 030c 	add.w	r3, r7, #12
 8006880:	f7ff fa82 	bl	8005d88 <f_write>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d108      	bne.n	800689c <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	461a      	mov	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	429a      	cmp	r2, r3
 8006894:	d102      	bne.n	800689c <putc_flush+0x40>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	e001      	b.n	80068a0 <putc_flush+0x44>
	return EOF;
 800689c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	605a      	str	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	609a      	str	r2, [r3, #8]
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b096      	sub	sp, #88	; 0x58
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80068dc:	f107 030c 	add.w	r3, r7, #12
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff ffe0 	bl	80068a8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80068e8:	e009      	b.n	80068fe <f_puts+0x2c>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	781a      	ldrb	r2, [r3, #0]
 80068f2:	f107 030c 	add.w	r3, r7, #12
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff72 	bl	80067e2 <putc_bfd>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f1      	bne.n	80068ea <f_puts+0x18>
	return putc_flush(&pb);
 8006906:	f107 030c 	add.w	r3, r7, #12
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff ffa6 	bl	800685c <putc_flush>
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3758      	adds	r7, #88	; 0x58
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006932:	4b1f      	ldr	r3, [pc, #124]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 8006934:	7a5b      	ldrb	r3, [r3, #9]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d131      	bne.n	80069a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800693c:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 800693e:	7a5b      	ldrb	r3, [r3, #9]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 8006946:	2100      	movs	r1, #0
 8006948:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 800694c:	7a5b      	ldrb	r3, [r3, #9]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 800695c:	7a5b      	ldrb	r3, [r3, #9]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	4b13      	ldr	r3, [pc, #76]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 8006964:	4413      	add	r3, r2
 8006966:	79fa      	ldrb	r2, [r7, #7]
 8006968:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800696a:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 800696c:	7a5b      	ldrb	r3, [r3, #9]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	b2d1      	uxtb	r1, r2
 8006974:	4a0e      	ldr	r2, [pc, #56]	; (80069b0 <FATFS_LinkDriverEx+0x94>)
 8006976:	7251      	strb	r1, [r2, #9]
 8006978:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800697a:	7dbb      	ldrb	r3, [r7, #22]
 800697c:	3330      	adds	r3, #48	; 0x30
 800697e:	b2da      	uxtb	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	3301      	adds	r3, #1
 8006988:	223a      	movs	r2, #58	; 0x3a
 800698a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	3302      	adds	r3, #2
 8006990:	222f      	movs	r2, #47	; 0x2f
 8006992:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3303      	adds	r3, #3
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	200000bc 	.word	0x200000bc

080069b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80069be:	2200      	movs	r2, #0
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ffaa 	bl	800691c <FATFS_LinkDriverEx>
 80069c8:	4603      	mov	r3, r0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f103 0208 	add.w	r2, r3, #8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f103 0208 	add.w	r2, r3, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f103 0208 	add.w	r2, r3, #8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	601a      	str	r2, [r3, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a8a:	d103      	bne.n	8006a94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e00c      	b.n	8006aae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3308      	adds	r3, #8
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e002      	b.n	8006aa2 <vListInsert+0x2e>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d2f6      	bcs.n	8006a9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6892      	ldr	r2, [r2, #8]
 8006afc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6852      	ldr	r2, [r2, #4]
 8006b06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d103      	bne.n	8006b1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	1e5a      	subs	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	e7fe      	b.n	8006b62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006b64:	f001 ff02 	bl	800896c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	441a      	add	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	3b01      	subs	r3, #1
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	441a      	add	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	22ff      	movs	r2, #255	; 0xff
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	22ff      	movs	r2, #255	; 0xff
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d114      	bne.n	8006be4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01a      	beq.n	8006bf8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3310      	adds	r3, #16
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fff8 	bl	8007bbc <xTaskRemoveFromEventList>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d012      	beq.n	8006bf8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <xQueueGenericReset+0xcc>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	e009      	b.n	8006bf8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3310      	adds	r3, #16
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff fef2 	bl	80069d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3324      	adds	r3, #36	; 0x24
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff feed 	bl	80069d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bf8:	f001 fee6 	bl	80089c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bfc:	2301      	movs	r3, #1
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <xQueueGenericCreate+0x28>
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e7fe      	b.n	8006c32 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e004      	b.n	8006c4a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	3350      	adds	r3, #80	; 0x50
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 ffa6 	bl	8008ba0 <pvPortMalloc>
 8006c54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00d      	beq.n	8006c78 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3350      	adds	r3, #80	; 0x50
 8006c64:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c66:	79fa      	ldrb	r2, [r7, #7]
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f805 	bl	8006c82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c78:	69bb      	ldr	r3, [r7, #24]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e002      	b.n	8006ca4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	69b8      	ldr	r0, [r7, #24]
 8006cb4:	f7ff ff42 	bl	8006b3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08e      	sub	sp, #56	; 0x38
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <xQueueGenericSend+0x30>
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf6:	e7fe      	b.n	8006cf6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <xQueueGenericSend+0x3e>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <xQueueGenericSend+0x42>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueGenericSend+0x44>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <xQueueGenericSend+0x5c>
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
 8006d22:	e7fe      	b.n	8006d22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d103      	bne.n	8006d32 <xQueueGenericSend+0x6a>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <xQueueGenericSend+0x6e>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGenericSend+0x70>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d109      	bne.n	8006d50 <xQueueGenericSend+0x88>
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	623b      	str	r3, [r7, #32]
 8006d4e:	e7fe      	b.n	8006d4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d50:	f001 f8cc 	bl	8007eec <xTaskGetSchedulerState>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <xQueueGenericSend+0x98>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <xQueueGenericSend+0x9c>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <xQueueGenericSend+0x9e>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <xQueueGenericSend+0xb6>
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e7fe      	b.n	8006d7c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d7e:	f001 fdf5 	bl	800896c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <xQueueGenericSend+0xcc>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d129      	bne.n	8006de8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9a:	f000 f9ff 	bl	800719c <prvCopyDataToQueue>
 8006d9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 ff05 	bl	8007bbc <xTaskRemoveFromEventList>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d013      	beq.n	8006de0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006db8:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <xQueueGenericSend+0x1f0>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	e00a      	b.n	8006de0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dd0:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <xQueueGenericSend+0x1f0>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006de0:	f001 fdf2 	bl	80089c8 <vPortExitCritical>
				return pdPASS;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e063      	b.n	8006eb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dee:	f001 fdeb 	bl	80089c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e05c      	b.n	8006eb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dfc:	f107 0314 	add.w	r3, r7, #20
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 ff3d 	bl	8007c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e0a:	f001 fddd 	bl	80089c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e0e:	f000 fcbb 	bl	8007788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e12:	f001 fdab 	bl	800896c <vPortEnterCritical>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e22:	d103      	bne.n	8006e2c <xQueueGenericSend+0x164>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e32:	b25b      	sxtb	r3, r3
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e38:	d103      	bne.n	8006e42 <xQueueGenericSend+0x17a>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e42:	f001 fdc1 	bl	80089c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e46:	1d3a      	adds	r2, r7, #4
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 ff2c 	bl	8007cac <xTaskCheckForTimeOut>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d124      	bne.n	8006ea4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e5c:	f000 fa96 	bl	800738c <prvIsQueueFull>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d018      	beq.n	8006e98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	3310      	adds	r3, #16
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fe56 	bl	8007b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e76:	f000 fa21 	bl	80072bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e7a:	f000 fc93 	bl	80077a4 <xTaskResumeAll>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f af7c 	bne.w	8006d7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <xQueueGenericSend+0x1f0>)
 8006e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	e772      	b.n	8006d7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9a:	f000 fa0f 	bl	80072bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e9e:	f000 fc81 	bl	80077a4 <xTaskResumeAll>
 8006ea2:	e76c      	b.n	8006d7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ea6:	f000 fa09 	bl	80072bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eaa:	f000 fc7b 	bl	80077a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006eae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3738      	adds	r7, #56	; 0x38
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d109      	bne.n	8006ee8 <xQueueGenericSendFromISR+0x2c>
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee6:	e7fe      	b.n	8006ee6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <xQueueGenericSendFromISR+0x3a>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <xQueueGenericSendFromISR+0x3e>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericSendFromISR+0x40>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <xQueueGenericSendFromISR+0x58>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	623b      	str	r3, [r7, #32]
 8006f12:	e7fe      	b.n	8006f12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d103      	bne.n	8006f22 <xQueueGenericSendFromISR+0x66>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <xQueueGenericSendFromISR+0x6a>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <xQueueGenericSendFromISR+0x6c>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d109      	bne.n	8006f40 <xQueueGenericSendFromISR+0x84>
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	e7fe      	b.n	8006f3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f40:	f001 fdf0 	bl	8008b24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f44:	f3ef 8211 	mrs	r2, BASEPRI
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	61ba      	str	r2, [r7, #24]
 8006f5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d302      	bcc.n	8006f72 <xQueueGenericSendFromISR+0xb6>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d12c      	bne.n	8006fcc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f82:	f000 f90b 	bl	800719c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f8e:	d112      	bne.n	8006fb6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d016      	beq.n	8006fc6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fe0d 	bl	8007bbc <xTaskRemoveFromEventList>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e007      	b.n	8006fc6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fba:	3301      	adds	r3, #1
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	b25a      	sxtb	r2, r3
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006fca:	e001      	b.n	8006fd0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3738      	adds	r7, #56	; 0x38
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08c      	sub	sp, #48	; 0x30
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <xQueueReceive+0x2e>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	623b      	str	r3, [r7, #32]
 8007010:	e7fe      	b.n	8007010 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <xQueueReceive+0x3c>
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <xQueueReceive+0x40>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <xQueueReceive+0x42>
 8007024:	2300      	movs	r3, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <xQueueReceive+0x5a>
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	e7fe      	b.n	800703c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800703e:	f000 ff55 	bl	8007eec <xTaskGetSchedulerState>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <xQueueReceive+0x6a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <xQueueReceive+0x6e>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <xQueueReceive+0x70>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d109      	bne.n	800706c <xQueueReceive+0x88>
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e7fe      	b.n	800706a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800706c:	f001 fc7e 	bl	800896c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01f      	beq.n	80070bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007080:	f000 f8f6 	bl	8007270 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	1e5a      	subs	r2, r3, #1
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00f      	beq.n	80070b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	3310      	adds	r3, #16
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fd8f 	bl	8007bbc <xTaskRemoveFromEventList>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070a4:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <xQueueReceive+0x1b4>)
 80070a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070b4:	f001 fc88 	bl	80089c8 <vPortExitCritical>
				return pdPASS;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e069      	b.n	8007190 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070c2:	f001 fc81 	bl	80089c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e062      	b.n	8007190 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d106      	bne.n	80070de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d0:	f107 0310 	add.w	r3, r7, #16
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fdd3 	bl	8007c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070de:	f001 fc73 	bl	80089c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e2:	f000 fb51 	bl	8007788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070e6:	f001 fc41 	bl	800896c <vPortEnterCritical>
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070f0:	b25b      	sxtb	r3, r3
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f6:	d103      	bne.n	8007100 <xQueueReceive+0x11c>
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007106:	b25b      	sxtb	r3, r3
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800710c:	d103      	bne.n	8007116 <xQueueReceive+0x132>
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007116:	f001 fc57 	bl	80089c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800711a:	1d3a      	adds	r2, r7, #4
 800711c:	f107 0310 	add.w	r3, r7, #16
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fdc2 	bl	8007cac <xTaskCheckForTimeOut>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d123      	bne.n	8007176 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800712e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007130:	f000 f916 	bl	8007360 <prvIsQueueEmpty>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d017      	beq.n	800716a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	3324      	adds	r3, #36	; 0x24
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4611      	mov	r1, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fcec 	bl	8007b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714a:	f000 f8b7 	bl	80072bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800714e:	f000 fb29 	bl	80077a4 <xTaskResumeAll>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d189      	bne.n	800706c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007158:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <xQueueReceive+0x1b4>)
 800715a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	e780      	b.n	800706c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800716a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716c:	f000 f8a6 	bl	80072bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007170:	f000 fb18 	bl	80077a4 <xTaskResumeAll>
 8007174:	e77a      	b.n	800706c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007178:	f000 f8a0 	bl	80072bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800717c:	f000 fb12 	bl	80077a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007182:	f000 f8ed 	bl	8007360 <prvIsQueueEmpty>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	f43f af6f 	beq.w	800706c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800718e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007190:	4618      	mov	r0, r3
 8007192:	3730      	adds	r7, #48	; 0x30
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10d      	bne.n	80071d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d14d      	bne.n	800725e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 feae 	bl	8007f28 <xTaskPriorityDisinherit>
 80071cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	609a      	str	r2, [r3, #8]
 80071d4:	e043      	b.n	800725e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d119      	bne.n	8007210 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6858      	ldr	r0, [r3, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	461a      	mov	r2, r3
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	f002 fda4 	bl	8009d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	441a      	add	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	429a      	cmp	r2, r3
 8007204:	d32b      	bcc.n	800725e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	605a      	str	r2, [r3, #4]
 800720e:	e026      	b.n	800725e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68d8      	ldr	r0, [r3, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	461a      	mov	r2, r3
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	f002 fd8a 	bl	8009d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	425b      	negs	r3, r3
 800722a:	441a      	add	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	429a      	cmp	r2, r3
 800723a:	d207      	bcs.n	800724c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007244:	425b      	negs	r3, r3
 8007246:	441a      	add	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d105      	bne.n	800725e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	3b01      	subs	r3, #1
 800725c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007266:	697b      	ldr	r3, [r7, #20]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d018      	beq.n	80072b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	441a      	add	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	429a      	cmp	r2, r3
 800729a:	d303      	bcc.n	80072a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68d9      	ldr	r1, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	461a      	mov	r2, r3
 80072ae:	6838      	ldr	r0, [r7, #0]
 80072b0:	f002 fd40 	bl	8009d34 <memcpy>
	}
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072c4:	f001 fb52 	bl	800896c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072d0:	e011      	b.n	80072f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d012      	beq.n	8007300 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3324      	adds	r3, #36	; 0x24
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fc6c 	bl	8007bbc <xTaskRemoveFromEventList>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072ea:	f000 fd3f 	bl	8007d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dce9      	bgt.n	80072d2 <prvUnlockQueue+0x16>
 80072fe:	e000      	b.n	8007302 <prvUnlockQueue+0x46>
					break;
 8007300:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	22ff      	movs	r2, #255	; 0xff
 8007306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800730a:	f001 fb5d 	bl	80089c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800730e:	f001 fb2d 	bl	800896c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007318:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800731a:	e011      	b.n	8007340 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d012      	beq.n	800734a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3310      	adds	r3, #16
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fc47 	bl	8007bbc <xTaskRemoveFromEventList>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007334:	f000 fd1a 	bl	8007d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007338:	7bbb      	ldrb	r3, [r7, #14]
 800733a:	3b01      	subs	r3, #1
 800733c:	b2db      	uxtb	r3, r3
 800733e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007344:	2b00      	cmp	r3, #0
 8007346:	dce9      	bgt.n	800731c <prvUnlockQueue+0x60>
 8007348:	e000      	b.n	800734c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800734a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	22ff      	movs	r2, #255	; 0xff
 8007350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007354:	f001 fb38 	bl	80089c8 <vPortExitCritical>
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007368:	f001 fb00 	bl	800896c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e001      	b.n	800737e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800737e:	f001 fb23 	bl	80089c8 <vPortExitCritical>

	return xReturn;
 8007382:	68fb      	ldr	r3, [r7, #12]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007394:	f001 faea 	bl	800896c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d102      	bne.n	80073aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e001      	b.n	80073ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ae:	f001 fb0b 	bl	80089c8 <vPortExitCritical>

	return xReturn;
 80073b2:	68fb      	ldr	r3, [r7, #12]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e014      	b.n	80073f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073cc:	4a0e      	ldr	r2, [pc, #56]	; (8007408 <vQueueAddToRegistry+0x4c>)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10b      	bne.n	80073f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073d8:	490b      	ldr	r1, [pc, #44]	; (8007408 <vQueueAddToRegistry+0x4c>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073e2:	4a09      	ldr	r2, [pc, #36]	; (8007408 <vQueueAddToRegistry+0x4c>)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073ee:	e005      	b.n	80073fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b07      	cmp	r3, #7
 80073fa:	d9e7      	bls.n	80073cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073fc:	bf00      	nop
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	20012e38 	.word	0x20012e38

0800740c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800741c:	f001 faa6 	bl	800896c <vPortEnterCritical>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800742c:	d103      	bne.n	8007436 <vQueueWaitForMessageRestricted+0x2a>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800743c:	b25b      	sxtb	r3, r3
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007442:	d103      	bne.n	800744c <vQueueWaitForMessageRestricted+0x40>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800744c:	f001 fabc 	bl	80089c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	3324      	adds	r3, #36	; 0x24
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fb81 	bl	8007b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007466:	6978      	ldr	r0, [r7, #20]
 8007468:	f7ff ff28 	bl	80072bc <prvUnlockQueue>
	}
 800746c:	bf00      	nop
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08c      	sub	sp, #48	; 0x30
 8007478:	af04      	add	r7, sp, #16
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4613      	mov	r3, r2
 8007482:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4618      	mov	r0, r3
 800748a:	f001 fb89 	bl	8008ba0 <pvPortMalloc>
 800748e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00e      	beq.n	80074b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007496:	2058      	movs	r0, #88	; 0x58
 8007498:	f001 fb82 	bl	8008ba0 <pvPortMalloc>
 800749c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
 80074aa:	e005      	b.n	80074b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074ac:	6978      	ldr	r0, [r7, #20]
 80074ae:	f001 fc05 	bl	8008cbc <vPortFree>
 80074b2:	e001      	b.n	80074b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d013      	beq.n	80074e6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	2300      	movs	r3, #0
 80074c2:	9303      	str	r3, [sp, #12]
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	9302      	str	r3, [sp, #8]
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f80e 	bl	80074f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074da:	69f8      	ldr	r0, [r7, #28]
 80074dc:	f000 f89a 	bl	8007614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074e0:	2301      	movs	r3, #1
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	e002      	b.n	80074ec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074ec:	69bb      	ldr	r3, [r7, #24]
	}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b088      	sub	sp, #32
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	461a      	mov	r2, r3
 800750e:	21a5      	movs	r1, #165	; 0xa5
 8007510:	f002 fc1b 	bl	8009d4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800751e:	3b01      	subs	r3, #1
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f023 0307 	bic.w	r3, r3, #7
 800752c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f003 0307 	and.w	r3, r3, #7
 8007534:	2b00      	cmp	r3, #0
 8007536:	d009      	beq.n	800754c <prvInitialiseNewTask+0x56>
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	e7fe      	b.n	800754a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01f      	beq.n	8007592 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007552:	2300      	movs	r3, #0
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	e012      	b.n	800757e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	7819      	ldrb	r1, [r3, #0]
 8007560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	3334      	adds	r3, #52	; 0x34
 8007568:	460a      	mov	r2, r1
 800756a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d006      	beq.n	8007586 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	3301      	adds	r3, #1
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b09      	cmp	r3, #9
 8007582:	d9e9      	bls.n	8007558 <prvInitialiseNewTask+0x62>
 8007584:	e000      	b.n	8007588 <prvInitialiseNewTask+0x92>
			{
				break;
 8007586:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007590:	e003      	b.n	800759a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	2b04      	cmp	r3, #4
 800759e:	d901      	bls.n	80075a4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075a0:	2304      	movs	r3, #4
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ae:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fa29 	bl	8006a12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	3318      	adds	r3, #24
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fa24 	bl	8006a12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	f1c3 0205 	rsb	r2, r3, #5
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	2200      	movs	r2, #0
 80075e4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	68f9      	ldr	r1, [r7, #12]
 80075f2:	69b8      	ldr	r0, [r7, #24]
 80075f4:	f001 f890 	bl	8008718 <pxPortInitialiseStack>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800760a:	bf00      	nop
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800761c:	f001 f9a6 	bl	800896c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007620:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <prvAddNewTaskToReadyList+0xc0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	4a2b      	ldr	r2, [pc, #172]	; (80076d4 <prvAddNewTaskToReadyList+0xc0>)
 8007628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800762a:	4b2b      	ldr	r3, [pc, #172]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007632:	4a29      	ldr	r2, [pc, #164]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007638:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <prvAddNewTaskToReadyList+0xc0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d110      	bne.n	8007662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007640:	f000 fbb8 	bl	8007db4 <prvInitialiseTaskLists>
 8007644:	e00d      	b.n	8007662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007646:	4b25      	ldr	r3, [pc, #148]	; (80076dc <prvAddNewTaskToReadyList+0xc8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800764e:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	429a      	cmp	r2, r3
 800765a:	d802      	bhi.n	8007662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800765c:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007662:	4b1f      	ldr	r3, [pc, #124]	; (80076e0 <prvAddNewTaskToReadyList+0xcc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <prvAddNewTaskToReadyList+0xcc>)
 800766a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800766c:	4b1c      	ldr	r3, [pc, #112]	; (80076e0 <prvAddNewTaskToReadyList+0xcc>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	4b19      	ldr	r3, [pc, #100]	; (80076e4 <prvAddNewTaskToReadyList+0xd0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4313      	orrs	r3, r2
 8007682:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <prvAddNewTaskToReadyList+0xd0>)
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <prvAddNewTaskToReadyList+0xd4>)
 8007694:	441a      	add	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f7ff f9c5 	bl	8006a2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076a2:	f001 f991 	bl	80089c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076a6:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <prvAddNewTaskToReadyList+0xc8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d207      	bcs.n	80076cc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076bc:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <prvAddNewTaskToReadyList+0xd8>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200001a0 	.word	0x200001a0
 80076d8:	200000c8 	.word	0x200000c8
 80076dc:	200001ac 	.word	0x200001ac
 80076e0:	200001bc 	.word	0x200001bc
 80076e4:	200001a8 	.word	0x200001a8
 80076e8:	200000cc 	.word	0x200000cc
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80076f6:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <vTaskStartScheduler+0x80>)
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2300      	movs	r3, #0
 8007700:	2282      	movs	r2, #130	; 0x82
 8007702:	491c      	ldr	r1, [pc, #112]	; (8007774 <vTaskStartScheduler+0x84>)
 8007704:	481c      	ldr	r0, [pc, #112]	; (8007778 <vTaskStartScheduler+0x88>)
 8007706:	f7ff feb5 	bl	8007474 <xTaskCreate>
 800770a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d102      	bne.n	8007718 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8007712:	f000 fcf3 	bl	80080fc <xTimerCreateTimerTask>
 8007716:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d115      	bne.n	800774a <vTaskStartScheduler+0x5a>
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007730:	4b12      	ldr	r3, [pc, #72]	; (800777c <vTaskStartScheduler+0x8c>)
 8007732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007736:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007738:	4b11      	ldr	r3, [pc, #68]	; (8007780 <vTaskStartScheduler+0x90>)
 800773a:	2201      	movs	r2, #1
 800773c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <vTaskStartScheduler+0x94>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007744:	f001 f874 	bl	8008830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007748:	e00d      	b.n	8007766 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007750:	d109      	bne.n	8007766 <vTaskStartScheduler+0x76>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	607b      	str	r3, [r7, #4]
 8007764:	e7fe      	b.n	8007764 <vTaskStartScheduler+0x74>
}
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200001c4 	.word	0x200001c4
 8007774:	0800a5b0 	.word	0x0800a5b0
 8007778:	08007d85 	.word	0x08007d85
 800777c:	200001c0 	.word	0x200001c0
 8007780:	200001ac 	.word	0x200001ac
 8007784:	200001a4 	.word	0x200001a4

08007788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <vTaskSuspendAll+0x18>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	4a03      	ldr	r2, [pc, #12]	; (80077a0 <vTaskSuspendAll+0x18>)
 8007794:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007796:	bf00      	nop
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	200001c8 	.word	0x200001c8

080077a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077b2:	4b41      	ldr	r3, [pc, #260]	; (80078b8 <xTaskResumeAll+0x114>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <xTaskResumeAll+0x2a>
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e7fe      	b.n	80077cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077ce:	f001 f8cd 	bl	800896c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077d2:	4b39      	ldr	r3, [pc, #228]	; (80078b8 <xTaskResumeAll+0x114>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4a37      	ldr	r2, [pc, #220]	; (80078b8 <xTaskResumeAll+0x114>)
 80077da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077dc:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <xTaskResumeAll+0x114>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d161      	bne.n	80078a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077e4:	4b35      	ldr	r3, [pc, #212]	; (80078bc <xTaskResumeAll+0x118>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d05d      	beq.n	80078a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ec:	e02e      	b.n	800784c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ee:	4b34      	ldr	r3, [pc, #208]	; (80078c0 <xTaskResumeAll+0x11c>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3318      	adds	r3, #24
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff f973 	bl	8006ae6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff f96e 	bl	8006ae6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	2201      	movs	r2, #1
 8007810:	409a      	lsls	r2, r3
 8007812:	4b2c      	ldr	r3, [pc, #176]	; (80078c4 <xTaskResumeAll+0x120>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4313      	orrs	r3, r2
 8007818:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <xTaskResumeAll+0x120>)
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4a27      	ldr	r2, [pc, #156]	; (80078c8 <xTaskResumeAll+0x124>)
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7ff f8fa 	bl	8006a2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	4b23      	ldr	r3, [pc, #140]	; (80078cc <xTaskResumeAll+0x128>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	429a      	cmp	r2, r3
 8007844:	d302      	bcc.n	800784c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007846:	4b22      	ldr	r3, [pc, #136]	; (80078d0 <xTaskResumeAll+0x12c>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800784c:	4b1c      	ldr	r3, [pc, #112]	; (80078c0 <xTaskResumeAll+0x11c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1cc      	bne.n	80077ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800785a:	f000 fb27 	bl	8007eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800785e:	4b1d      	ldr	r3, [pc, #116]	; (80078d4 <xTaskResumeAll+0x130>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d010      	beq.n	800788c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800786a:	f000 f847 	bl	80078fc <xTaskIncrementTick>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <xTaskResumeAll+0x12c>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3b01      	subs	r3, #1
 800787e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f1      	bne.n	800786a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <xTaskResumeAll+0x130>)
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <xTaskResumeAll+0x12c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007898:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <xTaskResumeAll+0x134>)
 800789a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078a8:	f001 f88e 	bl	80089c8 <vPortExitCritical>

	return xAlreadyYielded;
 80078ac:	68bb      	ldr	r3, [r7, #8]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	200001c8 	.word	0x200001c8
 80078bc:	200001a0 	.word	0x200001a0
 80078c0:	20000160 	.word	0x20000160
 80078c4:	200001a8 	.word	0x200001a8
 80078c8:	200000cc 	.word	0x200000cc
 80078cc:	200000c8 	.word	0x200000c8
 80078d0:	200001b4 	.word	0x200001b4
 80078d4:	200001b0 	.word	0x200001b0
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <xTaskGetTickCount+0x1c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078e8:	687b      	ldr	r3, [r7, #4]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	200001a4 	.word	0x200001a4

080078fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007906:	4b4e      	ldr	r3, [pc, #312]	; (8007a40 <xTaskIncrementTick+0x144>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 8087 	bne.w	8007a1e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007910:	4b4c      	ldr	r3, [pc, #304]	; (8007a44 <xTaskIncrementTick+0x148>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007918:	4a4a      	ldr	r2, [pc, #296]	; (8007a44 <xTaskIncrementTick+0x148>)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d11f      	bne.n	8007964 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007924:	4b48      	ldr	r3, [pc, #288]	; (8007a48 <xTaskIncrementTick+0x14c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <xTaskIncrementTick+0x46>
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	e7fe      	b.n	8007940 <xTaskIncrementTick+0x44>
 8007942:	4b41      	ldr	r3, [pc, #260]	; (8007a48 <xTaskIncrementTick+0x14c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	4b40      	ldr	r3, [pc, #256]	; (8007a4c <xTaskIncrementTick+0x150>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a3e      	ldr	r2, [pc, #248]	; (8007a48 <xTaskIncrementTick+0x14c>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	4a3e      	ldr	r2, [pc, #248]	; (8007a4c <xTaskIncrementTick+0x150>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <xTaskIncrementTick+0x154>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	4a3c      	ldr	r2, [pc, #240]	; (8007a50 <xTaskIncrementTick+0x154>)
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	f000 faa4 	bl	8007eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007964:	4b3b      	ldr	r3, [pc, #236]	; (8007a54 <xTaskIncrementTick+0x158>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	429a      	cmp	r2, r3
 800796c:	d348      	bcc.n	8007a00 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <xTaskIncrementTick+0x14c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d104      	bne.n	8007982 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007978:	4b36      	ldr	r3, [pc, #216]	; (8007a54 <xTaskIncrementTick+0x158>)
 800797a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800797e:	601a      	str	r2, [r3, #0]
					break;
 8007980:	e03e      	b.n	8007a00 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007982:	4b31      	ldr	r3, [pc, #196]	; (8007a48 <xTaskIncrementTick+0x14c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	429a      	cmp	r2, r3
 8007998:	d203      	bcs.n	80079a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800799a:	4a2e      	ldr	r2, [pc, #184]	; (8007a54 <xTaskIncrementTick+0x158>)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079a0:	e02e      	b.n	8007a00 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff f89d 	bl	8006ae6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	3318      	adds	r3, #24
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff f894 	bl	8006ae6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	2201      	movs	r2, #1
 80079c4:	409a      	lsls	r2, r3
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <xTaskIncrementTick+0x15c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <xTaskIncrementTick+0x15c>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4a1f      	ldr	r2, [pc, #124]	; (8007a5c <xTaskIncrementTick+0x160>)
 80079de:	441a      	add	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7ff f820 	bl	8006a2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <xTaskIncrementTick+0x164>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d3b9      	bcc.n	800796e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079fe:	e7b6      	b.n	800796e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <xTaskIncrementTick+0x164>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	4915      	ldr	r1, [pc, #84]	; (8007a5c <xTaskIncrementTick+0x160>)
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d907      	bls.n	8007a28 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e004      	b.n	8007a28 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a1e:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <xTaskIncrementTick+0x168>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	4a0f      	ldr	r2, [pc, #60]	; (8007a64 <xTaskIncrementTick+0x168>)
 8007a26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a28:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <xTaskIncrementTick+0x16c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a34:	697b      	ldr	r3, [r7, #20]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	200001c8 	.word	0x200001c8
 8007a44:	200001a4 	.word	0x200001a4
 8007a48:	20000158 	.word	0x20000158
 8007a4c:	2000015c 	.word	0x2000015c
 8007a50:	200001b8 	.word	0x200001b8
 8007a54:	200001c0 	.word	0x200001c0
 8007a58:	200001a8 	.word	0x200001a8
 8007a5c:	200000cc 	.word	0x200000cc
 8007a60:	200000c8 	.word	0x200000c8
 8007a64:	200001b0 	.word	0x200001b0
 8007a68:	200001b4 	.word	0x200001b4

08007a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a72:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <vTaskSwitchContext+0xa0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a7a:	4b25      	ldr	r3, [pc, #148]	; (8007b10 <vTaskSwitchContext+0xa4>)
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a80:	e03e      	b.n	8007b00 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007a82:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <vTaskSwitchContext+0xa4>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a88:	4b22      	ldr	r3, [pc, #136]	; (8007b14 <vTaskSwitchContext+0xa8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	fab3 f383 	clz	r3, r3
 8007a94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	f1c3 031f 	rsb	r3, r3, #31
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	491e      	ldr	r1, [pc, #120]	; (8007b18 <vTaskSwitchContext+0xac>)
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	607b      	str	r3, [r7, #4]
 8007ac4:	e7fe      	b.n	8007ac4 <vTaskSwitchContext+0x58>
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4a11      	ldr	r2, [pc, #68]	; (8007b18 <vTaskSwitchContext+0xac>)
 8007ad2:	4413      	add	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	605a      	str	r2, [r3, #4]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d104      	bne.n	8007af6 <vTaskSwitchContext+0x8a>
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	4a07      	ldr	r2, [pc, #28]	; (8007b1c <vTaskSwitchContext+0xb0>)
 8007afe:	6013      	str	r3, [r2, #0]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	200001c8 	.word	0x200001c8
 8007b10:	200001b4 	.word	0x200001b4
 8007b14:	200001a8 	.word	0x200001a8
 8007b18:	200000cc 	.word	0x200000cc
 8007b1c:	200000c8 	.word	0x200000c8

08007b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <vTaskPlaceOnEventList+0x24>
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e7fe      	b.n	8007b42 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b44:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <vTaskPlaceOnEventList+0x44>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3318      	adds	r3, #24
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fe ff91 	bl	8006a74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b52:	2101      	movs	r1, #1
 8007b54:	6838      	ldr	r0, [r7, #0]
 8007b56:	f000 fa6b 	bl	8008030 <prvAddCurrentTaskToDelayedList>
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	200000c8 	.word	0x200000c8

08007b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d109      	bne.n	8007b8e <vTaskPlaceOnEventListRestricted+0x26>
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e7fe      	b.n	8007b8c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <vTaskPlaceOnEventListRestricted+0x50>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3318      	adds	r3, #24
 8007b94:	4619      	mov	r1, r3
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7fe ff48 	bl	8006a2c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ba6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	68b8      	ldr	r0, [r7, #8]
 8007bac:	f000 fa40 	bl	8008030 <prvAddCurrentTaskToDelayedList>
	}
 8007bb0:	bf00      	nop
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	200000c8 	.word	0x200000c8

08007bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <xTaskRemoveFromEventList+0x2a>
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e7fe      	b.n	8007be4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe ff7b 	bl	8006ae6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <xTaskRemoveFromEventList+0xac>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11c      	bne.n	8007c32 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe ff72 	bl	8006ae6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	2201      	movs	r2, #1
 8007c08:	409a      	lsls	r2, r3
 8007c0a:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <xTaskRemoveFromEventList+0xb0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <xTaskRemoveFromEventList+0xb0>)
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <xTaskRemoveFromEventList+0xb4>)
 8007c22:	441a      	add	r2, r3
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fe fefe 	bl	8006a2c <vListInsertEnd>
 8007c30:	e005      	b.n	8007c3e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3318      	adds	r3, #24
 8007c36:	4619      	mov	r1, r3
 8007c38:	480e      	ldr	r0, [pc, #56]	; (8007c74 <xTaskRemoveFromEventList+0xb8>)
 8007c3a:	f7fe fef7 	bl	8006a2c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c42:	4b0d      	ldr	r3, [pc, #52]	; (8007c78 <xTaskRemoveFromEventList+0xbc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d905      	bls.n	8007c58 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <xTaskRemoveFromEventList+0xc0>)
 8007c52:	2201      	movs	r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e001      	b.n	8007c5c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c5c:	697b      	ldr	r3, [r7, #20]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200001c8 	.word	0x200001c8
 8007c6c:	200001a8 	.word	0x200001a8
 8007c70:	200000cc 	.word	0x200000cc
 8007c74:	20000160 	.word	0x20000160
 8007c78:	200000c8 	.word	0x200000c8
 8007c7c:	200001b4 	.word	0x200001b4

08007c80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <vTaskInternalSetTimeOutState+0x24>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <vTaskInternalSetTimeOutState+0x28>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	605a      	str	r2, [r3, #4]
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	200001b8 	.word	0x200001b8
 8007ca8:	200001a4 	.word	0x200001a4

08007cac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d109      	bne.n	8007cd0 <xTaskCheckForTimeOut+0x24>
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	e7fe      	b.n	8007cce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d109      	bne.n	8007cea <xTaskCheckForTimeOut+0x3e>
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e7fe      	b.n	8007ce8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007cea:	f000 fe3f 	bl	800896c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cee:	4b1d      	ldr	r3, [pc, #116]	; (8007d64 <xTaskCheckForTimeOut+0xb8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d06:	d102      	bne.n	8007d0e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e023      	b.n	8007d56 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <xTaskCheckForTimeOut+0xbc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d007      	beq.n	8007d2a <xTaskCheckForTimeOut+0x7e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	e015      	b.n	8007d56 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d20b      	bcs.n	8007d4c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	1ad2      	subs	r2, r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff9d 	bl	8007c80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	e004      	b.n	8007d56 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d52:	2301      	movs	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d56:	f000 fe37 	bl	80089c8 <vPortExitCritical>

	return xReturn;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	200001a4 	.word	0x200001a4
 8007d68:	200001b8 	.word	0x200001b8

08007d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d70:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <vTaskMissedYield+0x14>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	200001b4 	.word	0x200001b4

08007d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d8c:	f000 f852 	bl	8007e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <prvIdleTask+0x28>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d9f9      	bls.n	8007d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <prvIdleTask+0x2c>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007da8:	e7f0      	b.n	8007d8c <prvIdleTask+0x8>
 8007daa:	bf00      	nop
 8007dac:	200000cc 	.word	0x200000cc
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dba:	2300      	movs	r3, #0
 8007dbc:	607b      	str	r3, [r7, #4]
 8007dbe:	e00c      	b.n	8007dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4a12      	ldr	r2, [pc, #72]	; (8007e14 <prvInitialiseTaskLists+0x60>)
 8007dcc:	4413      	add	r3, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fdff 	bl	80069d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d9ef      	bls.n	8007dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007de0:	480d      	ldr	r0, [pc, #52]	; (8007e18 <prvInitialiseTaskLists+0x64>)
 8007de2:	f7fe fdf6 	bl	80069d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007de6:	480d      	ldr	r0, [pc, #52]	; (8007e1c <prvInitialiseTaskLists+0x68>)
 8007de8:	f7fe fdf3 	bl	80069d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dec:	480c      	ldr	r0, [pc, #48]	; (8007e20 <prvInitialiseTaskLists+0x6c>)
 8007dee:	f7fe fdf0 	bl	80069d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007df2:	480c      	ldr	r0, [pc, #48]	; (8007e24 <prvInitialiseTaskLists+0x70>)
 8007df4:	f7fe fded 	bl	80069d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007df8:	480b      	ldr	r0, [pc, #44]	; (8007e28 <prvInitialiseTaskLists+0x74>)
 8007dfa:	f7fe fdea 	bl	80069d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <prvInitialiseTaskLists+0x78>)
 8007e00:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <prvInitialiseTaskLists+0x64>)
 8007e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e04:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <prvInitialiseTaskLists+0x7c>)
 8007e06:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <prvInitialiseTaskLists+0x68>)
 8007e08:	601a      	str	r2, [r3, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	200000cc 	.word	0x200000cc
 8007e18:	20000130 	.word	0x20000130
 8007e1c:	20000144 	.word	0x20000144
 8007e20:	20000160 	.word	0x20000160
 8007e24:	20000174 	.word	0x20000174
 8007e28:	2000018c 	.word	0x2000018c
 8007e2c:	20000158 	.word	0x20000158
 8007e30:	2000015c 	.word	0x2000015c

08007e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e3a:	e019      	b.n	8007e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e3c:	f000 fd96 	bl	800896c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <prvCheckTasksWaitingTermination+0x4c>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fe4a 	bl	8006ae6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <prvCheckTasksWaitingTermination+0x50>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <prvCheckTasksWaitingTermination+0x50>)
 8007e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	4a09      	ldr	r2, [pc, #36]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e66:	f000 fdaf 	bl	80089c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f80e 	bl	8007e8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e1      	bne.n	8007e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000174 	.word	0x20000174
 8007e84:	200001a0 	.word	0x200001a0
 8007e88:	20000188 	.word	0x20000188

08007e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 ff0f 	bl	8008cbc <vPortFree>
			vPortFree( pxTCB );
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 ff0c 	bl	8008cbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ec4:	e008      	b.n	8007ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec6:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	20000158 	.word	0x20000158
 8007ee8:	200001c0 	.word	0x200001c0

08007eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <xTaskGetSchedulerState+0x34>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007efa:	2301      	movs	r3, #1
 8007efc:	607b      	str	r3, [r7, #4]
 8007efe:	e008      	b.n	8007f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f00:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <xTaskGetSchedulerState+0x38>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d102      	bne.n	8007f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	e001      	b.n	8007f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f12:	687b      	ldr	r3, [r7, #4]
	}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	200001ac 	.word	0x200001ac
 8007f24:	200001c8 	.word	0x200001c8

08007f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d06c      	beq.n	8008018 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f3e:	4b39      	ldr	r3, [pc, #228]	; (8008024 <xTaskPriorityDisinherit+0xfc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d009      	beq.n	8007f5c <xTaskPriorityDisinherit+0x34>
 8007f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e7fe      	b.n	8007f5a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <xTaskPriorityDisinherit+0x50>
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	60bb      	str	r3, [r7, #8]
 8007f76:	e7fe      	b.n	8007f76 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f7c:	1e5a      	subs	r2, r3, #1
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d044      	beq.n	8008018 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d140      	bne.n	8008018 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fda3 	bl	8006ae6 <uxListRemove>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d115      	bne.n	8007fd2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007faa:	491f      	ldr	r1, [pc, #124]	; (8008028 <xTaskPriorityDisinherit+0x100>)
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xTaskPriorityDisinherit+0xaa>
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc6:	43da      	mvns	r2, r3
 8007fc8:	4b18      	ldr	r3, [pc, #96]	; (800802c <xTaskPriorityDisinherit+0x104>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	4a17      	ldr	r2, [pc, #92]	; (800802c <xTaskPriorityDisinherit+0x104>)
 8007fd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	f1c3 0205 	rsb	r2, r3, #5
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	2201      	movs	r2, #1
 8007fec:	409a      	lsls	r2, r3
 8007fee:	4b0f      	ldr	r3, [pc, #60]	; (800802c <xTaskPriorityDisinherit+0x104>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	4a0d      	ldr	r2, [pc, #52]	; (800802c <xTaskPriorityDisinherit+0x104>)
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4a08      	ldr	r2, [pc, #32]	; (8008028 <xTaskPriorityDisinherit+0x100>)
 8008006:	441a      	add	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	3304      	adds	r3, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f7fe fd0c 	bl	8006a2c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008018:	697b      	ldr	r3, [r7, #20]
	}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200000c8 	.word	0x200000c8
 8008028:	200000cc 	.word	0x200000cc
 800802c:	200001a8 	.word	0x200001a8

08008030 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800803a:	4b29      	ldr	r3, [pc, #164]	; (80080e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3304      	adds	r3, #4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fd4d 	bl	8006ae6 <uxListRemove>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10b      	bne.n	800806a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	2201      	movs	r2, #1
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43da      	mvns	r2, r3
 8008060:	4b21      	ldr	r3, [pc, #132]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4013      	ands	r3, r2
 8008066:	4a20      	ldr	r2, [pc, #128]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008068:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008070:	d10a      	bne.n	8008088 <prvAddCurrentTaskToDelayedList+0x58>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	481a      	ldr	r0, [pc, #104]	; (80080ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8008082:	f7fe fcd3 	bl	8006a2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008086:	e026      	b.n	80080d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008090:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	429a      	cmp	r2, r3
 800809e:	d209      	bcs.n	80080b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a0:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f7fe fce1 	bl	8006a74 <vListInsert>
}
 80080b2:	e010      	b.n	80080d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3304      	adds	r3, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	4610      	mov	r0, r2
 80080c2:	f7fe fcd7 	bl	8006a74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d202      	bcs.n	80080d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080d0:	4a09      	ldr	r2, [pc, #36]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6013      	str	r3, [r2, #0]
}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200001a4 	.word	0x200001a4
 80080e4:	200000c8 	.word	0x200000c8
 80080e8:	200001a8 	.word	0x200001a8
 80080ec:	2000018c 	.word	0x2000018c
 80080f0:	2000015c 	.word	0x2000015c
 80080f4:	20000158 	.word	0x20000158
 80080f8:	200001c0 	.word	0x200001c0

080080fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8008102:	2300      	movs	r3, #0
 8008104:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008106:	f000 fad1 	bl	80086ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800810a:	4b11      	ldr	r3, [pc, #68]	; (8008150 <xTimerCreateTimerTask+0x54>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8008112:	4b10      	ldr	r3, [pc, #64]	; (8008154 <xTimerCreateTimerTask+0x58>)
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	2302      	movs	r3, #2
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008120:	490d      	ldr	r1, [pc, #52]	; (8008158 <xTimerCreateTimerTask+0x5c>)
 8008122:	480e      	ldr	r0, [pc, #56]	; (800815c <xTimerCreateTimerTask+0x60>)
 8008124:	f7ff f9a6 	bl	8007474 <xTaskCreate>
 8008128:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d109      	bne.n	8008144 <xTimerCreateTimerTask+0x48>
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	603b      	str	r3, [r7, #0]
 8008142:	e7fe      	b.n	8008142 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8008144:	687b      	ldr	r3, [r7, #4]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200001fc 	.word	0x200001fc
 8008154:	20000200 	.word	0x20000200
 8008158:	0800a5b8 	.word	0x0800a5b8
 800815c:	08008291 	.word	0x08008291

08008160 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800816e:	2300      	movs	r3, #0
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <xTimerGenericCommand+0x2c>
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	623b      	str	r3, [r7, #32]
 800818a:	e7fe      	b.n	800818a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800818c:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <xTimerGenericCommand+0x94>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d02a      	beq.n	80081ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b05      	cmp	r3, #5
 80081a4:	dc18      	bgt.n	80081d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081a6:	f7ff fea1 	bl	8007eec <xTaskGetSchedulerState>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d109      	bne.n	80081c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081b0:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <xTimerGenericCommand+0x94>)
 80081b2:	6818      	ldr	r0, [r3, #0]
 80081b4:	f107 0114 	add.w	r1, r7, #20
 80081b8:	2300      	movs	r3, #0
 80081ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081bc:	f7fe fd84 	bl	8006cc8 <xQueueGenericSend>
 80081c0:	6278      	str	r0, [r7, #36]	; 0x24
 80081c2:	e012      	b.n	80081ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081c4:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <xTimerGenericCommand+0x94>)
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	f107 0114 	add.w	r1, r7, #20
 80081cc:	2300      	movs	r3, #0
 80081ce:	2200      	movs	r2, #0
 80081d0:	f7fe fd7a 	bl	8006cc8 <xQueueGenericSend>
 80081d4:	6278      	str	r0, [r7, #36]	; 0x24
 80081d6:	e008      	b.n	80081ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <xTimerGenericCommand+0x94>)
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	f107 0114 	add.w	r1, r7, #20
 80081e0:	2300      	movs	r3, #0
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	f7fe fe6a 	bl	8006ebc <xQueueGenericSendFromISR>
 80081e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3728      	adds	r7, #40	; 0x28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200001fc 	.word	0x200001fc

080081f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008202:	4b22      	ldr	r3, [pc, #136]	; (800828c <prvProcessExpiredTimer+0x94>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	3304      	adds	r3, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fc68 	bl	8006ae6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d021      	beq.n	8008268 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	18d1      	adds	r1, r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	6978      	ldr	r0, [r7, #20]
 8008232:	f000 f8d1 	bl	80083d8 <prvInsertTimerInActiveList>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01e      	beq.n	800827a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800823c:	2300      	movs	r3, #0
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	2300      	movs	r3, #0
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	2100      	movs	r1, #0
 8008246:	6978      	ldr	r0, [r7, #20]
 8008248:	f7ff ff8a 	bl	8008160 <xTimerGenericCommand>
 800824c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d112      	bne.n	800827a <prvProcessExpiredTimer+0x82>
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e7fe      	b.n	8008266 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	6978      	ldr	r0, [r7, #20]
 8008280:	4798      	blx	r3
}
 8008282:	bf00      	nop
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	200001f4 	.word	0x200001f4

08008290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008298:	f107 0308 	add.w	r3, r7, #8
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f857 	bl	8008350 <prvGetNextExpireTime>
 80082a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4619      	mov	r1, r3
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f803 	bl	80082b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082ae:	f000 f8d5 	bl	800845c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082b2:	e7f1      	b.n	8008298 <prvTimerTask+0x8>

080082b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082be:	f7ff fa63 	bl	8007788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082c2:	f107 0308 	add.w	r3, r7, #8
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f866 	bl	8008398 <prvSampleTimeNow>
 80082cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d130      	bne.n	8008336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <prvProcessTimerOrBlockTask+0x3c>
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d806      	bhi.n	80082f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082e2:	f7ff fa5f 	bl	80077a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff ff85 	bl	80081f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082ee:	e024      	b.n	800833a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d008      	beq.n	8008308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082f6:	4b13      	ldr	r3, [pc, #76]	; (8008344 <prvProcessTimerOrBlockTask+0x90>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <prvProcessTimerOrBlockTask+0x50>
 8008300:	2301      	movs	r3, #1
 8008302:	e000      	b.n	8008306 <prvProcessTimerOrBlockTask+0x52>
 8008304:	2300      	movs	r3, #0
 8008306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <prvProcessTimerOrBlockTask+0x94>)
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4619      	mov	r1, r3
 8008316:	f7ff f879 	bl	800740c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800831a:	f7ff fa43 	bl	80077a4 <xTaskResumeAll>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008324:	4b09      	ldr	r3, [pc, #36]	; (800834c <prvProcessTimerOrBlockTask+0x98>)
 8008326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	f3bf 8f6f 	isb	sy
}
 8008334:	e001      	b.n	800833a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008336:	f7ff fa35 	bl	80077a4 <xTaskResumeAll>
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200001f8 	.word	0x200001f8
 8008348:	200001fc 	.word	0x200001fc
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008358:	4b0e      	ldr	r3, [pc, #56]	; (8008394 <prvGetNextExpireTime+0x44>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <prvGetNextExpireTime+0x16>
 8008362:	2201      	movs	r2, #1
 8008364:	e000      	b.n	8008368 <prvGetNextExpireTime+0x18>
 8008366:	2200      	movs	r2, #0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008374:	4b07      	ldr	r3, [pc, #28]	; (8008394 <prvGetNextExpireTime+0x44>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]
 800837e:	e001      	b.n	8008384 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008384:	68fb      	ldr	r3, [r7, #12]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	200001f4 	.word	0x200001f4

08008398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083a0:	f7ff fa9c 	bl	80078dc <xTaskGetTickCount>
 80083a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083a6:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <prvSampleTimeNow+0x3c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d205      	bcs.n	80083bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083b0:	f000 f918 	bl	80085e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	e002      	b.n	80083c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083c2:	4a04      	ldr	r2, [pc, #16]	; (80083d4 <prvSampleTimeNow+0x3c>)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083c8:	68fb      	ldr	r3, [r7, #12]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000204 	.word	0x20000204

080083d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d812      	bhi.n	8008424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	429a      	cmp	r2, r3
 800840a:	d302      	bcc.n	8008412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	e01b      	b.n	800844a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <prvInsertTimerInActiveList+0x7c>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3304      	adds	r3, #4
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f7fe fb29 	bl	8006a74 <vListInsert>
 8008422:	e012      	b.n	800844a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d206      	bcs.n	800843a <prvInsertTimerInActiveList+0x62>
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d302      	bcc.n	800843a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e007      	b.n	800844a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800843a:	4b07      	ldr	r3, [pc, #28]	; (8008458 <prvInsertTimerInActiveList+0x80>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f7fe fb15 	bl	8006a74 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800844a:	697b      	ldr	r3, [r7, #20]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	200001f8 	.word	0x200001f8
 8008458:	200001f4 	.word	0x200001f4

0800845c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08c      	sub	sp, #48	; 0x30
 8008460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008462:	e0ac      	b.n	80085be <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f2c0 80a8 	blt.w	80085bc <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	3304      	adds	r3, #4
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe fb32 	bl	8006ae6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008482:	1d3b      	adds	r3, r7, #4
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ff87 	bl	8008398 <prvSampleTimeNow>
 800848a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b09      	cmp	r3, #9
 8008490:	f200 8095 	bhi.w	80085be <prvProcessReceivedCommands+0x162>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <prvProcessReceivedCommands+0x40>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084c5 	.word	0x080084c5
 80084a4:	080084c5 	.word	0x080084c5
 80084a8:	08008537 	.word	0x08008537
 80084ac:	0800854b 	.word	0x0800854b
 80084b0:	08008593 	.word	0x08008593
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084c5 	.word	0x080084c5
 80084bc:	08008537 	.word	0x08008537
 80084c0:	0800854b 	.word	0x0800854b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	18d1      	adds	r1, r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a3a      	ldr	r2, [r7, #32]
 80084e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084e4:	f7ff ff78 	bl	80083d8 <prvInsertTimerInActiveList>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d067      	beq.n	80085be <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d05c      	beq.n	80085be <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	441a      	add	r2, r3
 800850c:	2300      	movs	r3, #0
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	2300      	movs	r3, #0
 8008512:	2100      	movs	r1, #0
 8008514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008516:	f7ff fe23 	bl	8008160 <xTimerGenericCommand>
 800851a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d14d      	bne.n	80085be <prvProcessReceivedCommands+0x162>
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e7fe      	b.n	8008534 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	b2da      	uxtb	r2, r3
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008548:	e039      	b.n	80085be <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	b2da      	uxtb	r2, r3
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d109      	bne.n	800857e <prvProcessReceivedCommands+0x122>
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	e7fe      	b.n	800857c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	18d1      	adds	r1, r2, r3
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	6a3a      	ldr	r2, [r7, #32]
 800858a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800858c:	f7ff ff24 	bl	80083d8 <prvInsertTimerInActiveList>
					break;
 8008590:	e015      	b.n	80085be <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80085a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085a2:	f000 fb8b 	bl	8008cbc <vPortFree>
 80085a6:	e00a      	b.n	80085be <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ae:	f023 0301 	bic.w	r3, r3, #1
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085ba:	e000      	b.n	80085be <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085be:	4b08      	ldr	r3, [pc, #32]	; (80085e0 <prvProcessReceivedCommands+0x184>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f107 0108 	add.w	r1, r7, #8
 80085c6:	2200      	movs	r2, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe fd0b 	bl	8006fe4 <xQueueReceive>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f47f af47 	bne.w	8008464 <prvProcessReceivedCommands+0x8>
	}
}
 80085d6:	bf00      	nop
 80085d8:	3728      	adds	r7, #40	; 0x28
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200001fc 	.word	0x200001fc

080085e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085ea:	e047      	b.n	800867c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085ec:	4b2d      	ldr	r3, [pc, #180]	; (80086a4 <prvSwitchTimerLists+0xc0>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f6:	4b2b      	ldr	r3, [pc, #172]	; (80086a4 <prvSwitchTimerLists+0xc0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3304      	adds	r3, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fa6e 	bl	8006ae6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d02d      	beq.n	800867c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4413      	add	r3, r2
 8008628:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	429a      	cmp	r2, r3
 8008630:	d90e      	bls.n	8008650 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800863e:	4b19      	ldr	r3, [pc, #100]	; (80086a4 <prvSwitchTimerLists+0xc0>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe fa13 	bl	8006a74 <vListInsert>
 800864e:	e015      	b.n	800867c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008650:	2300      	movs	r3, #0
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	2100      	movs	r1, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fd80 	bl	8008160 <xTimerGenericCommand>
 8008660:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <prvSwitchTimerLists+0x98>
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	603b      	str	r3, [r7, #0]
 800867a:	e7fe      	b.n	800867a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <prvSwitchTimerLists+0xc0>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1b2      	bne.n	80085ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008686:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <prvSwitchTimerLists+0xc0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <prvSwitchTimerLists+0xc4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a04      	ldr	r2, [pc, #16]	; (80086a4 <prvSwitchTimerLists+0xc0>)
 8008692:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008694:	4a04      	ldr	r2, [pc, #16]	; (80086a8 <prvSwitchTimerLists+0xc4>)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6013      	str	r3, [r2, #0]
}
 800869a:	bf00      	nop
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	200001f4 	.word	0x200001f4
 80086a8:	200001f8 	.word	0x200001f8

080086ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086b0:	f000 f95c 	bl	800896c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086b4:	4b12      	ldr	r3, [pc, #72]	; (8008700 <prvCheckForValidListAndQueue+0x54>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11d      	bne.n	80086f8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80086bc:	4811      	ldr	r0, [pc, #68]	; (8008704 <prvCheckForValidListAndQueue+0x58>)
 80086be:	f7fe f988 	bl	80069d2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086c2:	4811      	ldr	r0, [pc, #68]	; (8008708 <prvCheckForValidListAndQueue+0x5c>)
 80086c4:	f7fe f985 	bl	80069d2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086c8:	4b10      	ldr	r3, [pc, #64]	; (800870c <prvCheckForValidListAndQueue+0x60>)
 80086ca:	4a0e      	ldr	r2, [pc, #56]	; (8008704 <prvCheckForValidListAndQueue+0x58>)
 80086cc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086ce:	4b10      	ldr	r3, [pc, #64]	; (8008710 <prvCheckForValidListAndQueue+0x64>)
 80086d0:	4a0d      	ldr	r2, [pc, #52]	; (8008708 <prvCheckForValidListAndQueue+0x5c>)
 80086d2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80086d4:	2200      	movs	r2, #0
 80086d6:	210c      	movs	r1, #12
 80086d8:	200a      	movs	r0, #10
 80086da:	f7fe fa97 	bl	8006c0c <xQueueGenericCreate>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <prvCheckForValidListAndQueue+0x54>)
 80086e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086e4:	4b06      	ldr	r3, [pc, #24]	; (8008700 <prvCheckForValidListAndQueue+0x54>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086ec:	4b04      	ldr	r3, [pc, #16]	; (8008700 <prvCheckForValidListAndQueue+0x54>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4908      	ldr	r1, [pc, #32]	; (8008714 <prvCheckForValidListAndQueue+0x68>)
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fe62 	bl	80073bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086f8:	f000 f966 	bl	80089c8 <vPortExitCritical>
}
 80086fc:	bf00      	nop
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200001fc 	.word	0x200001fc
 8008704:	200001cc 	.word	0x200001cc
 8008708:	200001e0 	.word	0x200001e0
 800870c:	200001f4 	.word	0x200001f4
 8008710:	200001f8 	.word	0x200001f8
 8008714:	0800a5c0 	.word	0x0800a5c0

08008718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3b04      	subs	r3, #4
 8008728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3b04      	subs	r3, #4
 8008736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f023 0201 	bic.w	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3b04      	subs	r3, #4
 8008746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008748:	4a0c      	ldr	r2, [pc, #48]	; (800877c <pxPortInitialiseStack+0x64>)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3b14      	subs	r3, #20
 8008752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3b04      	subs	r3, #4
 800875e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f06f 0202 	mvn.w	r2, #2
 8008766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3b20      	subs	r3, #32
 800876c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800876e:	68fb      	ldr	r3, [r7, #12]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	08008781 	.word	0x08008781

08008780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800878a:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <prvTaskExitError+0x50>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008792:	d009      	beq.n	80087a8 <prvTaskExitError+0x28>
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	e7fe      	b.n	80087a6 <prvTaskExitError+0x26>
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087ba:	bf00      	nop
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0fc      	beq.n	80087bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087c2:	bf00      	nop
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000004 	.word	0x20000004
	...

080087e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <pxCurrentTCBConst2>)
 80087e2:	6819      	ldr	r1, [r3, #0]
 80087e4:	6808      	ldr	r0, [r1, #0]
 80087e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	f380 8809 	msr	PSP, r0
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f04f 0000 	mov.w	r0, #0
 80087f6:	f380 8811 	msr	BASEPRI, r0
 80087fa:	4770      	bx	lr
 80087fc:	f3af 8000 	nop.w

08008800 <pxCurrentTCBConst2>:
 8008800:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop

08008808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008808:	4808      	ldr	r0, [pc, #32]	; (800882c <prvPortStartFirstTask+0x24>)
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	f380 8808 	msr	MSP, r0
 8008812:	f04f 0000 	mov.w	r0, #0
 8008816:	f380 8814 	msr	CONTROL, r0
 800881a:	b662      	cpsie	i
 800881c:	b661      	cpsie	f
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	df00      	svc	0
 8008828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800882a:	bf00      	nop
 800882c:	e000ed08 	.word	0xe000ed08

08008830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008836:	4b44      	ldr	r3, [pc, #272]	; (8008948 <xPortStartScheduler+0x118>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a44      	ldr	r2, [pc, #272]	; (800894c <xPortStartScheduler+0x11c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d109      	bne.n	8008854 <xPortStartScheduler+0x24>
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	613b      	str	r3, [r7, #16]
 8008852:	e7fe      	b.n	8008852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008854:	4b3c      	ldr	r3, [pc, #240]	; (8008948 <xPortStartScheduler+0x118>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a3d      	ldr	r2, [pc, #244]	; (8008950 <xPortStartScheduler+0x120>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d109      	bne.n	8008872 <xPortStartScheduler+0x42>
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e7fe      	b.n	8008870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008872:	4b38      	ldr	r3, [pc, #224]	; (8008954 <xPortStartScheduler+0x124>)
 8008874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	22ff      	movs	r2, #255	; 0xff
 8008882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	b2db      	uxtb	r3, r3
 800888a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008894:	b2da      	uxtb	r2, r3
 8008896:	4b30      	ldr	r3, [pc, #192]	; (8008958 <xPortStartScheduler+0x128>)
 8008898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800889a:	4b30      	ldr	r3, [pc, #192]	; (800895c <xPortStartScheduler+0x12c>)
 800889c:	2207      	movs	r2, #7
 800889e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088a0:	e009      	b.n	80088b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80088a2:	4b2e      	ldr	r3, [pc, #184]	; (800895c <xPortStartScheduler+0x12c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	4a2c      	ldr	r2, [pc, #176]	; (800895c <xPortStartScheduler+0x12c>)
 80088aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088be:	2b80      	cmp	r3, #128	; 0x80
 80088c0:	d0ef      	beq.n	80088a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088c2:	4b26      	ldr	r3, [pc, #152]	; (800895c <xPortStartScheduler+0x12c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f1c3 0307 	rsb	r3, r3, #7
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d009      	beq.n	80088e2 <xPortStartScheduler+0xb2>
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	e7fe      	b.n	80088e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088e2:	4b1e      	ldr	r3, [pc, #120]	; (800895c <xPortStartScheduler+0x12c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	4a1c      	ldr	r2, [pc, #112]	; (800895c <xPortStartScheduler+0x12c>)
 80088ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088ec:	4b1b      	ldr	r3, [pc, #108]	; (800895c <xPortStartScheduler+0x12c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088f4:	4a19      	ldr	r2, [pc, #100]	; (800895c <xPortStartScheduler+0x12c>)
 80088f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008900:	4b17      	ldr	r3, [pc, #92]	; (8008960 <xPortStartScheduler+0x130>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a16      	ldr	r2, [pc, #88]	; (8008960 <xPortStartScheduler+0x130>)
 8008906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800890a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800890c:	4b14      	ldr	r3, [pc, #80]	; (8008960 <xPortStartScheduler+0x130>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a13      	ldr	r2, [pc, #76]	; (8008960 <xPortStartScheduler+0x130>)
 8008912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008918:	f000 f8d6 	bl	8008ac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800891c:	4b11      	ldr	r3, [pc, #68]	; (8008964 <xPortStartScheduler+0x134>)
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008922:	f000 f8f5 	bl	8008b10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008926:	4b10      	ldr	r3, [pc, #64]	; (8008968 <xPortStartScheduler+0x138>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a0f      	ldr	r2, [pc, #60]	; (8008968 <xPortStartScheduler+0x138>)
 800892c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008932:	f7ff ff69 	bl	8008808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008936:	f7ff f899 	bl	8007a6c <vTaskSwitchContext>
	prvTaskExitError();
 800893a:	f7ff ff21 	bl	8008780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	e000ed00 	.word	0xe000ed00
 800894c:	410fc271 	.word	0x410fc271
 8008950:	410fc270 	.word	0x410fc270
 8008954:	e000e400 	.word	0xe000e400
 8008958:	20000208 	.word	0x20000208
 800895c:	2000020c 	.word	0x2000020c
 8008960:	e000ed20 	.word	0xe000ed20
 8008964:	20000004 	.word	0x20000004
 8008968:	e000ef34 	.word	0xe000ef34

0800896c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <vPortEnterCritical+0x54>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3301      	adds	r3, #1
 800898a:	4a0d      	ldr	r2, [pc, #52]	; (80089c0 <vPortEnterCritical+0x54>)
 800898c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800898e:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <vPortEnterCritical+0x54>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d10e      	bne.n	80089b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <vPortEnterCritical+0x58>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d009      	beq.n	80089b4 <vPortEnterCritical+0x48>
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	e7fe      	b.n	80089b2 <vPortEnterCritical+0x46>
	}
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20000004 	.word	0x20000004
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089ce:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <vPortExitCritical+0x4c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <vPortExitCritical+0x22>
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	607b      	str	r3, [r7, #4]
 80089e8:	e7fe      	b.n	80089e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80089ea:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <vPortExitCritical+0x4c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <vPortExitCritical+0x4c>)
 80089f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <vPortExitCritical+0x4c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <vPortExitCritical+0x3e>
 80089fc:	2300      	movs	r3, #0
 80089fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20000004 	.word	0x20000004
	...

08008a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a20:	f3ef 8009 	mrs	r0, PSP
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <pxCurrentTCBConst>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	f01e 0f10 	tst.w	lr, #16
 8008a30:	bf08      	it	eq
 8008a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	6010      	str	r0, [r2, #0]
 8008a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a44:	f380 8811 	msr	BASEPRI, r0
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f7ff f80c 	bl	8007a6c <vTaskSwitchContext>
 8008a54:	f04f 0000 	mov.w	r0, #0
 8008a58:	f380 8811 	msr	BASEPRI, r0
 8008a5c:	bc09      	pop	{r0, r3}
 8008a5e:	6819      	ldr	r1, [r3, #0]
 8008a60:	6808      	ldr	r0, [r1, #0]
 8008a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a66:	f01e 0f10 	tst.w	lr, #16
 8008a6a:	bf08      	it	eq
 8008a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a70:	f380 8809 	msr	PSP, r0
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	f3af 8000 	nop.w

08008a80 <pxCurrentTCBConst>:
 8008a80:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008aa0:	f7fe ff2c 	bl	80078fc <xTaskIncrementTick>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aaa:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <SysTick_Handler+0x3c>)
 8008aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <vPortSetupTimerInterrupt+0x34>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <vPortSetupTimerInterrupt+0x38>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <vPortSetupTimerInterrupt+0x3c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a0a      	ldr	r2, [pc, #40]	; (8008b08 <vPortSetupTimerInterrupt+0x40>)
 8008ade:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae2:	099b      	lsrs	r3, r3, #6
 8008ae4:	4a09      	ldr	r2, [pc, #36]	; (8008b0c <vPortSetupTimerInterrupt+0x44>)
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008aea:	4b04      	ldr	r3, [pc, #16]	; (8008afc <vPortSetupTimerInterrupt+0x34>)
 8008aec:	2207      	movs	r2, #7
 8008aee:	601a      	str	r2, [r3, #0]
}
 8008af0:	bf00      	nop
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	e000e010 	.word	0xe000e010
 8008b00:	e000e018 	.word	0xe000e018
 8008b04:	20000010 	.word	0x20000010
 8008b08:	10624dd3 	.word	0x10624dd3
 8008b0c:	e000e014 	.word	0xe000e014

08008b10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b20 <vPortEnableVFP+0x10>
 8008b14:	6801      	ldr	r1, [r0, #0]
 8008b16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b1a:	6001      	str	r1, [r0, #0]
 8008b1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b1e:	bf00      	nop
 8008b20:	e000ed88 	.word	0xe000ed88

08008b24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b2a:	f3ef 8305 	mrs	r3, IPSR
 8008b2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b0f      	cmp	r3, #15
 8008b34:	d913      	bls.n	8008b5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b36:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <vPortValidateInterruptPriority+0x6c>)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b40:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <vPortValidateInterruptPriority+0x70>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	7afa      	ldrb	r2, [r7, #11]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d209      	bcs.n	8008b5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	e7fe      	b.n	8008b5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b5e:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <vPortValidateInterruptPriority+0x74>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <vPortValidateInterruptPriority+0x78>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d909      	bls.n	8008b82 <vPortValidateInterruptPriority+0x5e>
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	e7fe      	b.n	8008b80 <vPortValidateInterruptPriority+0x5c>
	}
 8008b82:	bf00      	nop
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	e000e3f0 	.word	0xe000e3f0
 8008b94:	20000208 	.word	0x20000208
 8008b98:	e000ed0c 	.word	0xe000ed0c
 8008b9c:	2000020c 	.word	0x2000020c

08008ba0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8008bac:	f7fe fdec 	bl	8007788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8008bb0:	4b3d      	ldr	r3, [pc, #244]	; (8008ca8 <pvPortMalloc+0x108>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d104      	bne.n	8008bc2 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8008bb8:	f000 f8ba 	bl	8008d30 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8008bbc:	4b3a      	ldr	r3, [pc, #232]	; (8008ca8 <pvPortMalloc+0x108>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00e      	beq.n	8008be6 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8008bc8:	2308      	movs	r3, #8
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4413      	add	r3, r2
 8008bd0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d004      	beq.n	8008be6 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f023 0307 	bic.w	r3, r3, #7
 8008be2:	3308      	adds	r3, #8
 8008be4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d056      	beq.n	8008c9a <pvPortMalloc+0xfa>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a2f      	ldr	r2, [pc, #188]	; (8008cac <pvPortMalloc+0x10c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d852      	bhi.n	8008c9a <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8008bf4:	4b2e      	ldr	r3, [pc, #184]	; (8008cb0 <pvPortMalloc+0x110>)
 8008bf6:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8008bf8:	4b2d      	ldr	r3, [pc, #180]	; (8008cb0 <pvPortMalloc+0x110>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bfe:	e004      	b.n	8008c0a <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d903      	bls.n	8008c1c <pvPortMalloc+0x7c>
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1f1      	bne.n	8008c00 <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4a25      	ldr	r2, [pc, #148]	; (8008cb4 <pvPortMalloc+0x114>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d03a      	beq.n	8008c9a <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2208      	movs	r2, #8
 8008c2a:	4413      	add	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2208      	movs	r2, #8
 8008c40:	0052      	lsls	r2, r2, #1
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d922      	bls.n	8008c8c <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	1ad2      	subs	r2, r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <pvPortMalloc+0x110>)
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	e002      	b.n	8008c72 <pvPortMalloc+0xd2>
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d8f6      	bhi.n	8008c6c <pvPortMalloc+0xcc>
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <pvPortMalloc+0x118>)
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	4a08      	ldr	r2, [pc, #32]	; (8008cb8 <pvPortMalloc+0x118>)
 8008c98:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c9a:	f7fe fd83 	bl	80077a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008c9e:	697b      	ldr	r3, [r7, #20]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20012e20 	.word	0x20012e20
 8008cac:	00012bf7 	.word	0x00012bf7
 8008cb0:	20012e10 	.word	0x20012e10
 8008cb4:	20012e18 	.word	0x20012e18
 8008cb8:	20000008 	.word	0x20000008

08008cbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d027      	beq.n	8008d1e <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8008cce:	2308      	movs	r3, #8
 8008cd0:	425b      	negs	r3, r3
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8008cdc:	f7fe fd54 	bl	8007788 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <vPortFree+0x6c>)
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e002      	b.n	8008cf2 <vPortFree+0x36>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	617b      	str	r3, [r7, #20]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d8f6      	bhi.n	8008cec <vPortFree+0x30>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <vPortFree+0x70>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4413      	add	r3, r2
 8008d16:	4a05      	ldr	r2, [pc, #20]	; (8008d2c <vPortFree+0x70>)
 8008d18:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8008d1a:	f7fe fd43 	bl	80077a4 <xTaskResumeAll>
	}
}
 8008d1e:	bf00      	nop
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20012e10 	.word	0x20012e10
 8008d2c:	20000008 	.word	0x20000008

08008d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <prvHeapInit+0x44>)
 8008d38:	f023 0307 	bic.w	r3, r3, #7
 8008d3c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d3e:	4a0e      	ldr	r2, [pc, #56]	; (8008d78 <prvHeapInit+0x48>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvHeapInit+0x48>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <prvHeapInit+0x4c>)
 8008d4c:	4a0c      	ldr	r2, [pc, #48]	; (8008d80 <prvHeapInit+0x50>)
 8008d4e:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <prvHeapInit+0x4c>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	4a08      	ldr	r2, [pc, #32]	; (8008d80 <prvHeapInit+0x50>)
 8008d5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	4a06      	ldr	r2, [pc, #24]	; (8008d7c <prvHeapInit+0x4c>)
 8008d64:	601a      	str	r2, [r3, #0]
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000218 	.word	0x20000218
 8008d78:	20012e10 	.word	0x20012e10
 8008d7c:	20012e18 	.word	0x20012e18
 8008d80:	00012bf8 	.word	0x00012bf8

08008d84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d8e:	f000 f86b 	bl	8008e68 <BSP_SD_IsDetected>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d001      	beq.n	8008d9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e005      	b.n	8008da8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008d9c:	4804      	ldr	r0, [pc, #16]	; (8008db0 <BSP_SD_Init+0x2c>)
 8008d9e:	f7f9 f9c5 	bl	800212c <HAL_SD_Init>
 8008da2:	4603      	mov	r3, r0
 8008da4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008da6:	79fb      	ldrb	r3, [r7, #7]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	200133d8 	.word	0x200133d8

08008db4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	4806      	ldr	r0, [pc, #24]	; (8008dec <BSP_SD_ReadBlocks+0x38>)
 8008dd2:	f7f9 fa33 	bl	800223c <HAL_SD_ReadBlocks>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200133d8 	.word	0x200133d8

08008df0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	4806      	ldr	r0, [pc, #24]	; (8008e28 <BSP_SD_WriteBlocks+0x38>)
 8008e0e:	f7f9 fbac 	bl	800256a <HAL_SD_WriteBlocks>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	200133d8 	.word	0x200133d8

08008e2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008e30:	4805      	ldr	r0, [pc, #20]	; (8008e48 <BSP_SD_GetCardState+0x1c>)
 8008e32:	f7f9 ff57 	bl	8002ce4 <HAL_SD_GetCardState>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	bf14      	ite	ne
 8008e3c:	2301      	movne	r3, #1
 8008e3e:	2300      	moveq	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200133d8 	.word	0x200133d8

08008e4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4803      	ldr	r0, [pc, #12]	; (8008e64 <BSP_SD_GetCardInfo+0x18>)
 8008e58:	f7f9 ff18 	bl	8002c8c <HAL_SD_GetCardInfo>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	200133d8 	.word	0x200133d8

08008e68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8008e72:	f000 f825 	bl	8008ec0 <BSP_PlatformIsDetected>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	b2db      	uxtb	r3, r3
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008e90:	4904      	ldr	r1, [pc, #16]	; (8008ea4 <MX_FATFS_Init+0x18>)
 8008e92:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <MX_FATFS_Init+0x1c>)
 8008e94:	f7fd fd8e 	bl	80069b4 <FATFS_LinkDriver>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4b03      	ldr	r3, [pc, #12]	; (8008eac <MX_FATFS_Init+0x20>)
 8008e9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008ea0:	bf00      	nop
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20012e7c 	.word	0x20012e7c
 8008ea8:	0800a6c0 	.word	0x0800a6c0
 8008eac:	20012e78 	.word	0x20012e78

08008eb0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008eb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008eca:	2110      	movs	r1, #16
 8008ecc:	4806      	ldr	r0, [pc, #24]	; (8008ee8 <BSP_PlatformIsDetected+0x28>)
 8008ece:	f7f8 fc93 	bl	80017f8 <HAL_GPIO_ReadPin>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8008edc:	79fb      	ldrb	r3, [r7, #7]
}  
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	40021800 	.word	0x40021800

08008eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b094      	sub	sp, #80	; 0x50
 8008ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ef2:	f107 0320 	add.w	r3, r7, #32
 8008ef6:	2230      	movs	r2, #48	; 0x30
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 ff25 	bl	8009d4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	60da      	str	r2, [r3, #12]
 8008f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f10:	2300      	movs	r3, #0
 8008f12:	60bb      	str	r3, [r7, #8]
 8008f14:	4b28      	ldr	r3, [pc, #160]	; (8008fb8 <SystemClock_Config+0xcc>)
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	4a27      	ldr	r2, [pc, #156]	; (8008fb8 <SystemClock_Config+0xcc>)
 8008f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8008f20:	4b25      	ldr	r3, [pc, #148]	; (8008fb8 <SystemClock_Config+0xcc>)
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f28:	60bb      	str	r3, [r7, #8]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	4b22      	ldr	r3, [pc, #136]	; (8008fbc <SystemClock_Config+0xd0>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008f38:	4a20      	ldr	r2, [pc, #128]	; (8008fbc <SystemClock_Config+0xd0>)
 8008f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4b1e      	ldr	r3, [pc, #120]	; (8008fbc <SystemClock_Config+0xd0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f48:	607b      	str	r3, [r7, #4]
 8008f4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f50:	2301      	movs	r3, #1
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008f54:	2310      	movs	r3, #16
 8008f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f58:	2302      	movs	r3, #2
 8008f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8008f60:	230c      	movs	r3, #12
 8008f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8008f64:	2390      	movs	r3, #144	; 0x90
 8008f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008f68:	2304      	movs	r3, #4
 8008f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008f6c:	2304      	movs	r3, #4
 8008f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f70:	f107 0320 	add.w	r3, r7, #32
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7f8 fc8b 	bl	8001890 <HAL_RCC_OscConfig>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008f80:	f000 fb3e 	bl	8009600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f84:	230f      	movs	r3, #15
 8008f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008f9a:	f107 030c 	add.w	r3, r7, #12
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f8 feb7 	bl	8001d14 <HAL_RCC_ClockConfig>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8008fac:	f000 fb28 	bl	8009600 <Error_Handler>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3750      	adds	r7, #80	; 0x50
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	40023800 	.word	0x40023800
 8008fbc:	40007000 	.word	0x40007000

08008fc0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2105      	movs	r1, #5
 8008fc8:	203b      	movs	r0, #59	; 0x3b
 8008fca:	f7f7 ff59 	bl	8000e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8008fce:	203b      	movs	r0, #59	; 0x3b
 8008fd0:	f7f7 ff72 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2105      	movs	r1, #5
 8008fd8:	2045      	movs	r0, #69	; 0x45
 8008fda:	f7f7 ff51 	bl	8000e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8008fde:	2045      	movs	r0, #69	; 0x45
 8008fe0:	f7f7 ff6a 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
}
 8008fe4:	bf00      	nop
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008fec:	4b2b      	ldr	r3, [pc, #172]	; (800909c <MX_CAN1_Init+0xb4>)
 8008fee:	4a2c      	ldr	r2, [pc, #176]	; (80090a0 <MX_CAN1_Init+0xb8>)
 8008ff0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8008ff2:	4b2a      	ldr	r3, [pc, #168]	; (800909c <MX_CAN1_Init+0xb4>)
 8008ff4:	2206      	movs	r2, #6
 8008ff6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008ff8:	4b28      	ldr	r3, [pc, #160]	; (800909c <MX_CAN1_Init+0xb4>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008ffe:	4b27      	ldr	r3, [pc, #156]	; (800909c <MX_CAN1_Init+0xb4>)
 8009000:	2200      	movs	r2, #0
 8009002:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8009004:	4b25      	ldr	r3, [pc, #148]	; (800909c <MX_CAN1_Init+0xb4>)
 8009006:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800900a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800900c:	4b23      	ldr	r3, [pc, #140]	; (800909c <MX_CAN1_Init+0xb4>)
 800900e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009012:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009014:	4b21      	ldr	r3, [pc, #132]	; (800909c <MX_CAN1_Init+0xb4>)
 8009016:	2200      	movs	r2, #0
 8009018:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800901a:	4b20      	ldr	r3, [pc, #128]	; (800909c <MX_CAN1_Init+0xb4>)
 800901c:	2200      	movs	r2, #0
 800901e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <MX_CAN1_Init+0xb4>)
 8009022:	2200      	movs	r2, #0
 8009024:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009026:	4b1d      	ldr	r3, [pc, #116]	; (800909c <MX_CAN1_Init+0xb4>)
 8009028:	2200      	movs	r2, #0
 800902a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800902c:	4b1b      	ldr	r3, [pc, #108]	; (800909c <MX_CAN1_Init+0xb4>)
 800902e:	2200      	movs	r2, #0
 8009030:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <MX_CAN1_Init+0xb4>)
 8009034:	2200      	movs	r2, #0
 8009036:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009038:	4818      	ldr	r0, [pc, #96]	; (800909c <MX_CAN1_Init+0xb4>)
 800903a:	f7f7 fb0d 	bl	8000658 <HAL_CAN_Init>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8009044:	f000 fadc 	bl	8009600 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* config CAN filter */
  sFilterConfig.FilterBank = 0;
 8009048:	4b16      	ldr	r3, [pc, #88]	; (80090a4 <MX_CAN1_Init+0xbc>)
 800904a:	2200      	movs	r2, #0
 800904c:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800904e:	4b15      	ldr	r3, [pc, #84]	; (80090a4 <MX_CAN1_Init+0xbc>)
 8009050:	2200      	movs	r2, #0
 8009052:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8009054:	4b13      	ldr	r3, [pc, #76]	; (80090a4 <MX_CAN1_Init+0xbc>)
 8009056:	2201      	movs	r2, #1
 8009058:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <MX_CAN1_Init+0xbc>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8009060:	4b10      	ldr	r3, [pc, #64]	; (80090a4 <MX_CAN1_Init+0xbc>)
 8009062:	2200      	movs	r2, #0
 8009064:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8009066:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <MX_CAN1_Init+0xbc>)
 8009068:	2200      	movs	r2, #0
 800906a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800906c:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <MX_CAN1_Init+0xbc>)
 800906e:	2200      	movs	r2, #0
 8009070:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment	= CAN_RX_FIFO0;
 8009072:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <MX_CAN1_Init+0xbc>)
 8009074:	2200      	movs	r2, #0
 8009076:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8009078:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <MX_CAN1_Init+0xbc>)
 800907a:	2201      	movs	r2, #1
 800907c:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <MX_CAN1_Init+0xbc>)
 8009080:	220e      	movs	r2, #14
 8009082:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8009084:	4907      	ldr	r1, [pc, #28]	; (80090a4 <MX_CAN1_Init+0xbc>)
 8009086:	4805      	ldr	r0, [pc, #20]	; (800909c <MX_CAN1_Init+0xb4>)
 8009088:	f7f7 fbe2 	bl	8000850 <HAL_CAN_ConfigFilter>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <MX_CAN1_Init+0xae>
    /* Filter configuration Error */
    Error_Handler();
 8009092:	f000 fab5 	bl	8009600 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8009096:	bf00      	nop
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20013464 	.word	0x20013464
 80090a0:	40006400 	.word	0x40006400
 80090a4:	200132e0 	.word	0x200132e0

080090a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <MX_SDIO_SD_Init+0x38>)
 80090ae:	4a0d      	ldr	r2, [pc, #52]	; (80090e4 <MX_SDIO_SD_Init+0x3c>)
 80090b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80090b2:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <MX_SDIO_SD_Init+0x38>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80090b8:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <MX_SDIO_SD_Init+0x38>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80090be:	4b08      	ldr	r3, [pc, #32]	; (80090e0 <MX_SDIO_SD_Init+0x38>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80090c4:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <MX_SDIO_SD_Init+0x38>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <MX_SDIO_SD_Init+0x38>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80090d0:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <MX_SDIO_SD_Init+0x38>)
 80090d2:	2202      	movs	r2, #2
 80090d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80090d6:	bf00      	nop
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	200133d8 	.word	0x200133d8
 80090e4:	40012c00 	.word	0x40012c00

080090e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80090ee:	2300      	movs	r3, #0
 80090f0:	607b      	str	r3, [r7, #4]
 80090f2:	4b09      	ldr	r3, [pc, #36]	; (8009118 <MX_DMA_Init+0x30>)
 80090f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f6:	4a08      	ldr	r2, [pc, #32]	; (8009118 <MX_DMA_Init+0x30>)
 80090f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090fc:	6313      	str	r3, [r2, #48]	; 0x30
 80090fe:	4b06      	ldr	r3, [pc, #24]	; (8009118 <MX_DMA_Init+0x30>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009106:	607b      	str	r3, [r7, #4]
 8009108:	687b      	ldr	r3, [r7, #4]

}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	40023800 	.word	0x40023800

0800911c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08a      	sub	sp, #40	; 0x28
 8009120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009122:	f107 0314 	add.w	r3, r7, #20
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	605a      	str	r2, [r3, #4]
 800912c:	609a      	str	r2, [r3, #8]
 800912e:	60da      	str	r2, [r3, #12]
 8009130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
 8009136:	4b34      	ldr	r3, [pc, #208]	; (8009208 <MX_GPIO_Init+0xec>)
 8009138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913a:	4a33      	ldr	r2, [pc, #204]	; (8009208 <MX_GPIO_Init+0xec>)
 800913c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009140:	6313      	str	r3, [r2, #48]	; 0x30
 8009142:	4b31      	ldr	r3, [pc, #196]	; (8009208 <MX_GPIO_Init+0xec>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914a:	613b      	str	r3, [r7, #16]
 800914c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	4b2d      	ldr	r3, [pc, #180]	; (8009208 <MX_GPIO_Init+0xec>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	4a2c      	ldr	r2, [pc, #176]	; (8009208 <MX_GPIO_Init+0xec>)
 8009158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800915c:	6313      	str	r3, [r2, #48]	; 0x30
 800915e:	4b2a      	ldr	r3, [pc, #168]	; (8009208 <MX_GPIO_Init+0xec>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800916a:	2300      	movs	r3, #0
 800916c:	60bb      	str	r3, [r7, #8]
 800916e:	4b26      	ldr	r3, [pc, #152]	; (8009208 <MX_GPIO_Init+0xec>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	4a25      	ldr	r2, [pc, #148]	; (8009208 <MX_GPIO_Init+0xec>)
 8009174:	f043 0304 	orr.w	r3, r3, #4
 8009178:	6313      	str	r3, [r2, #48]	; 0x30
 800917a:	4b23      	ldr	r3, [pc, #140]	; (8009208 <MX_GPIO_Init+0xec>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	60bb      	str	r3, [r7, #8]
 8009184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009186:	2300      	movs	r3, #0
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	4b1f      	ldr	r3, [pc, #124]	; (8009208 <MX_GPIO_Init+0xec>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <MX_GPIO_Init+0xec>)
 8009190:	f043 0301 	orr.w	r3, r3, #1
 8009194:	6313      	str	r3, [r2, #48]	; 0x30
 8009196:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <MX_GPIO_Init+0xec>)
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	607b      	str	r3, [r7, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80091a2:	2300      	movs	r3, #0
 80091a4:	603b      	str	r3, [r7, #0]
 80091a6:	4b18      	ldr	r3, [pc, #96]	; (8009208 <MX_GPIO_Init+0xec>)
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	4a17      	ldr	r2, [pc, #92]	; (8009208 <MX_GPIO_Init+0xec>)
 80091ac:	f043 0308 	orr.w	r3, r3, #8
 80091b0:	6313      	str	r3, [r2, #48]	; 0x30
 80091b2:	4b15      	ldr	r3, [pc, #84]	; (8009208 <MX_GPIO_Init+0xec>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80091be:	2200      	movs	r2, #0
 80091c0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80091c4:	4811      	ldr	r0, [pc, #68]	; (800920c <MX_GPIO_Init+0xf0>)
 80091c6:	f7f8 fb2f 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80091ca:	2310      	movs	r3, #16
 80091cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80091d6:	f107 0314 	add.w	r3, r7, #20
 80091da:	4619      	mov	r1, r3
 80091dc:	480b      	ldr	r0, [pc, #44]	; (800920c <MX_GPIO_Init+0xf0>)
 80091de:	f7f8 f961 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 80091e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80091e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091e8:	2301      	movs	r3, #1
 80091ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091f0:	2300      	movs	r3, #0
 80091f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80091f4:	f107 0314 	add.w	r3, r7, #20
 80091f8:	4619      	mov	r1, r3
 80091fa:	4804      	ldr	r0, [pc, #16]	; (800920c <MX_GPIO_Init+0xf0>)
 80091fc:	f7f8 f952 	bl	80014a4 <HAL_GPIO_Init>

}
 8009200:	bf00      	nop
 8009202:	3728      	adds	r7, #40	; 0x28
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40023800 	.word	0x40023800
 800920c:	40021800 	.word	0x40021800

08009210 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af02      	add	r7, sp, #8
	/* reset of all peripherals, initializes the flash interface and the Systick. */
	HAL_Init();
 8009216:	f7f7 f9bb 	bl	8000590 <HAL_Init>

	/* configure the system clock */
	SystemClock_Config();
 800921a:	f7ff fe67 	bl	8008eec <SystemClock_Config>

	/* initialize all configured peripherals */
	MX_DMA_Init();
 800921e:	f7ff ff63 	bl	80090e8 <MX_DMA_Init>
	MX_GPIO_Init();
 8009222:	f7ff ff7b 	bl	800911c <MX_GPIO_Init>
	MX_CAN1_Init();
 8009226:	f7ff fedf 	bl	8008fe8 <MX_CAN1_Init>
	MX_SDIO_SD_Init();
 800922a:	f7ff ff3d 	bl	80090a8 <MX_SDIO_SD_Init>

	/* initialize interrupts */
	MX_NVIC_Init();
 800922e:	f7ff fec7 	bl	8008fc0 <MX_NVIC_Init>

	/* try to create queue */
	xQueueCAN = xQueueCreate(50, sizeof(struct canMessage));
 8009232:	2200      	movs	r2, #0
 8009234:	2110      	movs	r1, #16
 8009236:	2032      	movs	r0, #50	; 0x32
 8009238:	f7fd fce8 	bl	8006c0c <xQueueGenericCreate>
 800923c:	4602      	mov	r2, r0
 800923e:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <main+0x64>)
 8009240:	601a      	str	r2, [r3, #0]
//		(void *) NULL,				// pvParameters
//		PRIORITY_TASK_LED,			// priority
//		&taskLedHandle				// taskHandle
//	);

	xTaskCreate (
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <main+0x68>)
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	2302      	movs	r3, #2
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009250:	490a      	ldr	r1, [pc, #40]	; (800927c <main+0x6c>)
 8009252:	480b      	ldr	r0, [pc, #44]	; (8009280 <main+0x70>)
 8009254:	f7fe f90e 	bl	8007474 <xTaskCreate>
		(void *) NULL,				// pvParameters
		PRIORITY_TASK_LOG,			// priority
		&taskLogHandle				// taskHandle
	);

	xTaskCreate (
 8009258:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <main+0x74>)
 800925a:	9301      	str	r3, [sp, #4]
 800925c:	2304      	movs	r3, #4
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	2300      	movs	r3, #0
 8009262:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009266:	4908      	ldr	r1, [pc, #32]	; (8009288 <main+0x78>)
 8009268:	4808      	ldr	r0, [pc, #32]	; (800928c <main+0x7c>)
 800926a:	f7fe f903 	bl	8007474 <xTaskCreate>
		PRIORITY_TASK_HANDLECAN,		// priority
		&taskHandleCANHandle			// taskHandle
	);

	/* start the scheduler */
	vTaskStartScheduler();
 800926e:	f7fe fa3f 	bl	80076f0 <vTaskStartScheduler>

	/* infinite loop */
	for (;;);
 8009272:	e7fe      	b.n	8009272 <main+0x62>
 8009274:	20013374 	.word	0x20013374
 8009278:	2001336c 	.word	0x2001336c
 800927c:	0800a5c8 	.word	0x0800a5c8
 8009280:	08009315 	.word	0x08009315
 8009284:	20013370 	.word	0x20013370
 8009288:	0800a5d0 	.word	0x0800a5d0
 800928c:	08009291 	.word	0x08009291

08009290 <taskHandleCAN>:

		vTaskDelayUntil(&xLastWakeTime, timeMiliseconds);
	}
}

void taskHandleCAN (void *pvParameters) {
 8009290:	b580      	push	{r7, lr}
 8009292:	b08a      	sub	sp, #40	; 0x28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	uint32_t messagesInFifo;
	HAL_StatusTypeDef status;
	struct canMessage message;

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800929c:	4819      	ldr	r0, [pc, #100]	; (8009304 <taskHandleCAN+0x74>)
 800929e:	f7f7 fbb7 	bl	8000a10 <HAL_CAN_Start>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <taskHandleCAN+0x1c>
		/* start error */
		Error_Handler();
 80092a8:	f000 f9aa 	bl	8009600 <Error_Handler>
	}

	for (;;) {
		/* waits for a message in CAN bus */
		do {
			messagesInFifo = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 80092ac:	2100      	movs	r1, #0
 80092ae:	4815      	ldr	r0, [pc, #84]	; (8009304 <taskHandleCAN+0x74>)
 80092b0:	f7f7 fd05 	bl	8000cbe <HAL_CAN_GetRxFifoFillLevel>
 80092b4:	6278      	str	r0, [r7, #36]	; 0x24
		} while (messagesInFifo == 0);
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0f7      	beq.n	80092ac <taskHandleCAN+0x1c>

		/* read CAN message */
		status = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80092bc:	4b12      	ldr	r3, [pc, #72]	; (8009308 <taskHandleCAN+0x78>)
 80092be:	4a13      	ldr	r2, [pc, #76]	; (800930c <taskHandleCAN+0x7c>)
 80092c0:	2100      	movs	r1, #0
 80092c2:	4810      	ldr	r0, [pc, #64]	; (8009304 <taskHandleCAN+0x74>)
 80092c4:	f7f7 fbe8 	bl	8000a98 <HAL_CAN_GetRxMessage>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		/* case message is OK */
		if (status == HAL_OK) {
 80092ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1ea      	bne.n	80092ac <taskHandleCAN+0x1c>
			/* save data to CAN message struct */
			message.id = RxHeader.StdId;
 80092d6:	4b0d      	ldr	r3, [pc, #52]	; (800930c <taskHandleCAN+0x7c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	613b      	str	r3, [r7, #16]
			memcpy(message.data, RxData, sizeof(RxData));
 80092dc:	4a0a      	ldr	r2, [pc, #40]	; (8009308 <taskHandleCAN+0x78>)
 80092de:	f107 0314 	add.w	r3, r7, #20
 80092e2:	6810      	ldr	r0, [r2, #0]
 80092e4:	6851      	ldr	r1, [r2, #4]
 80092e6:	c303      	stmia	r3!, {r0, r1}
			message.timestamp = xTaskGetTickCount();
 80092e8:	f7fe faf8 	bl	80078dc <xTaskGetTickCount>
 80092ec:	4603      	mov	r3, r0
 80092ee:	61fb      	str	r3, [r7, #28]

			/* add message to queue */
			xQueueSend(xQueueCAN, (const void *) &message, &xHigherPriorityTaskWoken);
 80092f0:	4b07      	ldr	r3, [pc, #28]	; (8009310 <taskHandleCAN+0x80>)
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	f107 020c 	add.w	r2, r7, #12
 80092f8:	f107 0110 	add.w	r1, r7, #16
 80092fc:	2300      	movs	r3, #0
 80092fe:	f7fd fce3 	bl	8006cc8 <xQueueGenericSend>
	for (;;) {
 8009302:	e7d3      	b.n	80092ac <taskHandleCAN+0x1c>
 8009304:	20013464 	.word	0x20013464
 8009308:	2001345c 	.word	0x2001345c
 800930c:	2001348c 	.word	0x2001348c
 8009310:	20013374 	.word	0x20013374

08009314 <taskLog>:
		}
	}
}

void taskLog (void *pvParameters) {
 8009314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009316:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
 800931a:	af0a      	add	r7, sp, #40	; 0x28
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	6018      	str	r0, [r3, #0]
	/* FatFS variables */
	FRESULT f_status;
	MX_FATFS_Init();
 8009322:	f7ff fdb3 	bl	8008e8c <MX_FATFS_Init>
	uint32_t timeInit;
	uint32_t timeToLog;

	/* init buffer for messages to be logged with empty values */
	char messageToLog[SIZE_CAN_MESSAGE_BUFFER * MAX_SIZE_MESSAGE_CAN];
	memset(messageToLog, 0, sizeof(messageToLog));
 8009326:	f107 0318 	add.w	r3, r7, #24
 800932a:	f240 22a3 	movw	r2, #675	; 0x2a3
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fd0a 	bl	8009d4a <memset>

	/* number of messages to log */
	uint8_t numberMessagesToLog = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303

	/* try to mount SD card */
	f_status = f_mount(&SDFatFS, (char const*)SDPath, 1);
 800933c:	2201      	movs	r2, #1
 800933e:	4996      	ldr	r1, [pc, #600]	; (8009598 <taskLog+0x284>)
 8009340:	4896      	ldr	r0, [pc, #600]	; (800959c <taskLog+0x288>)
 8009342:	f7fc fb1d 	bl	8005980 <f_mount>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
	if (f_status != FR_OK) {
 800934c:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <taskLog+0x4c>
		sdCardError(f_status, 0);
 8009354:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f000 f92e 	bl	80095bc <sdCardError>
	}

	for (;;) {
		/* waits for a message in the queue */
		xQueueReceive(xQueueCAN, (void *) &message, portMAX_DELAY);
 8009360:	4b8f      	ldr	r3, [pc, #572]	; (80095a0 <taskLog+0x28c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8009368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800936c:	4618      	mov	r0, r3
 800936e:	f7fd fe39 	bl	8006fe4 <xQueueReceive>

		/* if log file is already created */
		if (flagDateSet) {
 8009372:	4b8c      	ldr	r3, [pc, #560]	; (80095a4 <taskLog+0x290>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 808f 	beq.w	800949a <taskLog+0x186>
			timeToLog = (message.timestamp - timeInit) * portTICK_PERIOD_MS;
 800937c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009380:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

			if ((int)timeToLog > 0) {
 800938a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800938e:	2b00      	cmp	r3, #0
 8009390:	dde6      	ble.n	8009360 <taskLog+0x4c>
				/* append new message to buffer */
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 8009392:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
					messageToLog,
					message.id,
					message.data[0],
 8009396:	f897 32d4 	ldrb.w	r3, [r7, #724]	; 0x2d4
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 800939a:	461c      	mov	r4, r3
					message.data[1],
 800939c:	f897 32d5 	ldrb.w	r3, [r7, #725]	; 0x2d5
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 80093a0:	461d      	mov	r5, r3
					message.data[2],
 80093a2:	f897 32d6 	ldrb.w	r3, [r7, #726]	; 0x2d6
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 80093a6:	461e      	mov	r6, r3
					message.data[3],
 80093a8:	f897 32d7 	ldrb.w	r3, [r7, #727]	; 0x2d7
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 80093ac:	613b      	str	r3, [r7, #16]
					message.data[4],
 80093ae:	f897 32d8 	ldrb.w	r3, [r7, #728]	; 0x2d8
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 80093b2:	60fb      	str	r3, [r7, #12]
					message.data[5],
 80093b4:	f897 32d9 	ldrb.w	r3, [r7, #729]	; 0x2d9
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 80093b8:	60bb      	str	r3, [r7, #8]
					message.data[6],
 80093ba:	f897 32da 	ldrb.w	r3, [r7, #730]	; 0x2da
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 80093be:	607b      	str	r3, [r7, #4]
					message.data[7],
 80093c0:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
				sprintf(messageToLog, "%s%x;%02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x;%d\n",
 80093c4:	603b      	str	r3, [r7, #0]
 80093c6:	f107 0218 	add.w	r2, r7, #24
 80093ca:	f107 0018 	add.w	r0, r7, #24
 80093ce:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80093d2:	9308      	str	r3, [sp, #32]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	9307      	str	r3, [sp, #28]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	9306      	str	r3, [sp, #24]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	9305      	str	r3, [sp, #20]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	9602      	str	r6, [sp, #8]
 80093ea:	9501      	str	r5, [sp, #4]
 80093ec:	9400      	str	r4, [sp, #0]
 80093ee:	460b      	mov	r3, r1
 80093f0:	496d      	ldr	r1, [pc, #436]	; (80095a8 <taskLog+0x294>)
 80093f2:	f000 fcb3 	bl	8009d5c <siprintf>
					timeToLog
				);

				/* number of messages in the buffer */
				numberMessagesToLog++;
 80093f6:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 80093fa:	3301      	adds	r3, #1
 80093fc:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303

				/* if buffer is full */
				if (numberMessagesToLog == SIZE_CAN_MESSAGE_BUFFER) {
 8009400:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 8009404:	2b0f      	cmp	r3, #15
 8009406:	d1ab      	bne.n	8009360 <taskLog+0x4c>
					/* open file */
					f_status = f_open(&SDFile, fileName, FA_OPEN_ALWAYS | FA_WRITE);
 8009408:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800940c:	2212      	movs	r2, #18
 800940e:	4619      	mov	r1, r3
 8009410:	4866      	ldr	r0, [pc, #408]	; (80095ac <taskLog+0x298>)
 8009412:	f7fc fafb 	bl	8005a0c <f_open>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302

					if (f_status == FR_OK) {
 800941c:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009420:	2b00      	cmp	r3, #0
 8009422:	d123      	bne.n	800946c <taskLog+0x158>
						/* set pointer to the end of the file */
						f_status = f_lseek(&SDFile, f_size(&SDFile));
 8009424:	4b61      	ldr	r3, [pc, #388]	; (80095ac <taskLog+0x298>)
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	4619      	mov	r1, r3
 800942a:	4860      	ldr	r0, [pc, #384]	; (80095ac <taskLog+0x298>)
 800942c:	f7fc fec9 	bl	80061c2 <f_lseek>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
						if (f_status != FR_OK) {
 8009436:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 800943a:	2b00      	cmp	r3, #0
 800943c:	d005      	beq.n	800944a <taskLog+0x136>
							sdCardError(f_status, 5);
 800943e:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009442:	2105      	movs	r1, #5
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f8b9 	bl	80095bc <sdCardError>
						}

						/* write message in log file */
						if (f_puts(messageToLog, &SDFile) > 0);
 800944a:	f107 0318 	add.w	r3, r7, #24
 800944e:	4957      	ldr	r1, [pc, #348]	; (80095ac <taskLog+0x298>)
 8009450:	4618      	mov	r0, r3
 8009452:	f7fd fa3e 	bl	80068d2 <f_puts>

						/* wait until file is closed */
						do {
							f_status = f_close(&SDFile);
 8009456:	4855      	ldr	r0, [pc, #340]	; (80095ac <taskLog+0x298>)
 8009458:	f7fc fe89 	bl	800616e <f_close>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
						} while (f_status != FR_OK);
 8009462:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1f5      	bne.n	8009456 <taskLog+0x142>
 800946a:	e005      	b.n	8009478 <taskLog+0x164>
					}

					else {
						sdCardError(f_status, 4);
 800946c:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009470:	2104      	movs	r1, #4
 8009472:	4618      	mov	r0, r3
 8009474:	f000 f8a2 	bl	80095bc <sdCardError>
					}

					/* reset buffer */
					memset(messageToLog, 0, sizeof(messageToLog));
 8009478:	f107 0318 	add.w	r3, r7, #24
 800947c:	f240 22a3 	movw	r2, #675	; 0x2a3
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fc61 	bl	8009d4a <memset>
					numberMessagesToLog = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303

					/* green LED for debugging */
					HAL_GPIO_TogglePin(GPIOG, GREEN_LED_Pin);
 800948e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009492:	4847      	ldr	r0, [pc, #284]	; (80095b0 <taskLog+0x29c>)
 8009494:	f7f8 f9e1 	bl	800185a <HAL_GPIO_TogglePin>
 8009498:	e762      	b.n	8009360 <taskLog+0x4c>
				}
			}
		}

		/* waits for a GPS message, in order to get the date for the file name */
		else if ((message.id == ID_CAN_GPS) && !(flagDateSet)) {
 800949a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800949e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80094a2:	f47f af5d 	bne.w	8009360 <taskLog+0x4c>
 80094a6:	4b3f      	ldr	r3, [pc, #252]	; (80095a4 <taskLog+0x290>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	f083 0301 	eor.w	r3, r3, #1
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f43f af55 	beq.w	8009360 <taskLog+0x4c>
			/* struct with date and time */
			logDateTime.day = message.data[0];
 80094b6:	f897 32d4 	ldrb.w	r3, [r7, #724]	; 0x2d4
 80094ba:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
			logDateTime.month = message.data[1];
 80094be:	f897 32d5 	ldrb.w	r3, [r7, #725]	; 0x2d5
 80094c2:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
			logDateTime.year = message.data[2];
 80094c6:	f897 32d6 	ldrb.w	r3, [r7, #726]	; 0x2d6
 80094ca:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4

			logDateTime.hour = message.data[3];
 80094ce:	f897 32d7 	ldrb.w	r3, [r7, #727]	; 0x2d7
 80094d2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
			logDateTime.minute = message.data[4];
 80094d6:	f897 32d8 	ldrb.w	r3, [r7, #728]	; 0x2d8
 80094da:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc

			/* create folder in SD card, if does not exist */
			sprintf(folderPath, "%02d-%02d-%02d",
 80094de:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 80094e2:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 80094e6:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80094ea:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	460b      	mov	r3, r1
 80094f2:	4930      	ldr	r1, [pc, #192]	; (80095b4 <taskLog+0x2a0>)
 80094f4:	f000 fc32 	bl	8009d5c <siprintf>
				logDateTime.year,
				logDateTime.month,
				logDateTime.day
			);
			f_status = f_mkdir(folderPath);
 80094f8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fd f869 	bl	80065d4 <f_mkdir>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
			if ((f_status != FR_OK) && (f_status != FR_EXIST)) {
 8009508:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <taskLog+0x210>
 8009510:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009514:	2b08      	cmp	r3, #8
 8009516:	d005      	beq.n	8009524 <taskLog+0x210>
				sdCardError(f_status, 1);
 8009518:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 800951c:	2101      	movs	r1, #1
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f84c 	bl	80095bc <sdCardError>
			}

			/* create new file in SD card's folder */
			sprintf(fileName, "%s/%02d-%02d.txt",
 8009524:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8009528:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800952c:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8009530:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	460b      	mov	r3, r1
 8009538:	491f      	ldr	r1, [pc, #124]	; (80095b8 <taskLog+0x2a4>)
 800953a:	f000 fc0f 	bl	8009d5c <siprintf>
				folderPath,
				logDateTime.hour,
				logDateTime.minute
			);
			f_status = f_open(&SDFile, fileName, FA_CREATE_ALWAYS | FA_WRITE);
 800953e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009542:	220a      	movs	r2, #10
 8009544:	4619      	mov	r1, r3
 8009546:	4819      	ldr	r0, [pc, #100]	; (80095ac <taskLog+0x298>)
 8009548:	f7fc fa60 	bl	8005a0c <f_open>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
			if (f_status != FR_OK) {
 8009552:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <taskLog+0x252>
				sdCardError(f_status, 2);
 800955a:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 800955e:	2102      	movs	r1, #2
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f82b 	bl	80095bc <sdCardError>
			}

			/* close file */
			f_status = f_close(&SDFile);
 8009566:	4811      	ldr	r0, [pc, #68]	; (80095ac <taskLog+0x298>)
 8009568:	f7fc fe01 	bl	800616e <f_close>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
			if (f_status != FR_OK) {
 8009572:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8009576:	2b00      	cmp	r3, #0
 8009578:	d005      	beq.n	8009586 <taskLog+0x272>
				sdCardError(f_status, 3);
 800957a:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 800957e:	2103      	movs	r1, #3
 8009580:	4618      	mov	r0, r3
 8009582:	f000 f81b 	bl	80095bc <sdCardError>
			}

			/* if date and time are set, does not enter here anymore */
			flagDateSet = 1;
 8009586:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <taskLog+0x290>)
 8009588:	2201      	movs	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]

			/* get initial timestamp for delta time calculation */
			timeInit = xTaskGetTickCount();
 800958c:	f7fe f9a6 	bl	80078dc <xTaskGetTickCount>
 8009590:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
		xQueueReceive(xQueueCAN, (void *) &message, portMAX_DELAY);
 8009594:	e6e4      	b.n	8009360 <taskLog+0x4c>
 8009596:	bf00      	nop
 8009598:	20012e7c 	.word	0x20012e7c
 800959c:	200130b0 	.word	0x200130b0
 80095a0:	20013374 	.word	0x20013374
 80095a4:	20012e24 	.word	0x20012e24
 80095a8:	0800a5e0 	.word	0x0800a5e0
 80095ac:	20012e80 	.word	0x20012e80
 80095b0:	40021800 	.word	0x40021800
 80095b4:	0800a614 	.word	0x0800a614
 80095b8:	0800a624 	.word	0x0800a624

080095bc <sdCardError>:

	/* unmount drive, don't forget this! */
	f_mount(0, "", 1);
}

void sdCardError(FRESULT f_status, uint8_t location) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	460a      	mov	r2, r1
 80095c6:	71fb      	strb	r3, [r7, #7]
 80095c8:	4613      	mov	r3, r2
 80095ca:	71bb      	strb	r3, [r7, #6]
	/* red LED for debugging */
	HAL_GPIO_TogglePin(GPIOG, RED_LED_Pin);
 80095cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80095d0:	4801      	ldr	r0, [pc, #4]	; (80095d8 <sdCardError+0x1c>)
 80095d2:	f7f8 f942 	bl	800185a <HAL_GPIO_TogglePin>

	while (1);
 80095d6:	e7fe      	b.n	80095d6 <sdCardError+0x1a>
 80095d8:	40021800 	.word	0x40021800

080095dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a04      	ldr	r2, [pc, #16]	; (80095fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d101      	bne.n	80095f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80095ee:	f7f6 fff1 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	40010000 	.word	0x40010000

08009600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <SD_CheckStatus+0x38>)
 800961c:	2201      	movs	r2, #1
 800961e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009620:	f7ff fc04 	bl	8008e2c <BSP_SD_GetCardState>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d107      	bne.n	800963a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800962a:	4b07      	ldr	r3, [pc, #28]	; (8009648 <SD_CheckStatus+0x38>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f023 0301 	bic.w	r3, r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	4b04      	ldr	r3, [pc, #16]	; (8009648 <SD_CheckStatus+0x38>)
 8009638:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800963a:	4b03      	ldr	r3, [pc, #12]	; (8009648 <SD_CheckStatus+0x38>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	b2db      	uxtb	r3, r3
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	2000000c 	.word	0x2000000c

0800964c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8009656:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <SD_initialize+0x38>)
 8009658:	2201      	movs	r2, #1
 800965a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800965c:	f7ff fb92 	bl	8008d84 <BSP_SD_Init>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff ffd1 	bl	8009610 <SD_CheckStatus>
 800966e:	4603      	mov	r3, r0
 8009670:	461a      	mov	r2, r3
 8009672:	4b04      	ldr	r3, [pc, #16]	; (8009684 <SD_initialize+0x38>)
 8009674:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8009676:	4b03      	ldr	r3, [pc, #12]	; (8009684 <SD_initialize+0x38>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	b2db      	uxtb	r3, r3
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	2000000c 	.word	0x2000000c

08009688 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	4618      	mov	r0, r3
 8009696:	f7ff ffbb 	bl	8009610 <SD_CheckStatus>
 800969a:	4603      	mov	r3, r0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80096b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f7ff fb77 	bl	8008db4 <BSP_SD_ReadBlocks>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d107      	bne.n	80096dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80096cc:	bf00      	nop
 80096ce:	f7ff fbad 	bl	8008e2c <BSP_SD_GetCardState>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1fa      	bne.n	80096ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b086      	sub	sp, #24
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80096fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	68b8      	ldr	r0, [r7, #8]
 8009704:	f7ff fb74 	bl	8008df0 <BSP_SD_WriteBlocks>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d107      	bne.n	800971e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800970e:	bf00      	nop
 8009710:	f7ff fb8c 	bl	8008e2c <BSP_SD_GetCardState>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1fa      	bne.n	8009710 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800971e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08c      	sub	sp, #48	; 0x30
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	603a      	str	r2, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
 8009734:	460b      	mov	r3, r1
 8009736:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800973e:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <SD_ioctl+0xac>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <SD_ioctl+0x28>
 800974c:	2303      	movs	r3, #3
 800974e:	e03c      	b.n	80097ca <SD_ioctl+0xa2>

  switch (cmd)
 8009750:	79bb      	ldrb	r3, [r7, #6]
 8009752:	2b03      	cmp	r3, #3
 8009754:	d834      	bhi.n	80097c0 <SD_ioctl+0x98>
 8009756:	a201      	add	r2, pc, #4	; (adr r2, 800975c <SD_ioctl+0x34>)
 8009758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975c:	0800976d 	.word	0x0800976d
 8009760:	08009775 	.word	0x08009775
 8009764:	0800978d 	.word	0x0800978d
 8009768:	080097a7 	.word	0x080097a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009772:	e028      	b.n	80097c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009774:	f107 030c 	add.w	r3, r7, #12
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fb67 	bl	8008e4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800977e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800978a:	e01c      	b.n	80097c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800978c:	f107 030c 	add.w	r3, r7, #12
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fb5b 	bl	8008e4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	b29a      	uxth	r2, r3
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097a4:	e00f      	b.n	80097c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80097a6:	f107 030c 	add.w	r3, r7, #12
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fb4e 	bl	8008e4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	0a5a      	lsrs	r2, r3, #9
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097be:	e002      	b.n	80097c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80097c0:	2304      	movs	r3, #4
 80097c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80097c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3730      	adds	r7, #48	; 0x30
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	2000000c 	.word	0x2000000c

080097d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097de:	2300      	movs	r3, #0
 80097e0:	607b      	str	r3, [r7, #4]
 80097e2:	4b10      	ldr	r3, [pc, #64]	; (8009824 <HAL_MspInit+0x4c>)
 80097e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e6:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <HAL_MspInit+0x4c>)
 80097e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097ec:	6453      	str	r3, [r2, #68]	; 0x44
 80097ee:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <HAL_MspInit+0x4c>)
 80097f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80097fa:	2300      	movs	r3, #0
 80097fc:	603b      	str	r3, [r7, #0]
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <HAL_MspInit+0x4c>)
 8009800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009802:	4a08      	ldr	r2, [pc, #32]	; (8009824 <HAL_MspInit+0x4c>)
 8009804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009808:	6413      	str	r3, [r2, #64]	; 0x40
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <HAL_MspInit+0x4c>)
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40023800 	.word	0x40023800

08009828 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08a      	sub	sp, #40	; 0x28
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009830:	f107 0314 	add.w	r3, r7, #20
 8009834:	2200      	movs	r2, #0
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	605a      	str	r2, [r3, #4]
 800983a:	609a      	str	r2, [r3, #8]
 800983c:	60da      	str	r2, [r3, #12]
 800983e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a19      	ldr	r2, [pc, #100]	; (80098ac <HAL_CAN_MspInit+0x84>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d12c      	bne.n	80098a4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800984a:	2300      	movs	r3, #0
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	4b18      	ldr	r3, [pc, #96]	; (80098b0 <HAL_CAN_MspInit+0x88>)
 8009850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009852:	4a17      	ldr	r2, [pc, #92]	; (80098b0 <HAL_CAN_MspInit+0x88>)
 8009854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009858:	6413      	str	r3, [r2, #64]	; 0x40
 800985a:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <HAL_CAN_MspInit+0x88>)
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <HAL_CAN_MspInit+0x88>)
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	4a10      	ldr	r2, [pc, #64]	; (80098b0 <HAL_CAN_MspInit+0x88>)
 8009870:	f043 0301 	orr.w	r3, r3, #1
 8009874:	6313      	str	r3, [r2, #48]	; 0x30
 8009876:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <HAL_CAN_MspInit+0x88>)
 8009878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009888:	2302      	movs	r3, #2
 800988a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800988c:	2300      	movs	r3, #0
 800988e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009890:	2303      	movs	r3, #3
 8009892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8009894:	2309      	movs	r3, #9
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009898:	f107 0314 	add.w	r3, r7, #20
 800989c:	4619      	mov	r1, r3
 800989e:	4805      	ldr	r0, [pc, #20]	; (80098b4 <HAL_CAN_MspInit+0x8c>)
 80098a0:	f7f7 fe00 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80098a4:	bf00      	nop
 80098a6:	3728      	adds	r7, #40	; 0x28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	40006400 	.word	0x40006400
 80098b0:	40023800 	.word	0x40023800
 80098b4:	40020000 	.word	0x40020000

080098b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	609a      	str	r2, [r3, #8]
 80098cc:	60da      	str	r2, [r3, #12]
 80098ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a6c      	ldr	r2, [pc, #432]	; (8009a88 <HAL_SD_MspInit+0x1d0>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	f040 80d2 	bne.w	8009a80 <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	4b6a      	ldr	r3, [pc, #424]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 80098e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e4:	4a69      	ldr	r2, [pc, #420]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 80098e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80098ea:	6453      	str	r3, [r2, #68]	; 0x44
 80098ec:	4b67      	ldr	r3, [pc, #412]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 80098ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	4b63      	ldr	r3, [pc, #396]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	4a62      	ldr	r2, [pc, #392]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 8009902:	f043 0304 	orr.w	r3, r3, #4
 8009906:	6313      	str	r3, [r2, #48]	; 0x30
 8009908:	4b60      	ldr	r3, [pc, #384]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 800990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009914:	2300      	movs	r3, #0
 8009916:	60bb      	str	r3, [r7, #8]
 8009918:	4b5c      	ldr	r3, [pc, #368]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 800991a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991c:	4a5b      	ldr	r2, [pc, #364]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 800991e:	f043 0308 	orr.w	r3, r3, #8
 8009922:	6313      	str	r3, [r2, #48]	; 0x30
 8009924:	4b59      	ldr	r3, [pc, #356]	; (8009a8c <HAL_SD_MspInit+0x1d4>)
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	60bb      	str	r3, [r7, #8]
 800992e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration    
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009936:	2302      	movs	r3, #2
 8009938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800993a:	2301      	movs	r3, #1
 800993c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800993e:	2303      	movs	r3, #3
 8009940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009942:	230c      	movs	r3, #12
 8009944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009946:	f107 0314 	add.w	r3, r7, #20
 800994a:	4619      	mov	r1, r3
 800994c:	4850      	ldr	r0, [pc, #320]	; (8009a90 <HAL_SD_MspInit+0x1d8>)
 800994e:	f7f7 fda9 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009958:	2302      	movs	r3, #2
 800995a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800995c:	2300      	movs	r3, #0
 800995e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009960:	2303      	movs	r3, #3
 8009962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009964:	230c      	movs	r3, #12
 8009966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009968:	f107 0314 	add.w	r3, r7, #20
 800996c:	4619      	mov	r1, r3
 800996e:	4848      	ldr	r0, [pc, #288]	; (8009a90 <HAL_SD_MspInit+0x1d8>)
 8009970:	f7f7 fd98 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009974:	2304      	movs	r3, #4
 8009976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009978:	2302      	movs	r3, #2
 800997a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800997c:	2301      	movs	r3, #1
 800997e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009980:	2303      	movs	r3, #3
 8009982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009984:	230c      	movs	r3, #12
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	4619      	mov	r1, r3
 800998e:	4841      	ldr	r0, [pc, #260]	; (8009a94 <HAL_SD_MspInit+0x1dc>)
 8009990:	f7f7 fd88 	bl	80014a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8009994:	4b40      	ldr	r3, [pc, #256]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 8009996:	4a41      	ldr	r2, [pc, #260]	; (8009a9c <HAL_SD_MspInit+0x1e4>)
 8009998:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800999a:	4b3f      	ldr	r3, [pc, #252]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 800999c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80099a0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099a2:	4b3d      	ldr	r3, [pc, #244]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099a8:	4b3b      	ldr	r3, [pc, #236]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099ae:	4b3a      	ldr	r3, [pc, #232]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099b4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80099b6:	4b38      	ldr	r3, [pc, #224]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099bc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80099be:	4b36      	ldr	r3, [pc, #216]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099c4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80099c6:	4b34      	ldr	r3, [pc, #208]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099c8:	2220      	movs	r2, #32
 80099ca:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80099cc:	4b32      	ldr	r3, [pc, #200]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80099d2:	4b31      	ldr	r3, [pc, #196]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099d4:	2204      	movs	r2, #4
 80099d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80099d8:	4b2f      	ldr	r3, [pc, #188]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099da:	2203      	movs	r2, #3
 80099dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80099de:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80099e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80099e6:	4b2c      	ldr	r3, [pc, #176]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80099ee:	482a      	ldr	r0, [pc, #168]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 80099f0:	f7f7 fa70 	bl	8000ed4 <HAL_DMA_Init>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80099fa:	f7ff fe01 	bl	8009600 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a25      	ldr	r2, [pc, #148]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 8009a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8009a04:	4a24      	ldr	r2, [pc, #144]	; (8009a98 <HAL_SD_MspInit+0x1e0>)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8009a0a:	4b25      	ldr	r3, [pc, #148]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a0c:	4a25      	ldr	r2, [pc, #148]	; (8009aa4 <HAL_SD_MspInit+0x1ec>)
 8009a0e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8009a10:	4b23      	ldr	r3, [pc, #140]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009a16:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a18:	4b21      	ldr	r3, [pc, #132]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a1a:	2240      	movs	r2, #64	; 0x40
 8009a1c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a1e:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a24:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a2a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009a2c:	4b1c      	ldr	r3, [pc, #112]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a32:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009a34:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a3a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8009a3c:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a3e:	2220      	movs	r2, #32
 8009a40:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a42:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009a48:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a4a:	2204      	movs	r2, #4
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009a4e:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a50:	2203      	movs	r2, #3
 8009a52:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8009a54:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009a5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009a62:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8009a64:	480e      	ldr	r0, [pc, #56]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a66:	f7f7 fa35 	bl	8000ed4 <HAL_DMA_Init>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8009a70:	f7ff fdc6 	bl	8009600 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a0a      	ldr	r2, [pc, #40]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a78:	641a      	str	r2, [r3, #64]	; 0x40
 8009a7a:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <HAL_SD_MspInit+0x1e8>)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009a80:	bf00      	nop
 8009a82:	3728      	adds	r7, #40	; 0x28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40012c00 	.word	0x40012c00
 8009a8c:	40023800 	.word	0x40023800
 8009a90:	40020800 	.word	0x40020800
 8009a94:	40020c00 	.word	0x40020c00
 8009a98:	20013308 	.word	0x20013308
 8009a9c:	40026458 	.word	0x40026458
 8009aa0:	20013378 	.word	0x20013378
 8009aa4:	400264a0 	.word	0x400264a0

08009aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08c      	sub	sp, #48	; 0x30
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8009ab8:	2200      	movs	r2, #0
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	2019      	movs	r0, #25
 8009abe:	f7f7 f9df 	bl	8000e80 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8009ac2:	2019      	movs	r0, #25
 8009ac4:	f7f7 f9f8 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	4b1e      	ldr	r3, [pc, #120]	; (8009b48 <HAL_InitTick+0xa0>)
 8009ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad0:	4a1d      	ldr	r2, [pc, #116]	; (8009b48 <HAL_InitTick+0xa0>)
 8009ad2:	f043 0301 	orr.w	r3, r3, #1
 8009ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <HAL_InitTick+0xa0>)
 8009ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009ae4:	f107 0210 	add.w	r2, r7, #16
 8009ae8:	f107 0314 	add.w	r3, r7, #20
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7f8 faea 	bl	80020c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8009af4:	f7f8 fad4 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 8009af8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	4a13      	ldr	r2, [pc, #76]	; (8009b4c <HAL_InitTick+0xa4>)
 8009afe:	fba2 2303 	umull	r2, r3, r2, r3
 8009b02:	0c9b      	lsrs	r3, r3, #18
 8009b04:	3b01      	subs	r3, #1
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <HAL_InitTick+0xa8>)
 8009b0a:	4a12      	ldr	r2, [pc, #72]	; (8009b54 <HAL_InitTick+0xac>)
 8009b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8009b0e:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <HAL_InitTick+0xa8>)
 8009b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8009b16:	4a0e      	ldr	r2, [pc, #56]	; (8009b50 <HAL_InitTick+0xa8>)
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <HAL_InitTick+0xa8>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b22:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <HAL_InitTick+0xa8>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009b28:	4809      	ldr	r0, [pc, #36]	; (8009b50 <HAL_InitTick+0xa8>)
 8009b2a:	f7f9 fa9b 	bl	8003064 <HAL_TIM_Base_Init>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d104      	bne.n	8009b3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8009b34:	4806      	ldr	r0, [pc, #24]	; (8009b50 <HAL_InitTick+0xa8>)
 8009b36:	f7f9 faca 	bl	80030ce <HAL_TIM_Base_Start_IT>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	e000      	b.n	8009b40 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3730      	adds	r7, #48	; 0x30
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	431bde83 	.word	0x431bde83
 8009b50:	200134a8 	.word	0x200134a8
 8009b54:	40010000 	.word	0x40010000

08009b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009b5c:	bf00      	nop
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009b66:	b480      	push	{r7}
 8009b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b6a:	e7fe      	b.n	8009b6a <HardFault_Handler+0x4>

08009b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b70:	e7fe      	b.n	8009b70 <MemManage_Handler+0x4>

08009b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b72:	b480      	push	{r7}
 8009b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b76:	e7fe      	b.n	8009b76 <BusFault_Handler+0x4>

08009b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b7c:	e7fe      	b.n	8009b7c <UsageFault_Handler+0x4>

08009b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b82:	bf00      	nop
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009b90:	4802      	ldr	r0, [pc, #8]	; (8009b9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009b92:	f7f9 fac0 	bl	8003116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009b96:	bf00      	nop
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200134a8 	.word	0x200134a8

08009ba0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8009ba4:	4802      	ldr	r0, [pc, #8]	; (8009bb0 <DMA2_Stream3_IRQHandler+0x10>)
 8009ba6:	f7f7 fa43 	bl	8001030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8009baa:	bf00      	nop
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20013308 	.word	0x20013308

08009bb4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8009bb8:	4802      	ldr	r0, [pc, #8]	; (8009bc4 <DMA2_Stream6_IRQHandler+0x10>)
 8009bba:	f7f7 fa39 	bl	8001030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8009bbe:	bf00      	nop
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20013378 	.word	0x20013378

08009bc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009bd0:	4b11      	ldr	r3, [pc, #68]	; (8009c18 <_sbrk+0x50>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d102      	bne.n	8009bde <_sbrk+0x16>
		heap_end = &end;
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <_sbrk+0x50>)
 8009bda:	4a10      	ldr	r2, [pc, #64]	; (8009c1c <_sbrk+0x54>)
 8009bdc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009bde:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <_sbrk+0x50>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009be4:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <_sbrk+0x50>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4413      	add	r3, r2
 8009bec:	466a      	mov	r2, sp
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d907      	bls.n	8009c02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009bf2:	f000 f875 	bl	8009ce0 <__errno>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	230c      	movs	r3, #12
 8009bfa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c00:	e006      	b.n	8009c10 <_sbrk+0x48>
	}

	heap_end += incr;
 8009c02:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <_sbrk+0x50>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4413      	add	r3, r2
 8009c0a:	4a03      	ldr	r2, [pc, #12]	; (8009c18 <_sbrk+0x50>)
 8009c0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20012e28 	.word	0x20012e28
 8009c1c:	200134f0 	.word	0x200134f0

08009c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009c24:	4b16      	ldr	r3, [pc, #88]	; (8009c80 <SystemInit+0x60>)
 8009c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c2a:	4a15      	ldr	r2, [pc, #84]	; (8009c80 <SystemInit+0x60>)
 8009c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009c34:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <SystemInit+0x64>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a12      	ldr	r2, [pc, #72]	; (8009c84 <SystemInit+0x64>)
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009c40:	4b10      	ldr	r3, [pc, #64]	; (8009c84 <SystemInit+0x64>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <SystemInit+0x64>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a0e      	ldr	r2, [pc, #56]	; (8009c84 <SystemInit+0x64>)
 8009c4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <SystemInit+0x64>)
 8009c58:	4a0b      	ldr	r2, [pc, #44]	; (8009c88 <SystemInit+0x68>)
 8009c5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009c5c:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <SystemInit+0x64>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <SystemInit+0x64>)
 8009c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <SystemInit+0x64>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009c6e:	4b04      	ldr	r3, [pc, #16]	; (8009c80 <SystemInit+0x60>)
 8009c70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c74:	609a      	str	r2, [r3, #8]
#endif
}
 8009c76:	bf00      	nop
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	e000ed00 	.word	0xe000ed00
 8009c84:	40023800 	.word	0x40023800
 8009c88:	24003010 	.word	0x24003010

08009c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8009c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009cc4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c92:	e003      	b.n	8009c9c <LoopCopyDataInit>

08009c94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c94:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c9a:	3104      	adds	r1, #4

08009c9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009c9c:	480b      	ldr	r0, [pc, #44]	; (8009ccc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ca0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009ca2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ca4:	d3f6      	bcc.n	8009c94 <CopyDataInit>
  ldr  r2, =_sbss
 8009ca6:	4a0b      	ldr	r2, [pc, #44]	; (8009cd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009ca8:	e002      	b.n	8009cb0 <LoopFillZerobss>

08009caa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009caa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009cac:	f842 3b04 	str.w	r3, [r2], #4

08009cb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009cb4:	d3f9      	bcc.n	8009caa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009cb6:	f7ff ffb3 	bl	8009c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cba:	f000 f817 	bl	8009cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009cbe:	f7ff faa7 	bl	8009210 <main>
  bx  lr    
 8009cc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8009cc4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8009cc8:	0800a730 	.word	0x0800a730
  ldr  r0, =_sdata
 8009ccc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009cd0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8009cd4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8009cd8:	200134ec 	.word	0x200134ec

08009cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009cdc:	e7fe      	b.n	8009cdc <ADC_IRQHandler>
	...

08009ce0 <__errno>:
 8009ce0:	4b01      	ldr	r3, [pc, #4]	; (8009ce8 <__errno+0x8>)
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	20000014 	.word	0x20000014

08009cec <__libc_init_array>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4e0d      	ldr	r6, [pc, #52]	; (8009d24 <__libc_init_array+0x38>)
 8009cf0:	4c0d      	ldr	r4, [pc, #52]	; (8009d28 <__libc_init_array+0x3c>)
 8009cf2:	1ba4      	subs	r4, r4, r6
 8009cf4:	10a4      	asrs	r4, r4, #2
 8009cf6:	2500      	movs	r5, #0
 8009cf8:	42a5      	cmp	r5, r4
 8009cfa:	d109      	bne.n	8009d10 <__libc_init_array+0x24>
 8009cfc:	4e0b      	ldr	r6, [pc, #44]	; (8009d2c <__libc_init_array+0x40>)
 8009cfe:	4c0c      	ldr	r4, [pc, #48]	; (8009d30 <__libc_init_array+0x44>)
 8009d00:	f000 fc28 	bl	800a554 <_init>
 8009d04:	1ba4      	subs	r4, r4, r6
 8009d06:	10a4      	asrs	r4, r4, #2
 8009d08:	2500      	movs	r5, #0
 8009d0a:	42a5      	cmp	r5, r4
 8009d0c:	d105      	bne.n	8009d1a <__libc_init_array+0x2e>
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d14:	4798      	blx	r3
 8009d16:	3501      	adds	r5, #1
 8009d18:	e7ee      	b.n	8009cf8 <__libc_init_array+0xc>
 8009d1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d1e:	4798      	blx	r3
 8009d20:	3501      	adds	r5, #1
 8009d22:	e7f2      	b.n	8009d0a <__libc_init_array+0x1e>
 8009d24:	0800a728 	.word	0x0800a728
 8009d28:	0800a728 	.word	0x0800a728
 8009d2c:	0800a728 	.word	0x0800a728
 8009d30:	0800a72c 	.word	0x0800a72c

08009d34 <memcpy>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	1e43      	subs	r3, r0, #1
 8009d38:	440a      	add	r2, r1
 8009d3a:	4291      	cmp	r1, r2
 8009d3c:	d100      	bne.n	8009d40 <memcpy+0xc>
 8009d3e:	bd10      	pop	{r4, pc}
 8009d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d48:	e7f7      	b.n	8009d3a <memcpy+0x6>

08009d4a <memset>:
 8009d4a:	4402      	add	r2, r0
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d100      	bne.n	8009d54 <memset+0xa>
 8009d52:	4770      	bx	lr
 8009d54:	f803 1b01 	strb.w	r1, [r3], #1
 8009d58:	e7f9      	b.n	8009d4e <memset+0x4>
	...

08009d5c <siprintf>:
 8009d5c:	b40e      	push	{r1, r2, r3}
 8009d5e:	b500      	push	{lr}
 8009d60:	b09c      	sub	sp, #112	; 0x70
 8009d62:	ab1d      	add	r3, sp, #116	; 0x74
 8009d64:	9002      	str	r0, [sp, #8]
 8009d66:	9006      	str	r0, [sp, #24]
 8009d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d6c:	4809      	ldr	r0, [pc, #36]	; (8009d94 <siprintf+0x38>)
 8009d6e:	9107      	str	r1, [sp, #28]
 8009d70:	9104      	str	r1, [sp, #16]
 8009d72:	4909      	ldr	r1, [pc, #36]	; (8009d98 <siprintf+0x3c>)
 8009d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d78:	9105      	str	r1, [sp, #20]
 8009d7a:	6800      	ldr	r0, [r0, #0]
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	a902      	add	r1, sp, #8
 8009d80:	f000 f866 	bl	8009e50 <_svfiprintf_r>
 8009d84:	9b02      	ldr	r3, [sp, #8]
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	b01c      	add	sp, #112	; 0x70
 8009d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d90:	b003      	add	sp, #12
 8009d92:	4770      	bx	lr
 8009d94:	20000014 	.word	0x20000014
 8009d98:	ffff0208 	.word	0xffff0208

08009d9c <__ssputs_r>:
 8009d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	688e      	ldr	r6, [r1, #8]
 8009da2:	429e      	cmp	r6, r3
 8009da4:	4682      	mov	sl, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	4690      	mov	r8, r2
 8009daa:	4699      	mov	r9, r3
 8009dac:	d837      	bhi.n	8009e1e <__ssputs_r+0x82>
 8009dae:	898a      	ldrh	r2, [r1, #12]
 8009db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009db4:	d031      	beq.n	8009e1a <__ssputs_r+0x7e>
 8009db6:	6825      	ldr	r5, [r4, #0]
 8009db8:	6909      	ldr	r1, [r1, #16]
 8009dba:	1a6f      	subs	r7, r5, r1
 8009dbc:	6965      	ldr	r5, [r4, #20]
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8009dc8:	f109 0301 	add.w	r3, r9, #1
 8009dcc:	443b      	add	r3, r7
 8009dce:	429d      	cmp	r5, r3
 8009dd0:	bf38      	it	cc
 8009dd2:	461d      	movcc	r5, r3
 8009dd4:	0553      	lsls	r3, r2, #21
 8009dd6:	d530      	bpl.n	8009e3a <__ssputs_r+0x9e>
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f000 fb21 	bl	800a420 <_malloc_r>
 8009dde:	4606      	mov	r6, r0
 8009de0:	b950      	cbnz	r0, 8009df8 <__ssputs_r+0x5c>
 8009de2:	230c      	movs	r3, #12
 8009de4:	f8ca 3000 	str.w	r3, [sl]
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df8:	463a      	mov	r2, r7
 8009dfa:	6921      	ldr	r1, [r4, #16]
 8009dfc:	f7ff ff9a 	bl	8009d34 <memcpy>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	6126      	str	r6, [r4, #16]
 8009e0e:	6165      	str	r5, [r4, #20]
 8009e10:	443e      	add	r6, r7
 8009e12:	1bed      	subs	r5, r5, r7
 8009e14:	6026      	str	r6, [r4, #0]
 8009e16:	60a5      	str	r5, [r4, #8]
 8009e18:	464e      	mov	r6, r9
 8009e1a:	454e      	cmp	r6, r9
 8009e1c:	d900      	bls.n	8009e20 <__ssputs_r+0x84>
 8009e1e:	464e      	mov	r6, r9
 8009e20:	4632      	mov	r2, r6
 8009e22:	4641      	mov	r1, r8
 8009e24:	6820      	ldr	r0, [r4, #0]
 8009e26:	f000 fa93 	bl	800a350 <memmove>
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	1b9b      	subs	r3, r3, r6
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	441e      	add	r6, r3
 8009e34:	6026      	str	r6, [r4, #0]
 8009e36:	2000      	movs	r0, #0
 8009e38:	e7dc      	b.n	8009df4 <__ssputs_r+0x58>
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	f000 fb4a 	bl	800a4d4 <_realloc_r>
 8009e40:	4606      	mov	r6, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d1e2      	bne.n	8009e0c <__ssputs_r+0x70>
 8009e46:	6921      	ldr	r1, [r4, #16]
 8009e48:	4650      	mov	r0, sl
 8009e4a:	f000 fa9b 	bl	800a384 <_free_r>
 8009e4e:	e7c8      	b.n	8009de2 <__ssputs_r+0x46>

08009e50 <_svfiprintf_r>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	461d      	mov	r5, r3
 8009e56:	898b      	ldrh	r3, [r1, #12]
 8009e58:	061f      	lsls	r7, r3, #24
 8009e5a:	b09d      	sub	sp, #116	; 0x74
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	4616      	mov	r6, r2
 8009e62:	d50f      	bpl.n	8009e84 <_svfiprintf_r+0x34>
 8009e64:	690b      	ldr	r3, [r1, #16]
 8009e66:	b96b      	cbnz	r3, 8009e84 <_svfiprintf_r+0x34>
 8009e68:	2140      	movs	r1, #64	; 0x40
 8009e6a:	f000 fad9 	bl	800a420 <_malloc_r>
 8009e6e:	6020      	str	r0, [r4, #0]
 8009e70:	6120      	str	r0, [r4, #16]
 8009e72:	b928      	cbnz	r0, 8009e80 <_svfiprintf_r+0x30>
 8009e74:	230c      	movs	r3, #12
 8009e76:	f8c8 3000 	str.w	r3, [r8]
 8009e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e7e:	e0c8      	b.n	800a012 <_svfiprintf_r+0x1c2>
 8009e80:	2340      	movs	r3, #64	; 0x40
 8009e82:	6163      	str	r3, [r4, #20]
 8009e84:	2300      	movs	r3, #0
 8009e86:	9309      	str	r3, [sp, #36]	; 0x24
 8009e88:	2320      	movs	r3, #32
 8009e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e8e:	2330      	movs	r3, #48	; 0x30
 8009e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e94:	9503      	str	r5, [sp, #12]
 8009e96:	f04f 0b01 	mov.w	fp, #1
 8009e9a:	4637      	mov	r7, r6
 8009e9c:	463d      	mov	r5, r7
 8009e9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ea2:	b10b      	cbz	r3, 8009ea8 <_svfiprintf_r+0x58>
 8009ea4:	2b25      	cmp	r3, #37	; 0x25
 8009ea6:	d13e      	bne.n	8009f26 <_svfiprintf_r+0xd6>
 8009ea8:	ebb7 0a06 	subs.w	sl, r7, r6
 8009eac:	d00b      	beq.n	8009ec6 <_svfiprintf_r+0x76>
 8009eae:	4653      	mov	r3, sl
 8009eb0:	4632      	mov	r2, r6
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4640      	mov	r0, r8
 8009eb6:	f7ff ff71 	bl	8009d9c <__ssputs_r>
 8009eba:	3001      	adds	r0, #1
 8009ebc:	f000 80a4 	beq.w	800a008 <_svfiprintf_r+0x1b8>
 8009ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec2:	4453      	add	r3, sl
 8009ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec6:	783b      	ldrb	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 809d 	beq.w	800a008 <_svfiprintf_r+0x1b8>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed8:	9304      	str	r3, [sp, #16]
 8009eda:	9307      	str	r3, [sp, #28]
 8009edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ee2:	462f      	mov	r7, r5
 8009ee4:	2205      	movs	r2, #5
 8009ee6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009eea:	4850      	ldr	r0, [pc, #320]	; (800a02c <_svfiprintf_r+0x1dc>)
 8009eec:	f7f6 f980 	bl	80001f0 <memchr>
 8009ef0:	9b04      	ldr	r3, [sp, #16]
 8009ef2:	b9d0      	cbnz	r0, 8009f2a <_svfiprintf_r+0xda>
 8009ef4:	06d9      	lsls	r1, r3, #27
 8009ef6:	bf44      	itt	mi
 8009ef8:	2220      	movmi	r2, #32
 8009efa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009efe:	071a      	lsls	r2, r3, #28
 8009f00:	bf44      	itt	mi
 8009f02:	222b      	movmi	r2, #43	; 0x2b
 8009f04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f08:	782a      	ldrb	r2, [r5, #0]
 8009f0a:	2a2a      	cmp	r2, #42	; 0x2a
 8009f0c:	d015      	beq.n	8009f3a <_svfiprintf_r+0xea>
 8009f0e:	9a07      	ldr	r2, [sp, #28]
 8009f10:	462f      	mov	r7, r5
 8009f12:	2000      	movs	r0, #0
 8009f14:	250a      	movs	r5, #10
 8009f16:	4639      	mov	r1, r7
 8009f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f1c:	3b30      	subs	r3, #48	; 0x30
 8009f1e:	2b09      	cmp	r3, #9
 8009f20:	d94d      	bls.n	8009fbe <_svfiprintf_r+0x16e>
 8009f22:	b1b8      	cbz	r0, 8009f54 <_svfiprintf_r+0x104>
 8009f24:	e00f      	b.n	8009f46 <_svfiprintf_r+0xf6>
 8009f26:	462f      	mov	r7, r5
 8009f28:	e7b8      	b.n	8009e9c <_svfiprintf_r+0x4c>
 8009f2a:	4a40      	ldr	r2, [pc, #256]	; (800a02c <_svfiprintf_r+0x1dc>)
 8009f2c:	1a80      	subs	r0, r0, r2
 8009f2e:	fa0b f000 	lsl.w	r0, fp, r0
 8009f32:	4318      	orrs	r0, r3
 8009f34:	9004      	str	r0, [sp, #16]
 8009f36:	463d      	mov	r5, r7
 8009f38:	e7d3      	b.n	8009ee2 <_svfiprintf_r+0x92>
 8009f3a:	9a03      	ldr	r2, [sp, #12]
 8009f3c:	1d11      	adds	r1, r2, #4
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	9103      	str	r1, [sp, #12]
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	db01      	blt.n	8009f4a <_svfiprintf_r+0xfa>
 8009f46:	9207      	str	r2, [sp, #28]
 8009f48:	e004      	b.n	8009f54 <_svfiprintf_r+0x104>
 8009f4a:	4252      	negs	r2, r2
 8009f4c:	f043 0302 	orr.w	r3, r3, #2
 8009f50:	9207      	str	r2, [sp, #28]
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	783b      	ldrb	r3, [r7, #0]
 8009f56:	2b2e      	cmp	r3, #46	; 0x2e
 8009f58:	d10c      	bne.n	8009f74 <_svfiprintf_r+0x124>
 8009f5a:	787b      	ldrb	r3, [r7, #1]
 8009f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f5e:	d133      	bne.n	8009fc8 <_svfiprintf_r+0x178>
 8009f60:	9b03      	ldr	r3, [sp, #12]
 8009f62:	1d1a      	adds	r2, r3, #4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	9203      	str	r2, [sp, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bfb8      	it	lt
 8009f6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f70:	3702      	adds	r7, #2
 8009f72:	9305      	str	r3, [sp, #20]
 8009f74:	4d2e      	ldr	r5, [pc, #184]	; (800a030 <_svfiprintf_r+0x1e0>)
 8009f76:	7839      	ldrb	r1, [r7, #0]
 8009f78:	2203      	movs	r2, #3
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f7f6 f938 	bl	80001f0 <memchr>
 8009f80:	b138      	cbz	r0, 8009f92 <_svfiprintf_r+0x142>
 8009f82:	2340      	movs	r3, #64	; 0x40
 8009f84:	1b40      	subs	r0, r0, r5
 8009f86:	fa03 f000 	lsl.w	r0, r3, r0
 8009f8a:	9b04      	ldr	r3, [sp, #16]
 8009f8c:	4303      	orrs	r3, r0
 8009f8e:	3701      	adds	r7, #1
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	7839      	ldrb	r1, [r7, #0]
 8009f94:	4827      	ldr	r0, [pc, #156]	; (800a034 <_svfiprintf_r+0x1e4>)
 8009f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f9a:	2206      	movs	r2, #6
 8009f9c:	1c7e      	adds	r6, r7, #1
 8009f9e:	f7f6 f927 	bl	80001f0 <memchr>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d038      	beq.n	800a018 <_svfiprintf_r+0x1c8>
 8009fa6:	4b24      	ldr	r3, [pc, #144]	; (800a038 <_svfiprintf_r+0x1e8>)
 8009fa8:	bb13      	cbnz	r3, 8009ff0 <_svfiprintf_r+0x1a0>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	3307      	adds	r3, #7
 8009fae:	f023 0307 	bic.w	r3, r3, #7
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	9303      	str	r3, [sp, #12]
 8009fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb8:	444b      	add	r3, r9
 8009fba:	9309      	str	r3, [sp, #36]	; 0x24
 8009fbc:	e76d      	b.n	8009e9a <_svfiprintf_r+0x4a>
 8009fbe:	fb05 3202 	mla	r2, r5, r2, r3
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	460f      	mov	r7, r1
 8009fc6:	e7a6      	b.n	8009f16 <_svfiprintf_r+0xc6>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	3701      	adds	r7, #1
 8009fcc:	9305      	str	r3, [sp, #20]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	250a      	movs	r5, #10
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fd8:	3a30      	subs	r2, #48	; 0x30
 8009fda:	2a09      	cmp	r2, #9
 8009fdc:	d903      	bls.n	8009fe6 <_svfiprintf_r+0x196>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0c8      	beq.n	8009f74 <_svfiprintf_r+0x124>
 8009fe2:	9105      	str	r1, [sp, #20]
 8009fe4:	e7c6      	b.n	8009f74 <_svfiprintf_r+0x124>
 8009fe6:	fb05 2101 	mla	r1, r5, r1, r2
 8009fea:	2301      	movs	r3, #1
 8009fec:	4607      	mov	r7, r0
 8009fee:	e7f0      	b.n	8009fd2 <_svfiprintf_r+0x182>
 8009ff0:	ab03      	add	r3, sp, #12
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	4b11      	ldr	r3, [pc, #68]	; (800a03c <_svfiprintf_r+0x1ec>)
 8009ff8:	a904      	add	r1, sp, #16
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	f3af 8000 	nop.w
 800a000:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a004:	4681      	mov	r9, r0
 800a006:	d1d6      	bne.n	8009fb6 <_svfiprintf_r+0x166>
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	065b      	lsls	r3, r3, #25
 800a00c:	f53f af35 	bmi.w	8009e7a <_svfiprintf_r+0x2a>
 800a010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a012:	b01d      	add	sp, #116	; 0x74
 800a014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a018:	ab03      	add	r3, sp, #12
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	4622      	mov	r2, r4
 800a01e:	4b07      	ldr	r3, [pc, #28]	; (800a03c <_svfiprintf_r+0x1ec>)
 800a020:	a904      	add	r1, sp, #16
 800a022:	4640      	mov	r0, r8
 800a024:	f000 f882 	bl	800a12c <_printf_i>
 800a028:	e7ea      	b.n	800a000 <_svfiprintf_r+0x1b0>
 800a02a:	bf00      	nop
 800a02c:	0800a6ec 	.word	0x0800a6ec
 800a030:	0800a6f2 	.word	0x0800a6f2
 800a034:	0800a6f6 	.word	0x0800a6f6
 800a038:	00000000 	.word	0x00000000
 800a03c:	08009d9d 	.word	0x08009d9d

0800a040 <_printf_common>:
 800a040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	4691      	mov	r9, r2
 800a046:	461f      	mov	r7, r3
 800a048:	688a      	ldr	r2, [r1, #8]
 800a04a:	690b      	ldr	r3, [r1, #16]
 800a04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a050:	4293      	cmp	r3, r2
 800a052:	bfb8      	it	lt
 800a054:	4613      	movlt	r3, r2
 800a056:	f8c9 3000 	str.w	r3, [r9]
 800a05a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a05e:	4606      	mov	r6, r0
 800a060:	460c      	mov	r4, r1
 800a062:	b112      	cbz	r2, 800a06a <_printf_common+0x2a>
 800a064:	3301      	adds	r3, #1
 800a066:	f8c9 3000 	str.w	r3, [r9]
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	0699      	lsls	r1, r3, #26
 800a06e:	bf42      	ittt	mi
 800a070:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a074:	3302      	addmi	r3, #2
 800a076:	f8c9 3000 	strmi.w	r3, [r9]
 800a07a:	6825      	ldr	r5, [r4, #0]
 800a07c:	f015 0506 	ands.w	r5, r5, #6
 800a080:	d107      	bne.n	800a092 <_printf_common+0x52>
 800a082:	f104 0a19 	add.w	sl, r4, #25
 800a086:	68e3      	ldr	r3, [r4, #12]
 800a088:	f8d9 2000 	ldr.w	r2, [r9]
 800a08c:	1a9b      	subs	r3, r3, r2
 800a08e:	42ab      	cmp	r3, r5
 800a090:	dc28      	bgt.n	800a0e4 <_printf_common+0xa4>
 800a092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a096:	6822      	ldr	r2, [r4, #0]
 800a098:	3300      	adds	r3, #0
 800a09a:	bf18      	it	ne
 800a09c:	2301      	movne	r3, #1
 800a09e:	0692      	lsls	r2, r2, #26
 800a0a0:	d42d      	bmi.n	800a0fe <_printf_common+0xbe>
 800a0a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	47c0      	blx	r8
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d020      	beq.n	800a0f2 <_printf_common+0xb2>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	68e5      	ldr	r5, [r4, #12]
 800a0b4:	f8d9 2000 	ldr.w	r2, [r9]
 800a0b8:	f003 0306 	and.w	r3, r3, #6
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	bf08      	it	eq
 800a0c0:	1aad      	subeq	r5, r5, r2
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	6922      	ldr	r2, [r4, #16]
 800a0c6:	bf0c      	ite	eq
 800a0c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0cc:	2500      	movne	r5, #0
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	bfc4      	itt	gt
 800a0d2:	1a9b      	subgt	r3, r3, r2
 800a0d4:	18ed      	addgt	r5, r5, r3
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	341a      	adds	r4, #26
 800a0dc:	454d      	cmp	r5, r9
 800a0de:	d11a      	bne.n	800a116 <_printf_common+0xd6>
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e008      	b.n	800a0f6 <_printf_common+0xb6>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	47c0      	blx	r8
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	d103      	bne.n	800a0fa <_printf_common+0xba>
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fa:	3501      	adds	r5, #1
 800a0fc:	e7c3      	b.n	800a086 <_printf_common+0x46>
 800a0fe:	18e1      	adds	r1, r4, r3
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	2030      	movs	r0, #48	; 0x30
 800a104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a108:	4422      	add	r2, r4
 800a10a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a10e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a112:	3302      	adds	r3, #2
 800a114:	e7c5      	b.n	800a0a2 <_printf_common+0x62>
 800a116:	2301      	movs	r3, #1
 800a118:	4622      	mov	r2, r4
 800a11a:	4639      	mov	r1, r7
 800a11c:	4630      	mov	r0, r6
 800a11e:	47c0      	blx	r8
 800a120:	3001      	adds	r0, #1
 800a122:	d0e6      	beq.n	800a0f2 <_printf_common+0xb2>
 800a124:	f109 0901 	add.w	r9, r9, #1
 800a128:	e7d8      	b.n	800a0dc <_printf_common+0x9c>
	...

0800a12c <_printf_i>:
 800a12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a130:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a134:	460c      	mov	r4, r1
 800a136:	7e09      	ldrb	r1, [r1, #24]
 800a138:	b085      	sub	sp, #20
 800a13a:	296e      	cmp	r1, #110	; 0x6e
 800a13c:	4617      	mov	r7, r2
 800a13e:	4606      	mov	r6, r0
 800a140:	4698      	mov	r8, r3
 800a142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a144:	f000 80b3 	beq.w	800a2ae <_printf_i+0x182>
 800a148:	d822      	bhi.n	800a190 <_printf_i+0x64>
 800a14a:	2963      	cmp	r1, #99	; 0x63
 800a14c:	d036      	beq.n	800a1bc <_printf_i+0x90>
 800a14e:	d80a      	bhi.n	800a166 <_printf_i+0x3a>
 800a150:	2900      	cmp	r1, #0
 800a152:	f000 80b9 	beq.w	800a2c8 <_printf_i+0x19c>
 800a156:	2958      	cmp	r1, #88	; 0x58
 800a158:	f000 8083 	beq.w	800a262 <_printf_i+0x136>
 800a15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a160:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a164:	e032      	b.n	800a1cc <_printf_i+0xa0>
 800a166:	2964      	cmp	r1, #100	; 0x64
 800a168:	d001      	beq.n	800a16e <_printf_i+0x42>
 800a16a:	2969      	cmp	r1, #105	; 0x69
 800a16c:	d1f6      	bne.n	800a15c <_printf_i+0x30>
 800a16e:	6820      	ldr	r0, [r4, #0]
 800a170:	6813      	ldr	r3, [r2, #0]
 800a172:	0605      	lsls	r5, r0, #24
 800a174:	f103 0104 	add.w	r1, r3, #4
 800a178:	d52a      	bpl.n	800a1d0 <_printf_i+0xa4>
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6011      	str	r1, [r2, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	da03      	bge.n	800a18a <_printf_i+0x5e>
 800a182:	222d      	movs	r2, #45	; 0x2d
 800a184:	425b      	negs	r3, r3
 800a186:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a18a:	486f      	ldr	r0, [pc, #444]	; (800a348 <_printf_i+0x21c>)
 800a18c:	220a      	movs	r2, #10
 800a18e:	e039      	b.n	800a204 <_printf_i+0xd8>
 800a190:	2973      	cmp	r1, #115	; 0x73
 800a192:	f000 809d 	beq.w	800a2d0 <_printf_i+0x1a4>
 800a196:	d808      	bhi.n	800a1aa <_printf_i+0x7e>
 800a198:	296f      	cmp	r1, #111	; 0x6f
 800a19a:	d020      	beq.n	800a1de <_printf_i+0xb2>
 800a19c:	2970      	cmp	r1, #112	; 0x70
 800a19e:	d1dd      	bne.n	800a15c <_printf_i+0x30>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	f043 0320 	orr.w	r3, r3, #32
 800a1a6:	6023      	str	r3, [r4, #0]
 800a1a8:	e003      	b.n	800a1b2 <_printf_i+0x86>
 800a1aa:	2975      	cmp	r1, #117	; 0x75
 800a1ac:	d017      	beq.n	800a1de <_printf_i+0xb2>
 800a1ae:	2978      	cmp	r1, #120	; 0x78
 800a1b0:	d1d4      	bne.n	800a15c <_printf_i+0x30>
 800a1b2:	2378      	movs	r3, #120	; 0x78
 800a1b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1b8:	4864      	ldr	r0, [pc, #400]	; (800a34c <_printf_i+0x220>)
 800a1ba:	e055      	b.n	800a268 <_printf_i+0x13c>
 800a1bc:	6813      	ldr	r3, [r2, #0]
 800a1be:	1d19      	adds	r1, r3, #4
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6011      	str	r1, [r2, #0]
 800a1c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e08c      	b.n	800a2ea <_printf_i+0x1be>
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6011      	str	r1, [r2, #0]
 800a1d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1d8:	bf18      	it	ne
 800a1da:	b21b      	sxthne	r3, r3
 800a1dc:	e7cf      	b.n	800a17e <_printf_i+0x52>
 800a1de:	6813      	ldr	r3, [r2, #0]
 800a1e0:	6825      	ldr	r5, [r4, #0]
 800a1e2:	1d18      	adds	r0, r3, #4
 800a1e4:	6010      	str	r0, [r2, #0]
 800a1e6:	0628      	lsls	r0, r5, #24
 800a1e8:	d501      	bpl.n	800a1ee <_printf_i+0xc2>
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	e002      	b.n	800a1f4 <_printf_i+0xc8>
 800a1ee:	0668      	lsls	r0, r5, #25
 800a1f0:	d5fb      	bpl.n	800a1ea <_printf_i+0xbe>
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	4854      	ldr	r0, [pc, #336]	; (800a348 <_printf_i+0x21c>)
 800a1f6:	296f      	cmp	r1, #111	; 0x6f
 800a1f8:	bf14      	ite	ne
 800a1fa:	220a      	movne	r2, #10
 800a1fc:	2208      	moveq	r2, #8
 800a1fe:	2100      	movs	r1, #0
 800a200:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a204:	6865      	ldr	r5, [r4, #4]
 800a206:	60a5      	str	r5, [r4, #8]
 800a208:	2d00      	cmp	r5, #0
 800a20a:	f2c0 8095 	blt.w	800a338 <_printf_i+0x20c>
 800a20e:	6821      	ldr	r1, [r4, #0]
 800a210:	f021 0104 	bic.w	r1, r1, #4
 800a214:	6021      	str	r1, [r4, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d13d      	bne.n	800a296 <_printf_i+0x16a>
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	f040 808e 	bne.w	800a33c <_printf_i+0x210>
 800a220:	4665      	mov	r5, ip
 800a222:	2a08      	cmp	r2, #8
 800a224:	d10b      	bne.n	800a23e <_printf_i+0x112>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	07db      	lsls	r3, r3, #31
 800a22a:	d508      	bpl.n	800a23e <_printf_i+0x112>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	6862      	ldr	r2, [r4, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	bfde      	ittt	le
 800a234:	2330      	movle	r3, #48	; 0x30
 800a236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a23a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a23e:	ebac 0305 	sub.w	r3, ip, r5
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	f8cd 8000 	str.w	r8, [sp]
 800a248:	463b      	mov	r3, r7
 800a24a:	aa03      	add	r2, sp, #12
 800a24c:	4621      	mov	r1, r4
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff fef6 	bl	800a040 <_printf_common>
 800a254:	3001      	adds	r0, #1
 800a256:	d14d      	bne.n	800a2f4 <_printf_i+0x1c8>
 800a258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a25c:	b005      	add	sp, #20
 800a25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a262:	4839      	ldr	r0, [pc, #228]	; (800a348 <_printf_i+0x21c>)
 800a264:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a268:	6813      	ldr	r3, [r2, #0]
 800a26a:	6821      	ldr	r1, [r4, #0]
 800a26c:	1d1d      	adds	r5, r3, #4
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6015      	str	r5, [r2, #0]
 800a272:	060a      	lsls	r2, r1, #24
 800a274:	d50b      	bpl.n	800a28e <_printf_i+0x162>
 800a276:	07ca      	lsls	r2, r1, #31
 800a278:	bf44      	itt	mi
 800a27a:	f041 0120 	orrmi.w	r1, r1, #32
 800a27e:	6021      	strmi	r1, [r4, #0]
 800a280:	b91b      	cbnz	r3, 800a28a <_printf_i+0x15e>
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	f022 0220 	bic.w	r2, r2, #32
 800a288:	6022      	str	r2, [r4, #0]
 800a28a:	2210      	movs	r2, #16
 800a28c:	e7b7      	b.n	800a1fe <_printf_i+0xd2>
 800a28e:	064d      	lsls	r5, r1, #25
 800a290:	bf48      	it	mi
 800a292:	b29b      	uxthmi	r3, r3
 800a294:	e7ef      	b.n	800a276 <_printf_i+0x14a>
 800a296:	4665      	mov	r5, ip
 800a298:	fbb3 f1f2 	udiv	r1, r3, r2
 800a29c:	fb02 3311 	mls	r3, r2, r1, r3
 800a2a0:	5cc3      	ldrb	r3, [r0, r3]
 800a2a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	2900      	cmp	r1, #0
 800a2aa:	d1f5      	bne.n	800a298 <_printf_i+0x16c>
 800a2ac:	e7b9      	b.n	800a222 <_printf_i+0xf6>
 800a2ae:	6813      	ldr	r3, [r2, #0]
 800a2b0:	6825      	ldr	r5, [r4, #0]
 800a2b2:	6961      	ldr	r1, [r4, #20]
 800a2b4:	1d18      	adds	r0, r3, #4
 800a2b6:	6010      	str	r0, [r2, #0]
 800a2b8:	0628      	lsls	r0, r5, #24
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	d501      	bpl.n	800a2c2 <_printf_i+0x196>
 800a2be:	6019      	str	r1, [r3, #0]
 800a2c0:	e002      	b.n	800a2c8 <_printf_i+0x19c>
 800a2c2:	066a      	lsls	r2, r5, #25
 800a2c4:	d5fb      	bpl.n	800a2be <_printf_i+0x192>
 800a2c6:	8019      	strh	r1, [r3, #0]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	6123      	str	r3, [r4, #16]
 800a2cc:	4665      	mov	r5, ip
 800a2ce:	e7b9      	b.n	800a244 <_printf_i+0x118>
 800a2d0:	6813      	ldr	r3, [r2, #0]
 800a2d2:	1d19      	adds	r1, r3, #4
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	681d      	ldr	r5, [r3, #0]
 800a2d8:	6862      	ldr	r2, [r4, #4]
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f7f5 ff87 	bl	80001f0 <memchr>
 800a2e2:	b108      	cbz	r0, 800a2e8 <_printf_i+0x1bc>
 800a2e4:	1b40      	subs	r0, r0, r5
 800a2e6:	6060      	str	r0, [r4, #4]
 800a2e8:	6863      	ldr	r3, [r4, #4]
 800a2ea:	6123      	str	r3, [r4, #16]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f2:	e7a7      	b.n	800a244 <_printf_i+0x118>
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d0aa      	beq.n	800a258 <_printf_i+0x12c>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	079b      	lsls	r3, r3, #30
 800a306:	d413      	bmi.n	800a330 <_printf_i+0x204>
 800a308:	68e0      	ldr	r0, [r4, #12]
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	4298      	cmp	r0, r3
 800a30e:	bfb8      	it	lt
 800a310:	4618      	movlt	r0, r3
 800a312:	e7a3      	b.n	800a25c <_printf_i+0x130>
 800a314:	2301      	movs	r3, #1
 800a316:	464a      	mov	r2, r9
 800a318:	4639      	mov	r1, r7
 800a31a:	4630      	mov	r0, r6
 800a31c:	47c0      	blx	r8
 800a31e:	3001      	adds	r0, #1
 800a320:	d09a      	beq.n	800a258 <_printf_i+0x12c>
 800a322:	3501      	adds	r5, #1
 800a324:	68e3      	ldr	r3, [r4, #12]
 800a326:	9a03      	ldr	r2, [sp, #12]
 800a328:	1a9b      	subs	r3, r3, r2
 800a32a:	42ab      	cmp	r3, r5
 800a32c:	dcf2      	bgt.n	800a314 <_printf_i+0x1e8>
 800a32e:	e7eb      	b.n	800a308 <_printf_i+0x1dc>
 800a330:	2500      	movs	r5, #0
 800a332:	f104 0919 	add.w	r9, r4, #25
 800a336:	e7f5      	b.n	800a324 <_printf_i+0x1f8>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1ac      	bne.n	800a296 <_printf_i+0x16a>
 800a33c:	7803      	ldrb	r3, [r0, #0]
 800a33e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a342:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a346:	e76c      	b.n	800a222 <_printf_i+0xf6>
 800a348:	0800a6fd 	.word	0x0800a6fd
 800a34c:	0800a70e 	.word	0x0800a70e

0800a350 <memmove>:
 800a350:	4288      	cmp	r0, r1
 800a352:	b510      	push	{r4, lr}
 800a354:	eb01 0302 	add.w	r3, r1, r2
 800a358:	d807      	bhi.n	800a36a <memmove+0x1a>
 800a35a:	1e42      	subs	r2, r0, #1
 800a35c:	4299      	cmp	r1, r3
 800a35e:	d00a      	beq.n	800a376 <memmove+0x26>
 800a360:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a364:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a368:	e7f8      	b.n	800a35c <memmove+0xc>
 800a36a:	4283      	cmp	r3, r0
 800a36c:	d9f5      	bls.n	800a35a <memmove+0xa>
 800a36e:	1881      	adds	r1, r0, r2
 800a370:	1ad2      	subs	r2, r2, r3
 800a372:	42d3      	cmn	r3, r2
 800a374:	d100      	bne.n	800a378 <memmove+0x28>
 800a376:	bd10      	pop	{r4, pc}
 800a378:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a37c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a380:	e7f7      	b.n	800a372 <memmove+0x22>
	...

0800a384 <_free_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4605      	mov	r5, r0
 800a388:	2900      	cmp	r1, #0
 800a38a:	d045      	beq.n	800a418 <_free_r+0x94>
 800a38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a390:	1f0c      	subs	r4, r1, #4
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfb8      	it	lt
 800a396:	18e4      	addlt	r4, r4, r3
 800a398:	f000 f8d2 	bl	800a540 <__malloc_lock>
 800a39c:	4a1f      	ldr	r2, [pc, #124]	; (800a41c <_free_r+0x98>)
 800a39e:	6813      	ldr	r3, [r2, #0]
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	b933      	cbnz	r3, 800a3b2 <_free_r+0x2e>
 800a3a4:	6063      	str	r3, [r4, #4]
 800a3a6:	6014      	str	r4, [r2, #0]
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ae:	f000 b8c8 	b.w	800a542 <__malloc_unlock>
 800a3b2:	42a3      	cmp	r3, r4
 800a3b4:	d90c      	bls.n	800a3d0 <_free_r+0x4c>
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	1862      	adds	r2, r4, r1
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	bf04      	itt	eq
 800a3be:	681a      	ldreq	r2, [r3, #0]
 800a3c0:	685b      	ldreq	r3, [r3, #4]
 800a3c2:	6063      	str	r3, [r4, #4]
 800a3c4:	bf04      	itt	eq
 800a3c6:	1852      	addeq	r2, r2, r1
 800a3c8:	6022      	streq	r2, [r4, #0]
 800a3ca:	6004      	str	r4, [r0, #0]
 800a3cc:	e7ec      	b.n	800a3a8 <_free_r+0x24>
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	b10a      	cbz	r2, 800a3d8 <_free_r+0x54>
 800a3d4:	42a2      	cmp	r2, r4
 800a3d6:	d9fa      	bls.n	800a3ce <_free_r+0x4a>
 800a3d8:	6819      	ldr	r1, [r3, #0]
 800a3da:	1858      	adds	r0, r3, r1
 800a3dc:	42a0      	cmp	r0, r4
 800a3de:	d10b      	bne.n	800a3f8 <_free_r+0x74>
 800a3e0:	6820      	ldr	r0, [r4, #0]
 800a3e2:	4401      	add	r1, r0
 800a3e4:	1858      	adds	r0, r3, r1
 800a3e6:	4282      	cmp	r2, r0
 800a3e8:	6019      	str	r1, [r3, #0]
 800a3ea:	d1dd      	bne.n	800a3a8 <_free_r+0x24>
 800a3ec:	6810      	ldr	r0, [r2, #0]
 800a3ee:	6852      	ldr	r2, [r2, #4]
 800a3f0:	605a      	str	r2, [r3, #4]
 800a3f2:	4401      	add	r1, r0
 800a3f4:	6019      	str	r1, [r3, #0]
 800a3f6:	e7d7      	b.n	800a3a8 <_free_r+0x24>
 800a3f8:	d902      	bls.n	800a400 <_free_r+0x7c>
 800a3fa:	230c      	movs	r3, #12
 800a3fc:	602b      	str	r3, [r5, #0]
 800a3fe:	e7d3      	b.n	800a3a8 <_free_r+0x24>
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	1821      	adds	r1, r4, r0
 800a404:	428a      	cmp	r2, r1
 800a406:	bf04      	itt	eq
 800a408:	6811      	ldreq	r1, [r2, #0]
 800a40a:	6852      	ldreq	r2, [r2, #4]
 800a40c:	6062      	str	r2, [r4, #4]
 800a40e:	bf04      	itt	eq
 800a410:	1809      	addeq	r1, r1, r0
 800a412:	6021      	streq	r1, [r4, #0]
 800a414:	605c      	str	r4, [r3, #4]
 800a416:	e7c7      	b.n	800a3a8 <_free_r+0x24>
 800a418:	bd38      	pop	{r3, r4, r5, pc}
 800a41a:	bf00      	nop
 800a41c:	20012e2c 	.word	0x20012e2c

0800a420 <_malloc_r>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	1ccd      	adds	r5, r1, #3
 800a424:	f025 0503 	bic.w	r5, r5, #3
 800a428:	3508      	adds	r5, #8
 800a42a:	2d0c      	cmp	r5, #12
 800a42c:	bf38      	it	cc
 800a42e:	250c      	movcc	r5, #12
 800a430:	2d00      	cmp	r5, #0
 800a432:	4606      	mov	r6, r0
 800a434:	db01      	blt.n	800a43a <_malloc_r+0x1a>
 800a436:	42a9      	cmp	r1, r5
 800a438:	d903      	bls.n	800a442 <_malloc_r+0x22>
 800a43a:	230c      	movs	r3, #12
 800a43c:	6033      	str	r3, [r6, #0]
 800a43e:	2000      	movs	r0, #0
 800a440:	bd70      	pop	{r4, r5, r6, pc}
 800a442:	f000 f87d 	bl	800a540 <__malloc_lock>
 800a446:	4a21      	ldr	r2, [pc, #132]	; (800a4cc <_malloc_r+0xac>)
 800a448:	6814      	ldr	r4, [r2, #0]
 800a44a:	4621      	mov	r1, r4
 800a44c:	b991      	cbnz	r1, 800a474 <_malloc_r+0x54>
 800a44e:	4c20      	ldr	r4, [pc, #128]	; (800a4d0 <_malloc_r+0xb0>)
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	b91b      	cbnz	r3, 800a45c <_malloc_r+0x3c>
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f863 	bl	800a520 <_sbrk_r>
 800a45a:	6020      	str	r0, [r4, #0]
 800a45c:	4629      	mov	r1, r5
 800a45e:	4630      	mov	r0, r6
 800a460:	f000 f85e 	bl	800a520 <_sbrk_r>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d124      	bne.n	800a4b2 <_malloc_r+0x92>
 800a468:	230c      	movs	r3, #12
 800a46a:	6033      	str	r3, [r6, #0]
 800a46c:	4630      	mov	r0, r6
 800a46e:	f000 f868 	bl	800a542 <__malloc_unlock>
 800a472:	e7e4      	b.n	800a43e <_malloc_r+0x1e>
 800a474:	680b      	ldr	r3, [r1, #0]
 800a476:	1b5b      	subs	r3, r3, r5
 800a478:	d418      	bmi.n	800a4ac <_malloc_r+0x8c>
 800a47a:	2b0b      	cmp	r3, #11
 800a47c:	d90f      	bls.n	800a49e <_malloc_r+0x7e>
 800a47e:	600b      	str	r3, [r1, #0]
 800a480:	50cd      	str	r5, [r1, r3]
 800a482:	18cc      	adds	r4, r1, r3
 800a484:	4630      	mov	r0, r6
 800a486:	f000 f85c 	bl	800a542 <__malloc_unlock>
 800a48a:	f104 000b 	add.w	r0, r4, #11
 800a48e:	1d23      	adds	r3, r4, #4
 800a490:	f020 0007 	bic.w	r0, r0, #7
 800a494:	1ac3      	subs	r3, r0, r3
 800a496:	d0d3      	beq.n	800a440 <_malloc_r+0x20>
 800a498:	425a      	negs	r2, r3
 800a49a:	50e2      	str	r2, [r4, r3]
 800a49c:	e7d0      	b.n	800a440 <_malloc_r+0x20>
 800a49e:	428c      	cmp	r4, r1
 800a4a0:	684b      	ldr	r3, [r1, #4]
 800a4a2:	bf16      	itet	ne
 800a4a4:	6063      	strne	r3, [r4, #4]
 800a4a6:	6013      	streq	r3, [r2, #0]
 800a4a8:	460c      	movne	r4, r1
 800a4aa:	e7eb      	b.n	800a484 <_malloc_r+0x64>
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	6849      	ldr	r1, [r1, #4]
 800a4b0:	e7cc      	b.n	800a44c <_malloc_r+0x2c>
 800a4b2:	1cc4      	adds	r4, r0, #3
 800a4b4:	f024 0403 	bic.w	r4, r4, #3
 800a4b8:	42a0      	cmp	r0, r4
 800a4ba:	d005      	beq.n	800a4c8 <_malloc_r+0xa8>
 800a4bc:	1a21      	subs	r1, r4, r0
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f000 f82e 	bl	800a520 <_sbrk_r>
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d0cf      	beq.n	800a468 <_malloc_r+0x48>
 800a4c8:	6025      	str	r5, [r4, #0]
 800a4ca:	e7db      	b.n	800a484 <_malloc_r+0x64>
 800a4cc:	20012e2c 	.word	0x20012e2c
 800a4d0:	20012e30 	.word	0x20012e30

0800a4d4 <_realloc_r>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	4614      	mov	r4, r2
 800a4da:	460e      	mov	r6, r1
 800a4dc:	b921      	cbnz	r1, 800a4e8 <_realloc_r+0x14>
 800a4de:	4611      	mov	r1, r2
 800a4e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4e4:	f7ff bf9c 	b.w	800a420 <_malloc_r>
 800a4e8:	b922      	cbnz	r2, 800a4f4 <_realloc_r+0x20>
 800a4ea:	f7ff ff4b 	bl	800a384 <_free_r>
 800a4ee:	4625      	mov	r5, r4
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	f000 f826 	bl	800a544 <_malloc_usable_size_r>
 800a4f8:	42a0      	cmp	r0, r4
 800a4fa:	d20f      	bcs.n	800a51c <_realloc_r+0x48>
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4638      	mov	r0, r7
 800a500:	f7ff ff8e 	bl	800a420 <_malloc_r>
 800a504:	4605      	mov	r5, r0
 800a506:	2800      	cmp	r0, #0
 800a508:	d0f2      	beq.n	800a4f0 <_realloc_r+0x1c>
 800a50a:	4631      	mov	r1, r6
 800a50c:	4622      	mov	r2, r4
 800a50e:	f7ff fc11 	bl	8009d34 <memcpy>
 800a512:	4631      	mov	r1, r6
 800a514:	4638      	mov	r0, r7
 800a516:	f7ff ff35 	bl	800a384 <_free_r>
 800a51a:	e7e9      	b.n	800a4f0 <_realloc_r+0x1c>
 800a51c:	4635      	mov	r5, r6
 800a51e:	e7e7      	b.n	800a4f0 <_realloc_r+0x1c>

0800a520 <_sbrk_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4c06      	ldr	r4, [pc, #24]	; (800a53c <_sbrk_r+0x1c>)
 800a524:	2300      	movs	r3, #0
 800a526:	4605      	mov	r5, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	f7ff fb4c 	bl	8009bc8 <_sbrk>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_sbrk_r+0x1a>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	b103      	cbz	r3, 800a53a <_sbrk_r+0x1a>
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	200134e8 	.word	0x200134e8

0800a540 <__malloc_lock>:
 800a540:	4770      	bx	lr

0800a542 <__malloc_unlock>:
 800a542:	4770      	bx	lr

0800a544 <_malloc_usable_size_r>:
 800a544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a548:	1f18      	subs	r0, r3, #4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	bfbc      	itt	lt
 800a54e:	580b      	ldrlt	r3, [r1, r0]
 800a550:	18c0      	addlt	r0, r0, r3
 800a552:	4770      	bx	lr

0800a554 <_init>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	bf00      	nop
 800a558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55a:	bc08      	pop	{r3}
 800a55c:	469e      	mov	lr, r3
 800a55e:	4770      	bx	lr

0800a560 <_fini>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	bf00      	nop
 800a564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a566:	bc08      	pop	{r3}
 800a568:	469e      	mov	lr, r3
 800a56a:	4770      	bx	lr
