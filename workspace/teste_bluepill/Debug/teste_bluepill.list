
teste_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002604  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800274c  0800274c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800274c  0800274c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800274c  0800274c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002760  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002760  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdcf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c0a  00000000  00000000  0002ce04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000798  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0002f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c8f  00000000  00000000  0002f888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f4d  00000000  00000000  00044517  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d94c  00000000  00000000  0004b464  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e28  00000000  00000000  000b8e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026f8 	.word	0x080026f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026f8 	.word	0x080026f8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fd81 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f900 	bl	800236c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fd99 	bl	8000cce <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 fd61 	bl	8000c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ed      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f002 f8ac 	bl	80023d0 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c5      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09f      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	431a      	orrs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	431a      	orrs	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	ea42 0103 	orr.w	r1, r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2b01      	cmp	r3, #1
 800045c:	d12e      	bne.n	80004bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2202      	movs	r2, #2
 8000462:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f022 0201 	bic.w	r2, r2, #1
 8000474:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000476:	f7ff fec1 	bl	80001fc <HAL_GetTick>
 800047a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800047c:	e012      	b.n	80004a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800047e:	f7ff febd 	bl	80001fc <HAL_GetTick>
 8000482:	4602      	mov	r2, r0
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	2b0a      	cmp	r3, #10
 800048a:	d90b      	bls.n	80004a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2205      	movs	r2, #5
 800049c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80004a0:	2301      	movs	r3, #1
 80004a2:	e012      	b.n	80004ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1e5      	bne.n	800047e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80004b8:	2300      	movs	r3, #0
 80004ba:	e006      	b.n	80004ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80004c8:	2301      	movs	r3, #1
  }
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b089      	sub	sp, #36	; 0x24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80004f0:	7ffb      	ldrb	r3, [r7, #31]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d003      	beq.n	80004fe <HAL_CAN_AddTxMessage+0x2c>
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	f040 80b8 	bne.w	800066e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000504:	2b00      	cmp	r3, #0
 8000506:	d10a      	bne.n	800051e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800050e:	2b00      	cmp	r3, #0
 8000510:	d105      	bne.n	800051e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000518:	2b00      	cmp	r3, #0
 800051a:	f000 80a0 	beq.w	800065e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	0e1b      	lsrs	r3, r3, #24
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d907      	bls.n	800053e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000532:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e09e      	b.n	800067c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800053e:	2201      	movs	r2, #1
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	409a      	lsls	r2, r3
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10d      	bne.n	800056c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800055a:	68f9      	ldr	r1, [r7, #12]
 800055c:	6809      	ldr	r1, [r1, #0]
 800055e:	431a      	orrs	r2, r3
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	3318      	adds	r3, #24
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	440b      	add	r3, r1
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	e00f      	b.n	800058c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000576:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800057c:	68f9      	ldr	r1, [r7, #12]
 800057e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000580:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3318      	adds	r3, #24
 8000586:	011b      	lsls	r3, r3, #4
 8000588:	440b      	add	r3, r1
 800058a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	6819      	ldr	r1, [r3, #0]
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	691a      	ldr	r2, [r3, #16]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	3318      	adds	r3, #24
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	440b      	add	r3, r1
 800059c:	3304      	adds	r3, #4
 800059e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	7d1b      	ldrb	r3, [r3, #20]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d111      	bne.n	80005cc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	3318      	adds	r3, #24
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	4413      	add	r3, r2
 80005b4:	3304      	adds	r3, #4
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	6811      	ldr	r1, [r2, #0]
 80005bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3318      	adds	r3, #24
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	440b      	add	r3, r1
 80005c8:	3304      	adds	r3, #4
 80005ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3307      	adds	r3, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	061a      	lsls	r2, r3, #24
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3306      	adds	r3, #6
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	041b      	lsls	r3, r3, #16
 80005dc:	431a      	orrs	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3305      	adds	r3, #5
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	3204      	adds	r2, #4
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	4610      	mov	r0, r2
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	6811      	ldr	r1, [r2, #0]
 80005f4:	ea43 0200 	orr.w	r2, r3, r0
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	440b      	add	r3, r1
 80005fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000602:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3303      	adds	r3, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	061a      	lsls	r2, r3, #24
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3302      	adds	r3, #2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	041b      	lsls	r3, r3, #16
 8000614:	431a      	orrs	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	4313      	orrs	r3, r2
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	4610      	mov	r0, r2
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	6811      	ldr	r1, [r2, #0]
 800062a:	ea43 0200 	orr.w	r2, r3, r0
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	440b      	add	r3, r1
 8000634:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000638:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3318      	adds	r3, #24
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	4413      	add	r3, r2
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	6811      	ldr	r1, [r2, #0]
 800064c:	f043 0201 	orr.w	r2, r3, #1
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3318      	adds	r3, #24
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	440b      	add	r3, r1
 8000658:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e00e      	b.n	800067c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000662:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e006      	b.n	800067c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000672:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
  }
}
 800067c:	4618      	mov	r0, r3
 800067e:	3724      	adds	r7, #36	; 0x24
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b08a      	sub	sp, #40	; 0x28
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d07c      	beq.n	80007c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d023      	beq.n	800071e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2201      	movs	r2, #1
 80006dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d003      	beq.n	80006f0 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f97d 	bl	80009e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80006ee:	e016      	b.n	800071e <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
 8000702:	e00c      	b.n	800071e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	f003 0308 	and.w	r3, r3, #8
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
 8000716:	e002      	b.n	800071e <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f980 	bl	8000a1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000724:	2b00      	cmp	r3, #0
 8000726:	d024      	beq.n	8000772 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f95c 	bl	80009fa <HAL_CAN_TxMailbox1CompleteCallback>
 8000742:	e016      	b.n	8000772 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800074a:	2b00      	cmp	r3, #0
 800074c:	d004      	beq.n	8000758 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
 8000756:	e00c      	b.n	8000772 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800075e:	2b00      	cmp	r3, #0
 8000760:	d004      	beq.n	800076c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
 800076a:	e002      	b.n	8000772 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f95f 	bl	8000a30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000778:	2b00      	cmp	r3, #0
 800077a:	d024      	beq.n	80007c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000784:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f93b 	bl	8000a0c <HAL_CAN_TxMailbox2CompleteCallback>
 8000796:	e016      	b.n	80007c6 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
 80007aa:	e00c      	b.n	80007c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	e002      	b.n	80007c6 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f93e 	bl	8000a42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00c      	beq.n	80007ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d007      	beq.n	80007ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2210      	movs	r2, #16
 80007e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00b      	beq.n	800080c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d006      	beq.n	800080c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2208      	movs	r2, #8
 8000804:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 f92d 	bl	8000a66 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	2b00      	cmp	r3, #0
 8000814:	d009      	beq.n	800082a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f915 	bl	8000a54 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800082a:	6a3b      	ldr	r3, [r7, #32]
 800082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00c      	beq.n	800084e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	2b00      	cmp	r3, #0
 800083c:	d007      	beq.n	800084e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000844:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2210      	movs	r2, #16
 800084c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	f003 0320 	and.w	r3, r3, #32
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00b      	beq.n	8000870 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	2b00      	cmp	r3, #0
 8000860:	d006      	beq.n	8000870 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2208      	movs	r2, #8
 8000868:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f90d 	bl	8000a8a <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000870:	6a3b      	ldr	r3, [r7, #32]
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	2b00      	cmp	r3, #0
 8000878:	d009      	beq.n	800088e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f8f5 	bl	8000a78 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d006      	beq.n	80008b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2210      	movs	r2, #16
 80008a8:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 f8f6 	bl	8000a9c <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00b      	beq.n	80008d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d006      	beq.n	80008d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2208      	movs	r2, #8
 80008ca:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 f8ee 	bl	8000aae <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80008d2:	6a3b      	ldr	r3, [r7, #32]
 80008d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d075      	beq.n	80009c8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d06c      	beq.n	80009c0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d008      	beq.n	8000902 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d003      	beq.n	8000902 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000940:	2b00      	cmp	r3, #0
 8000942:	d03d      	beq.n	80009c0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800094a:	2b00      	cmp	r3, #0
 800094c:	d038      	beq.n	80009c0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000954:	2b30      	cmp	r3, #48	; 0x30
 8000956:	d017      	beq.n	8000988 <HAL_CAN_IRQHandler+0x302>
 8000958:	2b30      	cmp	r3, #48	; 0x30
 800095a:	d804      	bhi.n	8000966 <HAL_CAN_IRQHandler+0x2e0>
 800095c:	2b10      	cmp	r3, #16
 800095e:	d009      	beq.n	8000974 <HAL_CAN_IRQHandler+0x2ee>
 8000960:	2b20      	cmp	r3, #32
 8000962:	d00c      	beq.n	800097e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000964:	e024      	b.n	80009b0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000966:	2b50      	cmp	r3, #80	; 0x50
 8000968:	d018      	beq.n	800099c <HAL_CAN_IRQHandler+0x316>
 800096a:	2b60      	cmp	r3, #96	; 0x60
 800096c:	d01b      	beq.n	80009a6 <HAL_CAN_IRQHandler+0x320>
 800096e:	2b40      	cmp	r3, #64	; 0x40
 8000970:	d00f      	beq.n	8000992 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000972:	e01d      	b.n	80009b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800097c:	e018      	b.n	80009b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000986:	e013      	b.n	80009b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000990:	e00e      	b.n	80009b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800099a:	e009      	b.n	80009b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80009a4:	e004      	b.n	80009b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80009ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2204      	movs	r2, #4
 80009c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d008      	beq.n	80009e0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	431a      	orrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f870 	bl	8000ac0 <HAL_CAN_ErrorCallback>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
	...

08000ad4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4906      	ldr	r1, [pc, #24]	; (8000b64 <NVIC_EnableIRQ+0x2c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da0b      	bge.n	8000b94 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <NVIC_SetPriority+0x4c>)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	3b04      	subs	r3, #4
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b92:	e009      	b.n	8000ba8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <NVIC_SetPriority+0x50>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	f7ff ff90 	bl	8000b68 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff31 	bl	8000ad4 <NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8c:	f7ff ff46 	bl	8000b1c <NVIC_GetPriorityGrouping>
 8000c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff ff90 	bl	8000bbc <NVIC_EncodePriority>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff5f 	bl	8000b68 <NVIC_SetPriority>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff39 	bl	8000b38 <NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffa2 	bl	8000c20 <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d005      	beq.n	8000d0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2204      	movs	r2, #4
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e051      	b.n	8000dae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 020e 	bic.w	r2, r2, #14
 8000d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0201 	bic.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_DMA_Abort_IT+0xd0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d029      	beq.n	8000d88 <HAL_DMA_Abort_IT+0xa0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <HAL_DMA_Abort_IT+0xd4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d022      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x9c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_DMA_Abort_IT+0xd8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d01a      	beq.n	8000d7e <HAL_DMA_Abort_IT+0x96>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_DMA_Abort_IT+0xdc>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d012      	beq.n	8000d78 <HAL_DMA_Abort_IT+0x90>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <HAL_DMA_Abort_IT+0xe0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00a      	beq.n	8000d72 <HAL_DMA_Abort_IT+0x8a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_DMA_Abort_IT+0xe4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d102      	bne.n	8000d6c <HAL_DMA_Abort_IT+0x84>
 8000d66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d6a:	e00e      	b.n	8000d8a <HAL_DMA_Abort_IT+0xa2>
 8000d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d70:	e00b      	b.n	8000d8a <HAL_DMA_Abort_IT+0xa2>
 8000d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d76:	e008      	b.n	8000d8a <HAL_DMA_Abort_IT+0xa2>
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	e005      	b.n	8000d8a <HAL_DMA_Abort_IT+0xa2>
 8000d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d82:	e002      	b.n	8000d8a <HAL_DMA_Abort_IT+0xa2>
 8000d84:	2310      	movs	r3, #16
 8000d86:	e000      	b.n	8000d8a <HAL_DMA_Abort_IT+0xa2>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_DMA_Abort_IT+0xe8>)
 8000d8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	4798      	blx	r3
    } 
  }
  return status;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40020008 	.word	0x40020008
 8000dbc:	4002001c 	.word	0x4002001c
 8000dc0:	40020030 	.word	0x40020030
 8000dc4:	40020044 	.word	0x40020044
 8000dc8:	40020058 	.word	0x40020058
 8000dcc:	4002006c 	.word	0x4002006c
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	e127      	b.n	8001048 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8116 	bne.w	8001042 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b12      	cmp	r3, #18
 8000e1c:	d034      	beq.n	8000e88 <HAL_GPIO_Init+0xb4>
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d80d      	bhi.n	8000e3e <HAL_GPIO_Init+0x6a>
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d02b      	beq.n	8000e7e <HAL_GPIO_Init+0xaa>
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d804      	bhi.n	8000e34 <HAL_GPIO_Init+0x60>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d031      	beq.n	8000e92 <HAL_GPIO_Init+0xbe>
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d01c      	beq.n	8000e6c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e32:	e048      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d043      	beq.n	8000ec0 <HAL_GPIO_Init+0xec>
 8000e38:	2b11      	cmp	r3, #17
 8000e3a:	d01b      	beq.n	8000e74 <HAL_GPIO_Init+0xa0>
          break;
 8000e3c:	e043      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e3e:	4a87      	ldr	r2, [pc, #540]	; (800105c <HAL_GPIO_Init+0x288>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d026      	beq.n	8000e92 <HAL_GPIO_Init+0xbe>
 8000e44:	4a85      	ldr	r2, [pc, #532]	; (800105c <HAL_GPIO_Init+0x288>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d806      	bhi.n	8000e58 <HAL_GPIO_Init+0x84>
 8000e4a:	4a85      	ldr	r2, [pc, #532]	; (8001060 <HAL_GPIO_Init+0x28c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d020      	beq.n	8000e92 <HAL_GPIO_Init+0xbe>
 8000e50:	4a84      	ldr	r2, [pc, #528]	; (8001064 <HAL_GPIO_Init+0x290>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01d      	beq.n	8000e92 <HAL_GPIO_Init+0xbe>
          break;
 8000e56:	e036      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e58:	4a83      	ldr	r2, [pc, #524]	; (8001068 <HAL_GPIO_Init+0x294>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d019      	beq.n	8000e92 <HAL_GPIO_Init+0xbe>
 8000e5e:	4a83      	ldr	r2, [pc, #524]	; (800106c <HAL_GPIO_Init+0x298>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d016      	beq.n	8000e92 <HAL_GPIO_Init+0xbe>
 8000e64:	4a82      	ldr	r2, [pc, #520]	; (8001070 <HAL_GPIO_Init+0x29c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d013      	beq.n	8000e92 <HAL_GPIO_Init+0xbe>
          break;
 8000e6a:	e02c      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e028      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e023      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	3308      	adds	r3, #8
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e01e      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e019      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e012      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d105      	bne.n	8000eb4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69fa      	ldr	r2, [r7, #28]
 8000eb0:	611a      	str	r2, [r3, #16]
          break;
 8000eb2:	e008      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	615a      	str	r2, [r3, #20]
          break;
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
          break;
 8000ec4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2bff      	cmp	r3, #255	; 0xff
 8000eca:	d801      	bhi.n	8000ed0 <HAL_GPIO_Init+0xfc>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	e001      	b.n	8000ed4 <HAL_GPIO_Init+0x100>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2bff      	cmp	r3, #255	; 0xff
 8000eda:	d802      	bhi.n	8000ee2 <HAL_GPIO_Init+0x10e>
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x114>
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	3b08      	subs	r3, #8
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	210f      	movs	r1, #15
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	401a      	ands	r2, r3
 8000efa:	6a39      	ldr	r1, [r7, #32]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	431a      	orrs	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 8096 	beq.w	8001042 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f16:	4b57      	ldr	r3, [pc, #348]	; (8001074 <HAL_GPIO_Init+0x2a0>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a56      	ldr	r2, [pc, #344]	; (8001074 <HAL_GPIO_Init+0x2a0>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <HAL_GPIO_Init+0x2a0>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000f2e:	4a52      	ldr	r2, [pc, #328]	; (8001078 <HAL_GPIO_Init+0x2a4>)
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a49      	ldr	r2, [pc, #292]	; (800107c <HAL_GPIO_Init+0x2a8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x1ae>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a48      	ldr	r2, [pc, #288]	; (8001080 <HAL_GPIO_Init+0x2ac>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x1aa>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a47      	ldr	r2, [pc, #284]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x1a6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a46      	ldr	r2, [pc, #280]	; (8001088 <HAL_GPIO_Init+0x2b4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x1a2>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x1b0>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x1b0>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x1b0>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x1b0>
 8000f82:	2300      	movs	r3, #0
 8000f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000f94:	4938      	ldr	r1, [pc, #224]	; (8001078 <HAL_GPIO_Init+0x2a4>)
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fae:	4b37      	ldr	r3, [pc, #220]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4936      	ldr	r1, [pc, #216]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4931      	ldr	r1, [pc, #196]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	492c      	ldr	r1, [pc, #176]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	604b      	str	r3, [r1, #4]
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4927      	ldr	r1, [pc, #156]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	4922      	ldr	r1, [pc, #136]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	608b      	str	r3, [r1, #8]
 800100a:	e006      	b.n	800101a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_GPIO_Init+0x2b8>)
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	43db      	mvns	r3, r3
 8001014:	491d      	ldr	r1, [pc, #116]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8001016:	4013      	ands	r3, r2
 8001018:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	4918      	ldr	r1, [pc, #96]	; (800108c <HAL_GPIO_Init+0x2b8>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	60cb      	str	r3, [r1, #12]
 8001032:	e006      	b.n	8001042 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	43db      	mvns	r3, r3
 800103c:	4913      	ldr	r1, [pc, #76]	; (800108c <HAL_GPIO_Init+0x2b8>)
 800103e:	4013      	ands	r3, r2
 8001040:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3301      	adds	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f aed4 	bls.w	8000df8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	372c      	adds	r7, #44	; 0x2c
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	10210000 	.word	0x10210000
 8001060:	10110000 	.word	0x10110000
 8001064:	10120000 	.word	0x10120000
 8001068:	10310000 	.word	0x10310000
 800106c:	10320000 	.word	0x10320000
 8001070:	10220000 	.word	0x10220000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	611a      	str	r2, [r3, #16]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8087 	beq.w	80011e8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010da:	4b92      	ldr	r3, [pc, #584]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d00c      	beq.n	8001100 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010e6:	4b8f      	ldr	r3, [pc, #572]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d112      	bne.n	8001118 <HAL_RCC_OscConfig+0x58>
 80010f2:	4b8c      	ldr	r3, [pc, #560]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fe:	d10b      	bne.n	8001118 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d06c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x126>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d168      	bne.n	80011e6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e22d      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d106      	bne.n	8001130 <HAL_RCC_OscConfig+0x70>
 8001122:	4b80      	ldr	r3, [pc, #512]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a7f      	ldr	r2, [pc, #508]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e02e      	b.n	800118e <HAL_RCC_OscConfig+0xce>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10c      	bne.n	8001152 <HAL_RCC_OscConfig+0x92>
 8001138:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a79      	ldr	r2, [pc, #484]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b77      	ldr	r3, [pc, #476]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a76      	ldr	r2, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e01d      	b.n	800118e <HAL_RCC_OscConfig+0xce>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0xb6>
 800115c:	4b71      	ldr	r3, [pc, #452]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a70      	ldr	r2, [pc, #448]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b6e      	ldr	r3, [pc, #440]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6d      	ldr	r2, [pc, #436]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e00b      	b.n	800118e <HAL_RCC_OscConfig+0xce>
 8001176:	4b6b      	ldr	r3, [pc, #428]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6a      	ldr	r2, [pc, #424]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800117c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b68      	ldr	r3, [pc, #416]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a67      	ldr	r2, [pc, #412]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d013      	beq.n	80011be <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff f831 	bl	80001fc <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119e:	f7ff f82d 	bl	80001fc <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b64      	cmp	r3, #100	; 0x64
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1e1      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b0:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0xde>
 80011bc:	e014      	b.n	80011e8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff f81d 	bl	80001fc <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c6:	f7ff f819 	bl	80001fc <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b64      	cmp	r3, #100	; 0x64
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e1cd      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d8:	4b52      	ldr	r3, [pc, #328]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x106>
 80011e4:	e000      	b.n	80011e8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d063      	beq.n	80012bc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001200:	4b48      	ldr	r3, [pc, #288]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b08      	cmp	r3, #8
 800120a:	d11c      	bne.n	8001246 <HAL_RCC_OscConfig+0x186>
 800120c:	4b45      	ldr	r3, [pc, #276]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d116      	bne.n	8001246 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001218:	4b42      	ldr	r3, [pc, #264]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_OscConfig+0x170>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d001      	beq.n	8001230 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e1a1      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4939      	ldr	r1, [pc, #228]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001244:	e03a      	b.n	80012bc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d020      	beq.n	8001290 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <HAL_RCC_OscConfig+0x268>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7fe ffd2 	bl	80001fc <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7fe ffce 	bl	80001fc <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e182      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4926      	ldr	r1, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
 800128e:	e015      	b.n	80012bc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <HAL_RCC_OscConfig+0x268>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7fe ffb1 	bl	80001fc <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7fe ffad 	bl	80001fc <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e161      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d039      	beq.n	800133c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d019      	beq.n	8001304 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_RCC_OscConfig+0x26c>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7fe ff91 	bl	80001fc <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012de:	f7fe ff8d 	bl	80001fc <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e141      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_RCC_OscConfig+0x264>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f000 fae3 	bl	80018c8 <RCC_Delay>
 8001302:	e01b      	b.n	800133c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_RCC_OscConfig+0x26c>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7fe ff77 	bl	80001fc <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	e00e      	b.n	8001330 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001312:	f7fe ff73 	bl	80001fc <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d907      	bls.n	8001330 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e127      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
 8001324:	40021000 	.word	0x40021000
 8001328:	42420000 	.word	0x42420000
 800132c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b92      	ldr	r3, [pc, #584]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ea      	bne.n	8001312 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a6 	beq.w	8001496 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10d      	bne.n	8001376 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a87      	ldr	r2, [pc, #540]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001372:	2301      	movs	r3, #1
 8001374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	4b82      	ldr	r3, [pc, #520]	; (8001580 <HAL_RCC_OscConfig+0x4c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137e:	2b00      	cmp	r3, #0
 8001380:	d118      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001382:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x4c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7e      	ldr	r2, [pc, #504]	; (8001580 <HAL_RCC_OscConfig+0x4c0>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138e:	f7fe ff35 	bl	80001fc <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001396:	f7fe ff31 	bl	80001fc <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0e5      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x4c0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x30a>
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a6e      	ldr	r2, [pc, #440]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	e02d      	b.n	8001426 <HAL_RCC_OscConfig+0x366>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x32c>
 80013d2:	4b6a      	ldr	r3, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a69      	ldr	r2, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a66      	ldr	r2, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	6213      	str	r3, [r2, #32]
 80013ea:	e01c      	b.n	8001426 <HAL_RCC_OscConfig+0x366>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d10c      	bne.n	800140e <HAL_RCC_OscConfig+0x34e>
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4a60      	ldr	r2, [pc, #384]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6213      	str	r3, [r2, #32]
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6213      	str	r3, [r2, #32]
 800140c:	e00b      	b.n	8001426 <HAL_RCC_OscConfig+0x366>
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a5a      	ldr	r2, [pc, #360]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6213      	str	r3, [r2, #32]
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001420:	f023 0304 	bic.w	r3, r3, #4
 8001424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d015      	beq.n	800145a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7fe fee5 	bl	80001fc <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7fe fee1 	bl	80001fc <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e093      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0ee      	beq.n	8001436 <HAL_RCC_OscConfig+0x376>
 8001458:	e014      	b.n	8001484 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7fe fecf 	bl	80001fc <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7fe fecb 	bl	80001fc <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e07d      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ee      	bne.n	8001462 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d105      	bne.n	8001496 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148a:	4b3c      	ldr	r3, [pc, #240]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a3b      	ldr	r2, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d069      	beq.n	8001572 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d061      	beq.n	800156e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d146      	bne.n	8001540 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7fe fea0 	bl	80001fc <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c0:	f7fe fe9c 	bl	80001fc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e050      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e6:	d108      	bne.n	80014fa <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4921      	ldr	r1, [pc, #132]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a19      	ldr	r1, [r3, #32]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	430b      	orrs	r3, r1
 800150c:	491b      	ldr	r1, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7fe fe70 	bl	80001fc <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001520:	f7fe fe6c 	bl	80001fc <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e020      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x460>
 800153e:	e018      	b.n	8001572 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7fe fe59 	bl	80001fc <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154e:	f7fe fe55 	bl	80001fc <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e009      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_RCC_OscConfig+0x4bc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x48e>
 800156c:	e001      	b.n	8001572 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40007000 	.word	0x40007000
 8001584:	42420060 	.word	0x42420060

08001588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001596:	4b7e      	ldr	r3, [pc, #504]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d910      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a4:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 0207 	bic.w	r2, r3, #7
 80015ac:	4978      	ldr	r1, [pc, #480]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b4:	4b76      	ldr	r3, [pc, #472]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0e0      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d020      	beq.n	8001614 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015de:	4b6d      	ldr	r3, [pc, #436]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a6c      	ldr	r2, [pc, #432]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 80015e4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015e8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a66      	ldr	r2, [pc, #408]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 80015fc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001600:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001602:	4b64      	ldr	r3, [pc, #400]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4961      	ldr	r1, [pc, #388]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d06a      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d107      	bne.n	8001638 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001628:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d115      	bne.n	8001660 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0a7      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d107      	bne.n	8001650 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	4b54      	ldr	r3, [pc, #336]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e09b      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e093      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001660:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 0203 	bic.w	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4949      	ldr	r1, [pc, #292]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001672:	f7fe fdc3 	bl	80001fc <HAL_GetTick>
 8001676:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d112      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001682:	f7fe fdbb 	bl	80001fc <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e077      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001698:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d1ee      	bne.n	8001682 <HAL_RCC_ClockConfig+0xfa>
 80016a4:	e027      	b.n	80016f6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d11d      	bne.n	80016ea <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7fe fda4 	bl	80001fc <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e060      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d1ee      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x128>
 80016d2:	e010      	b.n	80016f6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7fe fd92 	bl	80001fc <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e04e      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d210      	bcs.n	8001726 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 0207 	bic.w	r2, r3, #7
 800170c:	4920      	ldr	r1, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_RCC_ClockConfig+0x208>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d001      	beq.n	8001726 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e030      	b.n	8001788 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	4915      	ldr	r1, [pc, #84]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001764:	f000 f81c 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 8001768:	4601      	mov	r1, r0
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_RCC_ClockConfig+0x20c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_RCC_ClockConfig+0x210>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	fa21 f303 	lsr.w	r3, r1, r3
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_RCC_ClockConfig+0x214>)
 800177e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001780:	2000      	movs	r0, #0
 8001782:	f7fe fcf9 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40022000 	.word	0x40022000
 8001794:	40021000 	.word	0x40021000
 8001798:	08002734 	.word	0x08002734
 800179c:	20000008 	.word	0x20000008

080017a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a0:	b490      	push	{r4, r7}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017a8:	1d3c      	adds	r4, r7, #4
 80017aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x40>
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x46>
 80017de:	e02d      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_RCC_GetSysClockFreq+0xbc>)
 80017e2:	623b      	str	r3, [r7, #32]
      break;
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017f2:	4413      	add	r3, r2
 80017f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c5b      	lsrs	r3, r3, #17
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001812:	4413      	add	r3, r2
 8001814:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001818:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <HAL_RCC_GetSysClockFreq+0xbc>)
 800181e:	fb02 f203 	mul.w	r2, r2, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
 800182a:	e004      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	623b      	str	r3, [r7, #32]
      break;
 800183a:	e002      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_RCC_GetSysClockFreq+0xbc>)
 800183e:	623b      	str	r3, [r7, #32]
      break;
 8001840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001842:	6a3b      	ldr	r3, [r7, #32]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bc90      	pop	{r4, r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	08002710 	.word	0x08002710
 8001854:	08002720 	.word	0x08002720
 8001858:	40021000 	.word	0x40021000
 800185c:	007a1200 	.word	0x007a1200
 8001860:	003d0900 	.word	0x003d0900

08001864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <HAL_RCC_GetHCLKFreq+0x10>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000008 	.word	0x20000008

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff2 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 8001880:	4601      	mov	r1, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	08002744 	.word	0x08002744

080018a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a4:	f7ff ffde 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 80018a8:	4601      	mov	r1, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0adb      	lsrs	r3, r3, #11
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08002744 	.word	0x08002744

080018c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <RCC_Delay+0x34>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <RCC_Delay+0x38>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0a5b      	lsrs	r3, r3, #9
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80018e4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <RCC_Delay+0x1c>
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e03f      	b.n	8001996 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fd9c 	bl	8002468 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2224      	movs	r2, #36	; 0x24
 8001934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001946:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fa5f 	bl	8001e0c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800195c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800196c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800197c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_UART_IRQHandler+0x52>
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f98d 	bl	8001d0a <UART_Receive_IT>
      return;
 80019f0:	e0cc      	b.n	8001b8c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80ab 	beq.w	8001b50 <HAL_UART_IRQHandler+0x1b0>
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_UART_IRQHandler+0x70>
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a0 	beq.w	8001b50 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_UART_IRQHandler+0x90>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <HAL_UART_IRQHandler+0xb0>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	f043 0202 	orr.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_UART_IRQHandler+0xd0>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	f043 0204 	orr.w	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <HAL_UART_IRQHandler+0xf0>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	f043 0208 	orr.w	r2, r3, #8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d078      	beq.n	8001b8a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_UART_IRQHandler+0x112>
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f92c 	bl	8001d0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <HAL_UART_IRQHandler+0x13a>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d031      	beq.n	8001b3e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f877 	bl	8001bce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d023      	beq.n	8001b36 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d013      	beq.n	8001b2e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_UART_IRQHandler+0x1f4>)
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f8e8 	bl	8000ce8 <HAL_DMA_Abort_IT>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d016      	beq.n	8001b4c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b2c:	e00e      	b.n	8001b4c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f844 	bl	8001bbc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b34:	e00a      	b.n	8001b4c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f840 	bl	8001bbc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b3c:	e006      	b.n	8001b4c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f83c 	bl	8001bbc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001b4a:	e01e      	b.n	8001b8a <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b4c:	bf00      	nop
    return;
 8001b4e:	e01c      	b.n	8001b8a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_UART_IRQHandler+0x1cc>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f863 	bl	8001c30 <UART_Transmit_IT>
    return;
 8001b6a:	e00f      	b.n	8001b8c <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <HAL_UART_IRQHandler+0x1ec>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8aa 	bl	8001cda <UART_EndTransmit_IT>
    return;
 8001b86:	bf00      	nop
 8001b88:	e000      	b.n	8001b8c <HAL_UART_IRQHandler+0x1ec>
    return;
 8001b8a:	bf00      	nop
  }
}
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	08001c09 	.word	0x08001c09

08001b98 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001be4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff ffca 	bl	8001bbc <HAL_UART_ErrorCallback>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b21      	cmp	r3, #33	; 0x21
 8001c42:	d144      	bne.n	8001cce <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4c:	d11a      	bne.n	8001c84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c62:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	1c9a      	adds	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	621a      	str	r2, [r3, #32]
 8001c76:	e00e      	b.n	8001c96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	621a      	str	r2, [r3, #32]
 8001c82:	e008      	b.n	8001c96 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	1c59      	adds	r1, r3, #1
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6211      	str	r1, [r2, #32]
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff4c 	bl	8001b98 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b22      	cmp	r3, #34	; 0x22
 8001d1c:	d171      	bne.n	8001e02 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d26:	d123      	bne.n	8001d70 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10e      	bne.n	8001d54 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	1c9a      	adds	r2, r3, #2
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
 8001d52:	e029      	b.n	8001da8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d6e:	e01b      	b.n	8001da8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6858      	ldr	r0, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	1c59      	adds	r1, r3, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6291      	str	r1, [r2, #40]	; 0x28
 8001d88:	b2c2      	uxtb	r2, r0
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e00c      	b.n	8001da8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	1c58      	adds	r0, r3, #1
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	6288      	str	r0, [r1, #40]	; 0x28
 8001da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4619      	mov	r1, r3
 8001db6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d120      	bne.n	8001dfe <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0220 	bic.w	r2, r2, #32
 8001dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dda:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fed8 	bl	8001baa <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e002      	b.n	8001e04 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
  }
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e0c:	b5b0      	push	{r4, r5, r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e4e:	f023 030c 	bic.w	r3, r3, #12
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	68f9      	ldr	r1, [r7, #12]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6f      	ldr	r2, [pc, #444]	; (8002034 <UART_SetConfig+0x228>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d16b      	bne.n	8001f54 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e7c:	f7ff fd10 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	441a      	add	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4a68      	ldr	r2, [pc, #416]	; (8002038 <UART_SetConfig+0x22c>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	011c      	lsls	r4, r3, #4
 8001ea0:	f7ff fcfe 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	009a      	lsls	r2, r3, #2
 8001eae:	441a      	add	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8001eba:	f7ff fcf1 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009a      	lsls	r2, r3, #2
 8001ec8:	441a      	add	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <UART_SetConfig+0x22c>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2264      	movs	r2, #100	; 0x64
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	1aeb      	subs	r3, r5, r3
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	3332      	adds	r3, #50	; 0x32
 8001ee8:	4a53      	ldr	r2, [pc, #332]	; (8002038 <UART_SetConfig+0x22c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef4:	441c      	add	r4, r3
 8001ef6:	f7ff fcd3 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f10:	f7ff fcc6 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009a      	lsls	r2, r3, #2
 8001f1e:	441a      	add	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4a43      	ldr	r2, [pc, #268]	; (8002038 <UART_SetConfig+0x22c>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	1aeb      	subs	r3, r5, r3
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	3332      	adds	r3, #50	; 0x32
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <UART_SetConfig+0x22c>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4422      	add	r2, r4
 8001f50:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001f52:	e06a      	b.n	800202a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f54:	f7ff fc90 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	009a      	lsls	r2, r3, #2
 8001f62:	441a      	add	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4a32      	ldr	r2, [pc, #200]	; (8002038 <UART_SetConfig+0x22c>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	011c      	lsls	r4, r3, #4
 8001f78:	f7ff fc7e 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	009a      	lsls	r2, r3, #2
 8001f86:	441a      	add	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f92:	f7ff fc71 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009a      	lsls	r2, r3, #2
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	4a22      	ldr	r2, [pc, #136]	; (8002038 <UART_SetConfig+0x22c>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2264      	movs	r2, #100	; 0x64
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	1aeb      	subs	r3, r5, r3
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	3332      	adds	r3, #50	; 0x32
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <UART_SetConfig+0x22c>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fcc:	441c      	add	r4, r3
 8001fce:	f7ff fc53 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	009a      	lsls	r2, r3, #2
 8001fdc:	441a      	add	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fbb2 f5f3 	udiv	r5, r2, r3
 8001fe8:	f7ff fc46 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009a      	lsls	r2, r3, #2
 8001ff6:	441a      	add	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <UART_SetConfig+0x22c>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	2264      	movs	r2, #100	; 0x64
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	1aeb      	subs	r3, r5, r3
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	3332      	adds	r3, #50	; 0x32
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <UART_SetConfig+0x22c>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4422      	add	r2, r4
 8002028:	609a      	str	r2, [r3, #8]
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
 8002032:	bf00      	nop
 8002034:	40013800 	.word	0x40013800
 8002038:	51eb851f 	.word	0x51eb851f

0800203c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002042:	f7fe f883 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002046:	f000 f85b 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204a:	f000 f93d 	bl	80022c8 <MX_GPIO_Init>
  MX_CAN_Init();
 800204e:	f000 f8b1 	bl	80021b4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002052:	f000 f8e5 	bl	8002220 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002056:	f000 f90d 	bl	8002274 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800205a:	f000 f896 	bl	800218a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_CAN_Start(&hcan) != HAL_OK){
 800205e:	4825      	ldr	r0, [pc, #148]	; (80020f4 <main+0xb8>)
 8002060:	f7fe f9f3 	bl	800044a <HAL_CAN_Start>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <main+0x32>
    /* Start Error */
    Error_Handler();
 800206a:	f000 f979 	bl	8002360 <Error_Handler>
//  uint32_t TxData[8];
  uint32_t TxMailbox;

  HAL_StatusTypeDef status;

  TxHeader.IDE = CAN_ID_STD;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  TxHeader.RTR = CAN_RTR_DATA;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  TxHeader.DLC = 8;
 8002076:	2308      	movs	r3, #8
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34

  uint8_t TxDataGPS[5] = {0x0e, 0x0a, 0x13, 0x17, 0x32};
 800207e:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <main+0xbc>)
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002088:	6018      	str	r0, [r3, #0]
 800208a:	3304      	adds	r3, #4
 800208c:	7019      	strb	r1, [r3, #0]
  uint8_t TxDataNormal[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
 800208e:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <main+0xc0>)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002096:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (i > 5) {
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	2b05      	cmp	r3, #5
 800209e:	dd01      	ble.n	80020a4 <main+0x68>
		i = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (i == 0) {
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10f      	bne.n	80020ca <main+0x8e>
		TxHeader.StdId = 0x500;
 80020aa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80020ae:	61bb      	str	r3, [r7, #24]
		status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxDataGPS, &TxMailbox);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	f107 020c 	add.w	r2, r7, #12
 80020b8:	f107 0118 	add.w	r1, r7, #24
 80020bc:	480d      	ldr	r0, [pc, #52]	; (80020f4 <main+0xb8>)
 80020be:	f7fe fa08 	bl	80004d2 <HAL_CAN_AddTxMessage>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80020c8:	e00d      	b.n	80020e6 <main+0xaa>
	}

	else {
		TxHeader.StdId = 0x100;
 80020ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ce:	61bb      	str	r3, [r7, #24]
		status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxDataNormal, &TxMailbox);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	1d3a      	adds	r2, r7, #4
 80020d6:	f107 0118 	add.w	r1, r7, #24
 80020da:	4806      	ldr	r0, [pc, #24]	; (80020f4 <main+0xb8>)
 80020dc:	f7fe f9f9 	bl	80004d2 <HAL_CAN_AddTxMessage>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	}

	i++;
 80020e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e8:	3301      	adds	r3, #1
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34

//	if(status == HAL_ERROR){
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
//	}

	  HAL_Delay(10);
 80020ec:	200a      	movs	r0, #10
 80020ee:	f7fe f88f 	bl	8000210 <HAL_Delay>
	if (i > 5) {
 80020f2:	e7d2      	b.n	800209a <main+0x5e>
 80020f4:	2000002c 	.word	0x2000002c
 80020f8:	08002724 	.word	0x08002724
 80020fc:	0800272c 	.word	0x0800272c

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b090      	sub	sp, #64	; 0x40
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	2228      	movs	r2, #40	; 0x28
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f000 faea 	bl	80026e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002130:	2301      	movs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002134:	2302      	movs	r3, #2
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800213e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe ffb9 	bl	80010c0 <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002154:	f000 f904 	bl	8002360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fa08 	bl	8001588 <HAL_RCC_ClockConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800217e:	f000 f8ef 	bl	8002360 <Error_Handler>
  }
}
 8002182:	bf00      	nop
 8002184:	3740      	adds	r7, #64	; 0x40
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2100      	movs	r1, #0
 8002192:	2015      	movs	r0, #21
 8002194:	f7fe fd71 	bl	8000c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002198:	2015      	movs	r0, #21
 800219a:	f7fe fd8a 	bl	8000cb2 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2025      	movs	r0, #37	; 0x25
 80021a4:	f7fe fd69 	bl	8000c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021a8:	2025      	movs	r0, #37	; 0x25
 80021aa:	f7fe fd82 	bl	8000cb2 <HAL_NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_CAN_Init+0x64>)
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <MX_CAN_Init+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MX_CAN_Init+0x64>)
 80021c0:	2203      	movs	r2, #3
 80021c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_CAN_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MX_CAN_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_CAN_Init+0x64>)
 80021d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_CAN_Init+0x64>)
 80021da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <MX_CAN_Init+0x64>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_CAN_Init+0x64>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <MX_CAN_Init+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_CAN_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <MX_CAN_Init+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_CAN_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <MX_CAN_Init+0x64>)
 8002206:	f7fe f825 	bl	8000254 <HAL_CAN_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002210:	f000 f8a6 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000002c 	.word	0x2000002c
 800221c:	40006400 	.word	0x40006400

08002220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <MX_USART1_UART_Init+0x50>)
 8002228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <MX_USART1_UART_Init+0x4c>)
 800222c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_USART1_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002246:	220c      	movs	r2, #12
 8002248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_USART1_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002258:	f7ff fb54 	bl	8001904 <HAL_UART_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002262:	f000 f87d 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000054 	.word	0x20000054
 8002270:	40013800 	.word	0x40013800

08002274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <MX_USART2_UART_Init+0x50>)
 800227c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 8002280:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 800229a:	220c      	movs	r2, #12
 800229c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 80022ac:	f7ff fb2a 	bl	8001904 <HAL_UART_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022b6:	f000 f853 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000094 	.word	0x20000094
 80022c4:	40004400 	.word	0x40004400

080022c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <MX_GPIO_Init+0x90>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <MX_GPIO_Init+0x90>)
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_GPIO_Init+0x90>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <MX_GPIO_Init+0x90>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <MX_GPIO_Init+0x90>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <MX_GPIO_Init+0x90>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <MX_GPIO_Init+0x90>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <MX_GPIO_Init+0x90>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MX_GPIO_Init+0x90>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	480c      	ldr	r0, [pc, #48]	; (800235c <MX_GPIO_Init+0x94>)
 800232c:	f7fe feb0 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2302      	movs	r3, #2
 8002340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4619      	mov	r1, r3
 8002348:	4804      	ldr	r0, [pc, #16]	; (800235c <MX_GPIO_Init+0x94>)
 800234a:	f7fe fd43 	bl	8000dd4 <HAL_GPIO_Init>

}
 800234e:	bf00      	nop
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	40010c00 	.word	0x40010c00

08002360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_MspInit+0x5c>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_MspInit+0x5c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6193      	str	r3, [r2, #24]
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_MspInit+0x5c>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_MspInit+0x5c>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_MspInit+0x5c>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_MspInit+0x5c>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_MspInit+0x60>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_MspInit+0x60>)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000

080023d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_CAN_MspInit+0x8c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d131      	bne.n	8002454 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_CAN_MspInit+0x90>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	4a1a      	ldr	r2, [pc, #104]	; (8002460 <HAL_CAN_MspInit+0x90>)
 80023f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fa:	61d3      	str	r3, [r2, #28]
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <HAL_CAN_MspInit+0x90>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <HAL_CAN_MspInit+0x90>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <HAL_CAN_MspInit+0x90>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_CAN_MspInit+0x90>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4619      	mov	r1, r3
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <HAL_CAN_MspInit+0x94>)
 8002436:	f7fe fccd 	bl	8000dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800243a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <HAL_CAN_MspInit+0x94>)
 8002450:	f7fe fcc0 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002454:	bf00      	nop
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40006400 	.word	0x40006400
 8002460:	40021000 	.word	0x40021000
 8002464:	40010800 	.word	0x40010800

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0318 	add.w	r3, r7, #24
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a37      	ldr	r2, [pc, #220]	; (8002560 <HAL_UART_MspInit+0xf8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d132      	bne.n	80024ee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_UART_MspInit+0xfc>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a35      	ldr	r2, [pc, #212]	; (8002564 <HAL_UART_MspInit+0xfc>)
 800248e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b33      	ldr	r3, [pc, #204]	; (8002564 <HAL_UART_MspInit+0xfc>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	4b30      	ldr	r3, [pc, #192]	; (8002564 <HAL_UART_MspInit+0xfc>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <HAL_UART_MspInit+0xfc>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_UART_MspInit+0xfc>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	4826      	ldr	r0, [pc, #152]	; (8002568 <HAL_UART_MspInit+0x100>)
 80024ce:	f7fe fc81 	bl	8000dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 0318 	add.w	r3, r7, #24
 80024e4:	4619      	mov	r1, r3
 80024e6:	4820      	ldr	r0, [pc, #128]	; (8002568 <HAL_UART_MspInit+0x100>)
 80024e8:	f7fe fc74 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ec:	e034      	b.n	8002558 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_UART_MspInit+0x104>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d12f      	bne.n	8002558 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_UART_MspInit+0xfc>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4a19      	ldr	r2, [pc, #100]	; (8002564 <HAL_UART_MspInit+0xfc>)
 80024fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002502:	61d3      	str	r3, [r2, #28]
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_UART_MspInit+0xfc>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_UART_MspInit+0xfc>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a13      	ldr	r2, [pc, #76]	; (8002564 <HAL_UART_MspInit+0xfc>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_UART_MspInit+0xfc>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002528:	2304      	movs	r3, #4
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 0318 	add.w	r3, r7, #24
 8002538:	4619      	mov	r1, r3
 800253a:	480b      	ldr	r0, [pc, #44]	; (8002568 <HAL_UART_MspInit+0x100>)
 800253c:	f7fe fc4a 	bl	8000dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002540:	2308      	movs	r3, #8
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	4619      	mov	r1, r3
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_UART_MspInit+0x100>)
 8002554:	f7fe fc3e 	bl	8000dd4 <HAL_GPIO_Init>
}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40013800 	.word	0x40013800
 8002564:	40021000 	.word	0x40021000
 8002568:	40010800 	.word	0x40010800
 800256c:	40004400 	.word	0x40004400

08002570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <HardFault_Handler+0x4>

08002582 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <MemManage_Handler+0x4>

08002588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <BusFault_Handler+0x4>

0800258e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <UsageFault_Handler+0x4>

08002594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025bc:	f7fd fe0c 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <CAN1_RX1_IRQHandler+0x10>)
 80025ca:	f7fe f85c 	bl	8000686 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000002c 	.word	0x2000002c

080025d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USART1_IRQHandler+0x10>)
 80025de:	f7ff f9df 	bl	80019a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000054 	.word	0x20000054

080025ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <SystemInit+0x5c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <SystemInit+0x5c>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <SystemInit+0x5c>)
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4911      	ldr	r1, [pc, #68]	; (8002648 <SystemInit+0x5c>)
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <SystemInit+0x60>)
 8002604:	4013      	ands	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <SystemInit+0x5c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <SystemInit+0x5c>)
 800260e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <SystemInit+0x5c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SystemInit+0x5c>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002622:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <SystemInit+0x5c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <SystemInit+0x5c>)
 800262a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800262e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SystemInit+0x5c>)
 8002632:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002636:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <SystemInit+0x64>)
 800263a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800263e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	f8ff0000 	.word	0xf8ff0000
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002654:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002656:	e003      	b.n	8002660 <LoopCopyDataInit>

08002658 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800265a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800265c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800265e:	3104      	adds	r1, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002664:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002666:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002668:	d3f6      	bcc.n	8002658 <CopyDataInit>
  ldr r2, =_sbss
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800266c:	e002      	b.n	8002674 <LoopFillZerobss>

0800266e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002670:	f842 3b04 	str.w	r3, [r2], #4

08002674 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002676:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002678:	d3f9      	bcc.n	800266e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800267a:	f7ff ffb7 	bl	80025ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267e:	f000 f80f 	bl	80026a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002682:	f7ff fcdb 	bl	800203c <main>
  bx lr
 8002686:	4770      	bx	lr
  ldr r3, =_sidata
 8002688:	08002754 	.word	0x08002754
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002690:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002694:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002698:	200000d4 	.word	0x200000d4

0800269c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC1_2_IRQHandler>
	...

080026a0 <__libc_init_array>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	2500      	movs	r5, #0
 80026a4:	4e0c      	ldr	r6, [pc, #48]	; (80026d8 <__libc_init_array+0x38>)
 80026a6:	4c0d      	ldr	r4, [pc, #52]	; (80026dc <__libc_init_array+0x3c>)
 80026a8:	1ba4      	subs	r4, r4, r6
 80026aa:	10a4      	asrs	r4, r4, #2
 80026ac:	42a5      	cmp	r5, r4
 80026ae:	d109      	bne.n	80026c4 <__libc_init_array+0x24>
 80026b0:	f000 f822 	bl	80026f8 <_init>
 80026b4:	2500      	movs	r5, #0
 80026b6:	4e0a      	ldr	r6, [pc, #40]	; (80026e0 <__libc_init_array+0x40>)
 80026b8:	4c0a      	ldr	r4, [pc, #40]	; (80026e4 <__libc_init_array+0x44>)
 80026ba:	1ba4      	subs	r4, r4, r6
 80026bc:	10a4      	asrs	r4, r4, #2
 80026be:	42a5      	cmp	r5, r4
 80026c0:	d105      	bne.n	80026ce <__libc_init_array+0x2e>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026c8:	4798      	blx	r3
 80026ca:	3501      	adds	r5, #1
 80026cc:	e7ee      	b.n	80026ac <__libc_init_array+0xc>
 80026ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026d2:	4798      	blx	r3
 80026d4:	3501      	adds	r5, #1
 80026d6:	e7f2      	b.n	80026be <__libc_init_array+0x1e>
 80026d8:	0800274c 	.word	0x0800274c
 80026dc:	0800274c 	.word	0x0800274c
 80026e0:	0800274c 	.word	0x0800274c
 80026e4:	08002750 	.word	0x08002750

080026e8 <memset>:
 80026e8:	4603      	mov	r3, r0
 80026ea:	4402      	add	r2, r0
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d100      	bne.n	80026f2 <memset+0xa>
 80026f0:	4770      	bx	lr
 80026f2:	f803 1b01 	strb.w	r1, [r3], #1
 80026f6:	e7f9      	b.n	80026ec <memset+0x4>

080026f8 <_init>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr

08002704 <_fini>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr
